
robotore_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .backup_flash2 000c0000  08040000  08040000  00040000  2**0
                  ALLOC
  3 .text         0000da24  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000480  08015a28  08015a28  00025a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08015ea8  08015ea8  000301e8  2**0
                  CONTENTS
  6 .ARM          00000008  08015ea8  08015ea8  00025ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08015eb0  08015eb0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08015eb0  08015eb0  00025eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08015eb4  08015eb4  00025eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000001e8  20000000  08015eb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00018460  200001e8  080160a0  000301e8  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20018648  080160a0  00038648  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019db9  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000038b3  00000000  00000000  00049fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001598  00000000  00000000  0004d888  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  0004ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00023410  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00012eff  00000000  00000000  00073638  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000c9897  00000000  00000000  00086537  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0014fdce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d14  00000000  00000000  0014fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001e8 	.word	0x200001e8
 800801c:	00000000 	.word	0x00000000
 8008020:	08015a0c 	.word	0x08015a0c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001ec 	.word	0x200001ec
 800803c:	08015a0c 	.word	0x08015a0c

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2uiz>:
 8008a18:	004a      	lsls	r2, r1, #1
 8008a1a:	d211      	bcs.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008a20:	d211      	bcs.n	8008a46 <__aeabi_d2uiz+0x2e>
 8008a22:	d50d      	bpl.n	8008a40 <__aeabi_d2uiz+0x28>
 8008a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008a2c:	d40e      	bmi.n	8008a4c <__aeabi_d2uiz+0x34>
 8008a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008a3e:	4770      	bx	lr
 8008a40:	f04f 0000 	mov.w	r0, #0
 8008a44:	4770      	bx	lr
 8008a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a4a:	d102      	bne.n	8008a52 <__aeabi_d2uiz+0x3a>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	4770      	bx	lr
 8008a52:	f04f 0000 	mov.w	r0, #0
 8008a56:	4770      	bx	lr

08008a58 <__aeabi_d2f>:
 8008a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a60:	bf24      	itt	cs
 8008a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a6a:	d90d      	bls.n	8008a88 <__aeabi_d2f+0x30>
 8008a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a80:	bf08      	it	eq
 8008a82:	f020 0001 	biceq.w	r0, r0, #1
 8008a86:	4770      	bx	lr
 8008a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a8c:	d121      	bne.n	8008ad2 <__aeabi_d2f+0x7a>
 8008a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a92:	bfbc      	itt	lt
 8008a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a98:	4770      	bxlt	lr
 8008a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008aa2:	f1c2 0218 	rsb	r2, r2, #24
 8008aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8008aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8008aae:	fa20 f002 	lsr.w	r0, r0, r2
 8008ab2:	bf18      	it	ne
 8008ab4:	f040 0001 	orrne.w	r0, r0, #1
 8008ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ac4:	ea40 000c 	orr.w	r0, r0, ip
 8008ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8008acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ad0:	e7cc      	b.n	8008a6c <__aeabi_d2f+0x14>
 8008ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ad6:	d107      	bne.n	8008ae8 <__aeabi_d2f+0x90>
 8008ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008adc:	bf1e      	ittt	ne
 8008ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ae6:	4770      	bxne	lr
 8008ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <__aeabi_uldivmod>:
 8008af8:	b953      	cbnz	r3, 8008b10 <__aeabi_uldivmod+0x18>
 8008afa:	b94a      	cbnz	r2, 8008b10 <__aeabi_uldivmod+0x18>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	bf08      	it	eq
 8008b00:	2800      	cmpeq	r0, #0
 8008b02:	bf1c      	itt	ne
 8008b04:	f04f 31ff 	movne.w	r1, #4294967295
 8008b08:	f04f 30ff 	movne.w	r0, #4294967295
 8008b0c:	f000 b972 	b.w	8008df4 <__aeabi_idiv0>
 8008b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8008b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008b18:	f000 f806 	bl	8008b28 <__udivmoddi4>
 8008b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b24:	b004      	add	sp, #16
 8008b26:	4770      	bx	lr

08008b28 <__udivmoddi4>:
 8008b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b2c:	9e08      	ldr	r6, [sp, #32]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4688      	mov	r8, r1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d14b      	bne.n	8008bce <__udivmoddi4+0xa6>
 8008b36:	428a      	cmp	r2, r1
 8008b38:	4615      	mov	r5, r2
 8008b3a:	d967      	bls.n	8008c0c <__udivmoddi4+0xe4>
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	b14a      	cbz	r2, 8008b56 <__udivmoddi4+0x2e>
 8008b42:	f1c2 0720 	rsb	r7, r2, #32
 8008b46:	fa01 f302 	lsl.w	r3, r1, r2
 8008b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b4e:	4095      	lsls	r5, r2
 8008b50:	ea47 0803 	orr.w	r8, r7, r3
 8008b54:	4094      	lsls	r4, r2
 8008b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b5a:	0c23      	lsrs	r3, r4, #16
 8008b5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b60:	fa1f fc85 	uxth.w	ip, r5
 8008b64:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b6c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d909      	bls.n	8008b88 <__udivmoddi4+0x60>
 8008b74:	18eb      	adds	r3, r5, r3
 8008b76:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b7a:	f080 811b 	bcs.w	8008db4 <__udivmoddi4+0x28c>
 8008b7e:	4299      	cmp	r1, r3
 8008b80:	f240 8118 	bls.w	8008db4 <__udivmoddi4+0x28c>
 8008b84:	3f02      	subs	r7, #2
 8008b86:	442b      	add	r3, r5
 8008b88:	1a5b      	subs	r3, r3, r1
 8008b8a:	b2a4      	uxth	r4, r4
 8008b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b98:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b9c:	45a4      	cmp	ip, r4
 8008b9e:	d909      	bls.n	8008bb4 <__udivmoddi4+0x8c>
 8008ba0:	192c      	adds	r4, r5, r4
 8008ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba6:	f080 8107 	bcs.w	8008db8 <__udivmoddi4+0x290>
 8008baa:	45a4      	cmp	ip, r4
 8008bac:	f240 8104 	bls.w	8008db8 <__udivmoddi4+0x290>
 8008bb0:	3802      	subs	r0, #2
 8008bb2:	442c      	add	r4, r5
 8008bb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008bb8:	eba4 040c 	sub.w	r4, r4, ip
 8008bbc:	2700      	movs	r7, #0
 8008bbe:	b11e      	cbz	r6, 8008bc8 <__udivmoddi4+0xa0>
 8008bc0:	40d4      	lsrs	r4, r2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	428b      	cmp	r3, r1
 8008bd0:	d909      	bls.n	8008be6 <__udivmoddi4+0xbe>
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	f000 80eb 	beq.w	8008dae <__udivmoddi4+0x286>
 8008bd8:	2700      	movs	r7, #0
 8008bda:	e9c6 0100 	strd	r0, r1, [r6]
 8008bde:	4638      	mov	r0, r7
 8008be0:	4639      	mov	r1, r7
 8008be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be6:	fab3 f783 	clz	r7, r3
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	d147      	bne.n	8008c7e <__udivmoddi4+0x156>
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	d302      	bcc.n	8008bf8 <__udivmoddi4+0xd0>
 8008bf2:	4282      	cmp	r2, r0
 8008bf4:	f200 80fa 	bhi.w	8008dec <__udivmoddi4+0x2c4>
 8008bf8:	1a84      	subs	r4, r0, r2
 8008bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bfe:	2001      	movs	r0, #1
 8008c00:	4698      	mov	r8, r3
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	d0e0      	beq.n	8008bc8 <__udivmoddi4+0xa0>
 8008c06:	e9c6 4800 	strd	r4, r8, [r6]
 8008c0a:	e7dd      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008c0c:	b902      	cbnz	r2, 8008c10 <__udivmoddi4+0xe8>
 8008c0e:	deff      	udf	#255	; 0xff
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f040 808f 	bne.w	8008d38 <__udivmoddi4+0x210>
 8008c1a:	1b49      	subs	r1, r1, r5
 8008c1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c20:	fa1f f885 	uxth.w	r8, r5
 8008c24:	2701      	movs	r7, #1
 8008c26:	fbb1 fcfe 	udiv	ip, r1, lr
 8008c2a:	0c23      	lsrs	r3, r4, #16
 8008c2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008c34:	fb08 f10c 	mul.w	r1, r8, ip
 8008c38:	4299      	cmp	r1, r3
 8008c3a:	d907      	bls.n	8008c4c <__udivmoddi4+0x124>
 8008c3c:	18eb      	adds	r3, r5, r3
 8008c3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c42:	d202      	bcs.n	8008c4a <__udivmoddi4+0x122>
 8008c44:	4299      	cmp	r1, r3
 8008c46:	f200 80cd 	bhi.w	8008de4 <__udivmoddi4+0x2bc>
 8008c4a:	4684      	mov	ip, r0
 8008c4c:	1a59      	subs	r1, r3, r1
 8008c4e:	b2a3      	uxth	r3, r4
 8008c50:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c54:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c5c:	fb08 f800 	mul.w	r8, r8, r0
 8008c60:	45a0      	cmp	r8, r4
 8008c62:	d907      	bls.n	8008c74 <__udivmoddi4+0x14c>
 8008c64:	192c      	adds	r4, r5, r4
 8008c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c6a:	d202      	bcs.n	8008c72 <__udivmoddi4+0x14a>
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	f200 80b6 	bhi.w	8008dde <__udivmoddi4+0x2b6>
 8008c72:	4618      	mov	r0, r3
 8008c74:	eba4 0408 	sub.w	r4, r4, r8
 8008c78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c7c:	e79f      	b.n	8008bbe <__udivmoddi4+0x96>
 8008c7e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c82:	40bb      	lsls	r3, r7
 8008c84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c88:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c8c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c90:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c94:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c9c:	4325      	orrs	r5, r4
 8008c9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008ca2:	0c2c      	lsrs	r4, r5, #16
 8008ca4:	fb08 3319 	mls	r3, r8, r9, r3
 8008ca8:	fa1f fa8e 	uxth.w	sl, lr
 8008cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008cb0:	fb09 f40a 	mul.w	r4, r9, sl
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8008cba:	fa00 f107 	lsl.w	r1, r0, r7
 8008cbe:	d90b      	bls.n	8008cd8 <__udivmoddi4+0x1b0>
 8008cc0:	eb1e 0303 	adds.w	r3, lr, r3
 8008cc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8008cc8:	f080 8087 	bcs.w	8008dda <__udivmoddi4+0x2b2>
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	f240 8084 	bls.w	8008dda <__udivmoddi4+0x2b2>
 8008cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8008cd6:	4473      	add	r3, lr
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	b2ad      	uxth	r5, r5
 8008cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ce4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ce8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	d908      	bls.n	8008d02 <__udivmoddi4+0x1da>
 8008cf0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf8:	d26b      	bcs.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfa:	45a2      	cmp	sl, r4
 8008cfc:	d969      	bls.n	8008dd2 <__udivmoddi4+0x2aa>
 8008cfe:	3802      	subs	r0, #2
 8008d00:	4474      	add	r4, lr
 8008d02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008d06:	fba0 8902 	umull	r8, r9, r0, r2
 8008d0a:	eba4 040a 	sub.w	r4, r4, sl
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	46c2      	mov	sl, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	d354      	bcc.n	8008dc0 <__udivmoddi4+0x298>
 8008d16:	d051      	beq.n	8008dbc <__udivmoddi4+0x294>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d069      	beq.n	8008df0 <__udivmoddi4+0x2c8>
 8008d1c:	ebb1 050a 	subs.w	r5, r1, sl
 8008d20:	eb64 0403 	sbc.w	r4, r4, r3
 8008d24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008d28:	40fd      	lsrs	r5, r7
 8008d2a:	40fc      	lsrs	r4, r7
 8008d2c:	ea4c 0505 	orr.w	r5, ip, r5
 8008d30:	e9c6 5400 	strd	r5, r4, [r6]
 8008d34:	2700      	movs	r7, #0
 8008d36:	e747      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008d38:	f1c2 0320 	rsb	r3, r2, #32
 8008d3c:	fa20 f703 	lsr.w	r7, r0, r3
 8008d40:	4095      	lsls	r5, r2
 8008d42:	fa01 f002 	lsl.w	r0, r1, r2
 8008d46:	fa21 f303 	lsr.w	r3, r1, r3
 8008d4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d4e:	4338      	orrs	r0, r7
 8008d50:	0c01      	lsrs	r1, r0, #16
 8008d52:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d56:	fa1f f885 	uxth.w	r8, r5
 8008d5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d62:	fb07 f308 	mul.w	r3, r7, r8
 8008d66:	428b      	cmp	r3, r1
 8008d68:	fa04 f402 	lsl.w	r4, r4, r2
 8008d6c:	d907      	bls.n	8008d7e <__udivmoddi4+0x256>
 8008d6e:	1869      	adds	r1, r5, r1
 8008d70:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d74:	d22f      	bcs.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d76:	428b      	cmp	r3, r1
 8008d78:	d92d      	bls.n	8008dd6 <__udivmoddi4+0x2ae>
 8008d7a:	3f02      	subs	r7, #2
 8008d7c:	4429      	add	r1, r5
 8008d7e:	1acb      	subs	r3, r1, r3
 8008d80:	b281      	uxth	r1, r0
 8008d82:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d86:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d8e:	fb00 f308 	mul.w	r3, r0, r8
 8008d92:	428b      	cmp	r3, r1
 8008d94:	d907      	bls.n	8008da6 <__udivmoddi4+0x27e>
 8008d96:	1869      	adds	r1, r5, r1
 8008d98:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d9c:	d217      	bcs.n	8008dce <__udivmoddi4+0x2a6>
 8008d9e:	428b      	cmp	r3, r1
 8008da0:	d915      	bls.n	8008dce <__udivmoddi4+0x2a6>
 8008da2:	3802      	subs	r0, #2
 8008da4:	4429      	add	r1, r5
 8008da6:	1ac9      	subs	r1, r1, r3
 8008da8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008dac:	e73b      	b.n	8008c26 <__udivmoddi4+0xfe>
 8008dae:	4637      	mov	r7, r6
 8008db0:	4630      	mov	r0, r6
 8008db2:	e709      	b.n	8008bc8 <__udivmoddi4+0xa0>
 8008db4:	4607      	mov	r7, r0
 8008db6:	e6e7      	b.n	8008b88 <__udivmoddi4+0x60>
 8008db8:	4618      	mov	r0, r3
 8008dba:	e6fb      	b.n	8008bb4 <__udivmoddi4+0x8c>
 8008dbc:	4541      	cmp	r1, r8
 8008dbe:	d2ab      	bcs.n	8008d18 <__udivmoddi4+0x1f0>
 8008dc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8008dc4:	eb69 020e 	sbc.w	r2, r9, lr
 8008dc8:	3801      	subs	r0, #1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	e7a4      	b.n	8008d18 <__udivmoddi4+0x1f0>
 8008dce:	4660      	mov	r0, ip
 8008dd0:	e7e9      	b.n	8008da6 <__udivmoddi4+0x27e>
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	e795      	b.n	8008d02 <__udivmoddi4+0x1da>
 8008dd6:	4667      	mov	r7, ip
 8008dd8:	e7d1      	b.n	8008d7e <__udivmoddi4+0x256>
 8008dda:	4681      	mov	r9, r0
 8008ddc:	e77c      	b.n	8008cd8 <__udivmoddi4+0x1b0>
 8008dde:	3802      	subs	r0, #2
 8008de0:	442c      	add	r4, r5
 8008de2:	e747      	b.n	8008c74 <__udivmoddi4+0x14c>
 8008de4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008de8:	442b      	add	r3, r5
 8008dea:	e72f      	b.n	8008c4c <__udivmoddi4+0x124>
 8008dec:	4638      	mov	r0, r7
 8008dee:	e708      	b.n	8008c02 <__udivmoddi4+0xda>
 8008df0:	4637      	mov	r7, r6
 8008df2:	e6e9      	b.n	8008bc8 <__udivmoddi4+0xa0>

08008df4 <__aeabi_idiv0>:
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop

08008df8 <ADCinit>:
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK){
				      Error_Handler();
				}
}
void ADCinit(){
 8008df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	b097      	sub	sp, #92	; 0x5c
 8008dfe:	af0a      	add	r7, sp, #40	; 0x28
	Flash_load();
 8008e00:	f000 ff42 	bl	8009c88 <Flash_load>
	HAL_Delay(100);
 8008e04:	2064      	movs	r0, #100	; 0x64
 8008e06:	f003 fa67 	bl	800c2d8 <HAL_Delay>
	uint16_t a[SENSOR_NUMBER];
	uint16_t i;
	i = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e


	while(i < SENSOR_NUMBER){
 8008e0e:	e010      	b.n	8008e32 <ADCinit+0x3a>
		a[i] = 0;
 8008e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e18:	4413      	add	r3, r2
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		b[i] = 10000;
 8008e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e22:	4a96      	ldr	r2, [pc, #600]	; (800907c <ADCinit+0x284>)
 8008e24:	f242 7110 	movw	r1, #10000	; 0x2710
 8008e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;
 8008e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e2e:	3301      	adds	r3, #1
 8008e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i < SENSOR_NUMBER){
 8008e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e34:	2b0c      	cmp	r3, #12
 8008e36:	d9eb      	bls.n	8008e10 <ADCinit+0x18>
	}
	i = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14))
 8008e3c:	e03d      	b.n	8008eba <ADCinit+0xc2>
	{
		if(analog[i] > a[i]){
 8008e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e40:	4a8f      	ldr	r2, [pc, #572]	; (8009080 <ADCinit+0x288>)
 8008e42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008e46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008e4e:	440b      	add	r3, r1
 8008e50:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d90a      	bls.n	8008e6e <ADCinit+0x76>
			a[i] = analog[i];
 8008e58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e5c:	4988      	ldr	r1, [pc, #544]	; (8009080 <ADCinit+0x288>)
 8008e5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008e68:	440b      	add	r3, r1
 8008e6a:	f823 2c1c 	strh.w	r2, [r3, #-28]
		}
		if(analog[i] < b[i]){
 8008e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e70:	4a83      	ldr	r2, [pc, #524]	; (8009080 <ADCinit+0x288>)
 8008e72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e78:	4980      	ldr	r1, [pc, #512]	; (800907c <ADCinit+0x284>)
 8008e7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d207      	bcs.n	8008e92 <ADCinit+0x9a>
			b[i] = analog[i];
 8008e82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e86:	497e      	ldr	r1, [pc, #504]	; (8009080 <ADCinit+0x288>)
 8008e88:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8008e8c:	4a7b      	ldr	r2, [pc, #492]	; (800907c <ADCinit+0x284>)
 8008e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		i++;
 8008e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e94:	3301      	adds	r3, #1
 8008e96:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if(i == SENSOR_NUMBER){
 8008e98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e9a:	2b0d      	cmp	r3, #13
 8008e9c:	d101      	bne.n	8008ea2 <ADCinit+0xaa>
			i=0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
		lcd_clear();lcd_locate(0,0);
 8008ea2:	f000 fa7d 	bl	80093a0 <lcd_clear>
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f000 fa89 	bl	80093c0 <lcd_locate>
		lcd_printf("ADCinit");
 8008eae:	4875      	ldr	r0, [pc, #468]	; (8009084 <ADCinit+0x28c>)
 8008eb0:	f000 fab0 	bl	8009414 <lcd_printf>
		LED(2);
 8008eb4:	2002      	movs	r0, #2
 8008eb6:	f000 ff97 	bl	8009de8 <LED>
	while (HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14))
 8008eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ebe:	4872      	ldr	r0, [pc, #456]	; (8009088 <ADCinit+0x290>)
 8008ec0:	f004 ff28 	bl	800dd14 <HAL_GPIO_ReadPin>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1b9      	bne.n	8008e3e <ADCinit+0x46>
	}
	i = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 printf("MAX: %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n", a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12]);
 8008ece:	8abb      	ldrh	r3, [r7, #20]
 8008ed0:	469e      	mov	lr, r3
 8008ed2:	8afb      	ldrh	r3, [r7, #22]
 8008ed4:	4698      	mov	r8, r3
 8008ed6:	8b3b      	ldrh	r3, [r7, #24]
 8008ed8:	4699      	mov	r9, r3
 8008eda:	8b7b      	ldrh	r3, [r7, #26]
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	8bba      	ldrh	r2, [r7, #28]
 8008ee0:	8bf9      	ldrh	r1, [r7, #30]
 8008ee2:	8c38      	ldrh	r0, [r7, #32]
 8008ee4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8008ee6:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8008ee8:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8008eea:	f8b7 c028 	ldrh.w	ip, [r7, #40]	; 0x28
 8008eee:	f8c7 c008 	str.w	ip, [r7, #8]
 8008ef2:	f8b7 c02a 	ldrh.w	ip, [r7, #42]	; 0x2a
 8008ef6:	f8c7 c004 	str.w	ip, [r7, #4]
 8008efa:	f8b7 c02c 	ldrh.w	ip, [r7, #44]	; 0x2c
 8008efe:	4663      	mov	r3, ip
 8008f00:	9309      	str	r3, [sp, #36]	; 0x24
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	9308      	str	r3, [sp, #32]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	9606      	str	r6, [sp, #24]
 8008f0c:	9505      	str	r5, [sp, #20]
 8008f0e:	9404      	str	r4, [sp, #16]
 8008f10:	9003      	str	r0, [sp, #12]
 8008f12:	9102      	str	r1, [sp, #8]
 8008f14:	9201      	str	r2, [sp, #4]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	4671      	mov	r1, lr
 8008f20:	485a      	ldr	r0, [pc, #360]	; (800908c <ADCinit+0x294>)
 8008f22:	f009 f95d 	bl	80121e0 <iprintf>
	 printf("mini: %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n", b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12]);
 8008f26:	4b55      	ldr	r3, [pc, #340]	; (800907c <ADCinit+0x284>)
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	469c      	mov	ip, r3
 8008f2c:	4b53      	ldr	r3, [pc, #332]	; (800907c <ADCinit+0x284>)
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	469e      	mov	lr, r3
 8008f32:	4b52      	ldr	r3, [pc, #328]	; (800907c <ADCinit+0x284>)
 8008f34:	889b      	ldrh	r3, [r3, #4]
 8008f36:	4698      	mov	r8, r3
 8008f38:	4b50      	ldr	r3, [pc, #320]	; (800907c <ADCinit+0x284>)
 8008f3a:	88db      	ldrh	r3, [r3, #6]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4b4f      	ldr	r3, [pc, #316]	; (800907c <ADCinit+0x284>)
 8008f40:	891b      	ldrh	r3, [r3, #8]
 8008f42:	4619      	mov	r1, r3
 8008f44:	4b4d      	ldr	r3, [pc, #308]	; (800907c <ADCinit+0x284>)
 8008f46:	895b      	ldrh	r3, [r3, #10]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	4b4c      	ldr	r3, [pc, #304]	; (800907c <ADCinit+0x284>)
 8008f4c:	899b      	ldrh	r3, [r3, #12]
 8008f4e:	461c      	mov	r4, r3
 8008f50:	4b4a      	ldr	r3, [pc, #296]	; (800907c <ADCinit+0x284>)
 8008f52:	89db      	ldrh	r3, [r3, #14]
 8008f54:	461d      	mov	r5, r3
 8008f56:	4b49      	ldr	r3, [pc, #292]	; (800907c <ADCinit+0x284>)
 8008f58:	8a1b      	ldrh	r3, [r3, #16]
 8008f5a:	461e      	mov	r6, r3
 8008f5c:	4b47      	ldr	r3, [pc, #284]	; (800907c <ADCinit+0x284>)
 8008f5e:	8a5b      	ldrh	r3, [r3, #18]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	4b46      	ldr	r3, [pc, #280]	; (800907c <ADCinit+0x284>)
 8008f64:	8a9b      	ldrh	r3, [r3, #20]
 8008f66:	60bb      	str	r3, [r7, #8]
 8008f68:	4b44      	ldr	r3, [pc, #272]	; (800907c <ADCinit+0x284>)
 8008f6a:	8adb      	ldrh	r3, [r3, #22]
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	4b43      	ldr	r3, [pc, #268]	; (800907c <ADCinit+0x284>)
 8008f70:	8b1b      	ldrh	r3, [r3, #24]
 8008f72:	9309      	str	r3, [sp, #36]	; 0x24
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	9308      	str	r3, [sp, #32]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	9605      	str	r6, [sp, #20]
 8008f82:	9504      	str	r5, [sp, #16]
 8008f84:	9403      	str	r4, [sp, #12]
 8008f86:	9002      	str	r0, [sp, #8]
 8008f88:	9101      	str	r1, [sp, #4]
 8008f8a:	9200      	str	r2, [sp, #0]
 8008f8c:	4643      	mov	r3, r8
 8008f8e:	4672      	mov	r2, lr
 8008f90:	4661      	mov	r1, ip
 8008f92:	483f      	ldr	r0, [pc, #252]	; (8009090 <ADCinit+0x298>)
 8008f94:	f009 f924 	bl	80121e0 <iprintf>
	while(i < SENSOR_NUMBER){
 8008f98:	e025      	b.n	8008fe6 <ADCinit+0x1ee>
		di[i] = a[i]-b[i];
 8008f9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8008fa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008faa:	4a34      	ldr	r2, [pc, #208]	; (800907c <ADCinit+0x284>)
 8008fac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008fb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fb2:	1a8a      	subs	r2, r1, r2
 8008fb4:	b291      	uxth	r1, r2
 8008fb6:	4a37      	ldr	r2, [pc, #220]	; (8009094 <ADCinit+0x29c>)
 8008fb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[i+3] = di[i];
 8008fbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fc0:	3303      	adds	r3, #3
 8008fc2:	4934      	ldr	r1, [pc, #208]	; (8009094 <ADCinit+0x29c>)
 8008fc4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8008fc8:	4a33      	ldr	r2, [pc, #204]	; (8009098 <ADCinit+0x2a0>)
 8008fca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		work_ram[i+17] = b[i];
 8008fce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fd2:	3311      	adds	r3, #17
 8008fd4:	4929      	ldr	r1, [pc, #164]	; (800907c <ADCinit+0x284>)
 8008fd6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8008fda:	4a2f      	ldr	r2, [pc, #188]	; (8009098 <ADCinit+0x2a0>)
 8008fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i++;
 8008fe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i < SENSOR_NUMBER){
 8008fe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fe8:	2b0c      	cmp	r3, #12
 8008fea:	d9d6      	bls.n	8008f9a <ADCinit+0x1a2>
	}
	printf("flash: %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n", work_ram[3],work_ram[4],work_ram[5],work_ram[6],work_ram[7],work_ram[8],work_ram[9],work_ram[10],work_ram[11],work_ram[12],work_ram[13],work_ram[14],work_ram[15]);
 8008fec:	4b2a      	ldr	r3, [pc, #168]	; (8009098 <ADCinit+0x2a0>)
 8008fee:	88db      	ldrh	r3, [r3, #6]
 8008ff0:	469c      	mov	ip, r3
 8008ff2:	4b29      	ldr	r3, [pc, #164]	; (8009098 <ADCinit+0x2a0>)
 8008ff4:	891b      	ldrh	r3, [r3, #8]
 8008ff6:	469e      	mov	lr, r3
 8008ff8:	4b27      	ldr	r3, [pc, #156]	; (8009098 <ADCinit+0x2a0>)
 8008ffa:	895b      	ldrh	r3, [r3, #10]
 8008ffc:	4698      	mov	r8, r3
 8008ffe:	4b26      	ldr	r3, [pc, #152]	; (8009098 <ADCinit+0x2a0>)
 8009000:	899b      	ldrh	r3, [r3, #12]
 8009002:	461a      	mov	r2, r3
 8009004:	4b24      	ldr	r3, [pc, #144]	; (8009098 <ADCinit+0x2a0>)
 8009006:	89db      	ldrh	r3, [r3, #14]
 8009008:	4619      	mov	r1, r3
 800900a:	4b23      	ldr	r3, [pc, #140]	; (8009098 <ADCinit+0x2a0>)
 800900c:	8a1b      	ldrh	r3, [r3, #16]
 800900e:	4618      	mov	r0, r3
 8009010:	4b21      	ldr	r3, [pc, #132]	; (8009098 <ADCinit+0x2a0>)
 8009012:	8a5b      	ldrh	r3, [r3, #18]
 8009014:	461c      	mov	r4, r3
 8009016:	4b20      	ldr	r3, [pc, #128]	; (8009098 <ADCinit+0x2a0>)
 8009018:	8a9b      	ldrh	r3, [r3, #20]
 800901a:	461d      	mov	r5, r3
 800901c:	4b1e      	ldr	r3, [pc, #120]	; (8009098 <ADCinit+0x2a0>)
 800901e:	8adb      	ldrh	r3, [r3, #22]
 8009020:	461e      	mov	r6, r3
 8009022:	4b1d      	ldr	r3, [pc, #116]	; (8009098 <ADCinit+0x2a0>)
 8009024:	8b1b      	ldrh	r3, [r3, #24]
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <ADCinit+0x2a0>)
 800902a:	8b5b      	ldrh	r3, [r3, #26]
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	4b1a      	ldr	r3, [pc, #104]	; (8009098 <ADCinit+0x2a0>)
 8009030:	8b9b      	ldrh	r3, [r3, #28]
 8009032:	607b      	str	r3, [r7, #4]
 8009034:	4b18      	ldr	r3, [pc, #96]	; (8009098 <ADCinit+0x2a0>)
 8009036:	8bdb      	ldrh	r3, [r3, #30]
 8009038:	9309      	str	r3, [sp, #36]	; 0x24
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	9308      	str	r3, [sp, #32]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	9307      	str	r3, [sp, #28]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	9306      	str	r3, [sp, #24]
 8009046:	9605      	str	r6, [sp, #20]
 8009048:	9504      	str	r5, [sp, #16]
 800904a:	9403      	str	r4, [sp, #12]
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	9101      	str	r1, [sp, #4]
 8009050:	9200      	str	r2, [sp, #0]
 8009052:	4643      	mov	r3, r8
 8009054:	4672      	mov	r2, lr
 8009056:	4661      	mov	r1, ip
 8009058:	4810      	ldr	r0, [pc, #64]	; (800909c <ADCinit+0x2a4>)
 800905a:	f009 f8c1 	bl	80121e0 <iprintf>
	Flash_store();
 800905e:	f000 fe33 	bl	8009cc8 <Flash_store>
	LED(5);
 8009062:	2005      	movs	r0, #5
 8009064:	f000 fec0 	bl	8009de8 <LED>

	HAL_Delay(3000);
 8009068:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800906c:	f003 f934 	bl	800c2d8 <HAL_Delay>
}
 8009070:	bf00      	nop
 8009072:	3734      	adds	r7, #52	; 0x34
 8009074:	46bd      	mov	sp, r7
 8009076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800907a:	bf00      	nop
 800907c:	20000468 	.word	0x20000468
 8009080:	2000044c 	.word	0x2000044c
 8009084:	08015a28 	.word	0x08015a28
 8009088:	40020800 	.word	0x40020800
 800908c:	08015a30 	.word	0x08015a30
 8009090:	08015a60 	.word	0x08015a60
 8009094:	2000853c 	.word	0x2000853c
 8009098:	200004e0 	.word	0x200004e0
 800909c:	08015a90 	.word	0x08015a90

080090a0 <sensGet>:

void sensGet(){
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
	sensL = 0;
 80090a6:	4b77      	ldr	r3, [pc, #476]	; (8009284 <sensGet+0x1e4>)
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
	sensR = 0;
 80090ae:	4b76      	ldr	r3, [pc, #472]	; (8009288 <sensGet+0x1e8>)
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
	uint16_t er =0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	80fb      	strh	r3, [r7, #6]
	static uint16_t i=0,k=0;

	static uint16_t j;
	for(i=0; i<13; i++){
 80090ba:	4b74      	ldr	r3, [pc, #464]	; (800928c <sensGet+0x1ec>)
 80090bc:	2200      	movs	r2, #0
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	e011      	b.n	80090e6 <sensGet+0x46>
		sens[i] = analog[i];
 80090c2:	4b72      	ldr	r3, [pc, #456]	; (800928c <sensGet+0x1ec>)
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	4b70      	ldr	r3, [pc, #448]	; (800928c <sensGet+0x1ec>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	4b70      	ldr	r3, [pc, #448]	; (8009290 <sensGet+0x1f0>)
 80090d0:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80090d4:	4b6f      	ldr	r3, [pc, #444]	; (8009294 <sensGet+0x1f4>)
 80090d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0; i<13; i++){
 80090da:	4b6c      	ldr	r3, [pc, #432]	; (800928c <sensGet+0x1ec>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	3301      	adds	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	4b6a      	ldr	r3, [pc, #424]	; (800928c <sensGet+0x1ec>)
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	4b69      	ldr	r3, [pc, #420]	; (800928c <sensGet+0x1ec>)
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	2b0c      	cmp	r3, #12
 80090ec:	d9e9      	bls.n	80090c2 <sensGet+0x22>
	}
	for(i=0; i<13; i++){
 80090ee:	4b67      	ldr	r3, [pc, #412]	; (800928c <sensGet+0x1ec>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	801a      	strh	r2, [r3, #0]
 80090f4:	e032      	b.n	800915c <sensGet+0xbc>
		sensRatio[i] = (1000.0f/(float)di[i])*((float)(sens[i]-b[i]));
 80090f6:	4b65      	ldr	r3, [pc, #404]	; (800928c <sensGet+0x1ec>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	4b66      	ldr	r3, [pc, #408]	; (8009298 <sensGet+0x1f8>)
 80090fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	eddf 6a64 	vldr	s13, [pc, #400]	; 800929c <sensGet+0x1fc>
 800910e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009112:	4b5e      	ldr	r3, [pc, #376]	; (800928c <sensGet+0x1ec>)
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	4b5e      	ldr	r3, [pc, #376]	; (8009294 <sensGet+0x1f4>)
 800911a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800911e:	461a      	mov	r2, r3
 8009120:	4b5a      	ldr	r3, [pc, #360]	; (800928c <sensGet+0x1ec>)
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	4b5e      	ldr	r3, [pc, #376]	; (80092a0 <sensGet+0x200>)
 8009128:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	4b54      	ldr	r3, [pc, #336]	; (800928c <sensGet+0x1ec>)
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009144:	ee17 3a90 	vmov	r3, s15
 8009148:	b299      	uxth	r1, r3
 800914a:	4b56      	ldr	r3, [pc, #344]	; (80092a4 <sensGet+0x204>)
 800914c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i=0; i<13; i++){
 8009150:	4b4e      	ldr	r3, [pc, #312]	; (800928c <sensGet+0x1ec>)
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	3301      	adds	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	4b4c      	ldr	r3, [pc, #304]	; (800928c <sensGet+0x1ec>)
 800915a:	801a      	strh	r2, [r3, #0]
 800915c:	4b4b      	ldr	r3, [pc, #300]	; (800928c <sensGet+0x1ec>)
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	2b0c      	cmp	r3, #12
 8009162:	d9c8      	bls.n	80090f6 <sensGet+0x56>
	}
	for(i=2;i<6;i++){
 8009164:	4b49      	ldr	r3, [pc, #292]	; (800928c <sensGet+0x1ec>)
 8009166:	2202      	movs	r2, #2
 8009168:	801a      	strh	r2, [r3, #0]
 800916a:	e017      	b.n	800919c <sensGet+0xfc>
		sensL += sensRatio[i];
 800916c:	4b47      	ldr	r3, [pc, #284]	; (800928c <sensGet+0x1ec>)
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	4b4c      	ldr	r3, [pc, #304]	; (80092a4 <sensGet+0x204>)
 8009174:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009178:	ee07 3a90 	vmov	s15, r3
 800917c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009180:	4b40      	ldr	r3, [pc, #256]	; (8009284 <sensGet+0x1e4>)
 8009182:	edd3 7a00 	vldr	s15, [r3]
 8009186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800918a:	4b3e      	ldr	r3, [pc, #248]	; (8009284 <sensGet+0x1e4>)
 800918c:	edc3 7a00 	vstr	s15, [r3]
	for(i=2;i<6;i++){
 8009190:	4b3e      	ldr	r3, [pc, #248]	; (800928c <sensGet+0x1ec>)
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	4b3c      	ldr	r3, [pc, #240]	; (800928c <sensGet+0x1ec>)
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	4b3b      	ldr	r3, [pc, #236]	; (800928c <sensGet+0x1ec>)
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	2b05      	cmp	r3, #5
 80091a2:	d9e3      	bls.n	800916c <sensGet+0xcc>
	}
	for(i=7;i<11;i++){
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <sensGet+0x1ec>)
 80091a6:	2207      	movs	r2, #7
 80091a8:	801a      	strh	r2, [r3, #0]
 80091aa:	e017      	b.n	80091dc <sensGet+0x13c>
		sensR += sensRatio[i];
 80091ac:	4b37      	ldr	r3, [pc, #220]	; (800928c <sensGet+0x1ec>)
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	4b3c      	ldr	r3, [pc, #240]	; (80092a4 <sensGet+0x204>)
 80091b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091c0:	4b31      	ldr	r3, [pc, #196]	; (8009288 <sensGet+0x1e8>)
 80091c2:	edd3 7a00 	vldr	s15, [r3]
 80091c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091ca:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <sensGet+0x1e8>)
 80091cc:	edc3 7a00 	vstr	s15, [r3]
	for(i=7;i<11;i++){
 80091d0:	4b2e      	ldr	r3, [pc, #184]	; (800928c <sensGet+0x1ec>)
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	3301      	adds	r3, #1
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	4b2c      	ldr	r3, [pc, #176]	; (800928c <sensGet+0x1ec>)
 80091da:	801a      	strh	r2, [r3, #0]
 80091dc:	4b2b      	ldr	r3, [pc, #172]	; (800928c <sensGet+0x1ec>)
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	2b0a      	cmp	r3, #10
 80091e2:	d9e3      	bls.n	80091ac <sensGet+0x10c>
	}
	if(sensRatio[7]<800)j =0;
 80091e4:	4b2f      	ldr	r3, [pc, #188]	; (80092a4 <sensGet+0x204>)
 80091e6:	89db      	ldrh	r3, [r3, #14]
 80091e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80091ec:	d202      	bcs.n	80091f4 <sensGet+0x154>
 80091ee:	4b2e      	ldr	r3, [pc, #184]	; (80092a8 <sensGet+0x208>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	801a      	strh	r2, [r3, #0]
	if(sensRatio[1]<500)count =0;
 80091f4:	4b2b      	ldr	r3, [pc, #172]	; (80092a4 <sensGet+0x204>)
 80091f6:	885b      	ldrh	r3, [r3, #2]
 80091f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80091fc:	d202      	bcs.n	8009204 <sensGet+0x164>
 80091fe:	4b2b      	ldr	r3, [pc, #172]	; (80092ac <sensGet+0x20c>)
 8009200:	2200      	movs	r2, #0
 8009202:	601a      	str	r2, [r3, #0]

			er = sensR+sensL;
 8009204:	4b20      	ldr	r3, [pc, #128]	; (8009288 <sensGet+0x1e8>)
 8009206:	ed93 7a00 	vldr	s14, [r3]
 800920a:	4b1e      	ldr	r3, [pc, #120]	; (8009284 <sensGet+0x1e4>)
 800920c:	edd3 7a00 	vldr	s15, [r3]
 8009210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009218:	ee17 3a90 	vmov	r3, s15
 800921c:	80fb      	strh	r3, [r7, #6]
	if(er > 800) j++;
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009224:	d905      	bls.n	8009232 <sensGet+0x192>
 8009226:	4b20      	ldr	r3, [pc, #128]	; (80092a8 <sensGet+0x208>)
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	3301      	adds	r3, #1
 800922c:	b29a      	uxth	r2, r3
 800922e:	4b1e      	ldr	r3, [pc, #120]	; (80092a8 <sensGet+0x208>)
 8009230:	801a      	strh	r2, [r3, #0]
	if(er > 800 && j>=100 ) error();
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009238:	d905      	bls.n	8009246 <sensGet+0x1a6>
 800923a:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <sensGet+0x208>)
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	2b63      	cmp	r3, #99	; 0x63
 8009240:	d901      	bls.n	8009246 <sensGet+0x1a6>
 8009242:	f000 fe8d 	bl	8009f60 <error>
	cros=0;
 8009246:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <sensGet+0x210>)
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]

	if(er<1200 && k>=3) {
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8009252:	d209      	bcs.n	8009268 <sensGet+0x1c8>
 8009254:	4b17      	ldr	r3, [pc, #92]	; (80092b4 <sensGet+0x214>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d905      	bls.n	8009268 <sensGet+0x1c8>
		cros=1;
 800925c:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <sensGet+0x210>)
 800925e:	2201      	movs	r2, #1
 8009260:	701a      	strb	r2, [r3, #0]
		k=0;
 8009262:	4b14      	ldr	r3, [pc, #80]	; (80092b4 <sensGet+0x214>)
 8009264:	2200      	movs	r2, #0
 8009266:	801a      	strh	r2, [r3, #0]
	}
	if(er > 1200)k++;
 8009268:	88fb      	ldrh	r3, [r7, #6]
 800926a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800926e:	d905      	bls.n	800927c <sensGet+0x1dc>
 8009270:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <sensGet+0x214>)
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <sensGet+0x214>)
 800927a:	801a      	strh	r2, [r3, #0]

}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000488 	.word	0x20000488
 8009288:	20008574 	.word	0x20008574
 800928c:	20000204 	.word	0x20000204
 8009290:	2000044c 	.word	0x2000044c
 8009294:	20008578 	.word	0x20008578
 8009298:	2000853c 	.word	0x2000853c
 800929c:	447a0000 	.word	0x447a0000
 80092a0:	20000468 	.word	0x20000468
 80092a4:	20008558 	.word	0x20008558
 80092a8:	20000206 	.word	0x20000206
 80092ac:	20000004 	.word	0x20000004
 80092b0:	20000238 	.word	0x20000238
 80092b4:	20000208 	.word	0x20000208

080092b8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af02      	add	r7, sp, #8
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 80092c2:	2300      	movs	r3, #0
 80092c4:	733b      	strb	r3, [r7, #12]
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 80092ca:	f107 020c 	add.w	r2, r7, #12
 80092ce:	2364      	movs	r3, #100	; 0x64
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	2302      	movs	r3, #2
 80092d4:	217c      	movs	r1, #124	; 0x7c
 80092d6:	4803      	ldr	r0, [pc, #12]	; (80092e4 <lcd_cmd+0x2c>)
 80092d8:	f004 fe86 	bl	800dfe8 <HAL_I2C_Master_Transmit>
}
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	2000048c 	.word	0x2000048c

080092e8 <lcd_data>:

void lcd_data(uint8_t data) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	4603      	mov	r3, r0
 80092f0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 80092f2:	2340      	movs	r3, #64	; 0x40
 80092f4:	733b      	strb	r3, [r7, #12]
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 80092fa:	f107 020c 	add.w	r2, r7, #12
 80092fe:	2364      	movs	r3, #100	; 0x64
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2302      	movs	r3, #2
 8009304:	217c      	movs	r1, #124	; 0x7c
 8009306:	4803      	ldr	r0, [pc, #12]	; (8009314 <lcd_data+0x2c>)
 8009308:	f004 fe6e 	bl	800dfe8 <HAL_I2C_Master_Transmit>
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	2000048c 	.word	0x2000048c

08009318 <lcd_init>:

void lcd_init(){
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800931c:	2201      	movs	r2, #1
 800931e:	2110      	movs	r1, #16
 8009320:	481e      	ldr	r0, [pc, #120]	; (800939c <lcd_init+0x84>)
 8009322:	f004 fd0f 	bl	800dd44 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8009326:	2028      	movs	r0, #40	; 0x28
 8009328:	f002 ffd6 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x38);
 800932c:	2038      	movs	r0, #56	; 0x38
 800932e:	f7ff ffc3 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 8009332:	2001      	movs	r0, #1
 8009334:	f002 ffd0 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x39);
 8009338:	2039      	movs	r0, #57	; 0x39
 800933a:	f7ff ffbd 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 800933e:	2001      	movs	r0, #1
 8009340:	f002 ffca 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x14);
 8009344:	2014      	movs	r0, #20
 8009346:	f7ff ffb7 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 800934a:	2001      	movs	r0, #1
 800934c:	f002 ffc4 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x70);
 8009350:	2070      	movs	r0, #112	; 0x70
 8009352:	f7ff ffb1 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 8009356:	2001      	movs	r0, #1
 8009358:	f002 ffbe 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x56);
 800935c:	2056      	movs	r0, #86	; 0x56
 800935e:	f7ff ffab 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 8009362:	2001      	movs	r0, #1
 8009364:	f002 ffb8 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x6C);
 8009368:	206c      	movs	r0, #108	; 0x6c
 800936a:	f7ff ffa5 	bl	80092b8 <lcd_cmd>
	HAL_Delay(200);
 800936e:	20c8      	movs	r0, #200	; 0xc8
 8009370:	f002 ffb2 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x38);
 8009374:	2038      	movs	r0, #56	; 0x38
 8009376:	f7ff ff9f 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 800937a:	2001      	movs	r0, #1
 800937c:	f002 ffac 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x0C);
 8009380:	200c      	movs	r0, #12
 8009382:	f7ff ff99 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 8009386:	2001      	movs	r0, #1
 8009388:	f002 ffa6 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x01);
 800938c:	2001      	movs	r0, #1
 800938e:	f7ff ff93 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 8009392:	2001      	movs	r0, #1
 8009394:	f002 ffa0 	bl	800c2d8 <HAL_Delay>
}
 8009398:	bf00      	nop
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40020000 	.word	0x40020000

080093a0 <lcd_clear>:

void lcd_clear(){
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80093a4:	2001      	movs	r0, #1
 80093a6:	f7ff ff87 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 80093aa:	2001      	movs	r0, #1
 80093ac:	f002 ff94 	bl	800c2d8 <HAL_Delay>
	lcd_cmd(0x02);
 80093b0:	2002      	movs	r0, #2
 80093b2:	f7ff ff81 	bl	80092b8 <lcd_cmd>
	HAL_Delay(1);
 80093b6:	2001      	movs	r0, #1
 80093b8:	f002 ff8e 	bl	800c2d8 <HAL_Delay>
}
 80093bc:	bf00      	nop
 80093be:	bd80      	pop	{r7, pc}

080093c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	3302      	adds	r3, #2
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	019b      	lsls	r3, r3, #6
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4413      	add	r3, r2
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ff6b 	bl	80092b8 <lcd_cmd>
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <lcd_print>:

void lcd_print(const char *str) {
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80093f2:	e007      	b.n	8009404 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff ff75 	bl	80092e8 <lcd_data>
			str++;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3301      	adds	r3, #1
 8009402:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1f3      	bne.n	80093f4 <lcd_print+0xa>
	}
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8009414:	b40f      	push	{r0, r1, r2, r3}
 8009416:	b580      	push	{r7, lr}
 8009418:	b088      	sub	sp, #32
 800941a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800941c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009420:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8009422:	1d3b      	adds	r3, r7, #4
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009428:	4618      	mov	r0, r3
 800942a:	f009 fe41 	bl	80130b0 <vsiprintf>
 800942e:	4603      	mov	r3, r0
 8009430:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8009432:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009436:	2b00      	cmp	r3, #0
 8009438:	dd03      	ble.n	8009442 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800943a:	1d3b      	adds	r3, r7, #4
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff ffd4 	bl	80093ea <lcd_print>
	}

	return ret;
 8009442:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3720      	adds	r7, #32
 800944a:	46bd      	mov	sp, r7
 800944c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009450:	b004      	add	sp, #16
 8009452:	4770      	bx	lr

08009454 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009464:	b2db      	uxtb	r3, r3
 8009466:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8009468:	2200      	movs	r2, #0
 800946a:	2104      	movs	r1, #4
 800946c:	480d      	ldr	r0, [pc, #52]	; (80094a4 <read_byte+0x50>)
 800946e:	f004 fc69 	bl	800dd44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8009472:	f107 010f 	add.w	r1, r7, #15
 8009476:	2364      	movs	r3, #100	; 0x64
 8009478:	2201      	movs	r2, #1
 800947a:	480b      	ldr	r0, [pc, #44]	; (80094a8 <read_byte+0x54>)
 800947c:	f005 fd5c 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8009480:	f107 010e 	add.w	r1, r7, #14
 8009484:	2364      	movs	r3, #100	; 0x64
 8009486:	2201      	movs	r2, #1
 8009488:	4807      	ldr	r0, [pc, #28]	; (80094a8 <read_byte+0x54>)
 800948a:	f005 fe89 	bl	800f1a0 <HAL_SPI_Receive>
	CS_SET;
 800948e:	2201      	movs	r2, #1
 8009490:	2104      	movs	r1, #4
 8009492:	4804      	ldr	r0, [pc, #16]	; (80094a4 <read_byte+0x50>)
 8009494:	f004 fc56 	bl	800dd44 <HAL_GPIO_WritePin>

	return val;
 8009498:	7bbb      	ldrb	r3, [r7, #14]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40020c00 	.word	0x40020c00
 80094a8:	200084e0 	.word	0x200084e0

080094ac <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	460a      	mov	r2, r1
 80094b6:	71fb      	strb	r3, [r7, #7]
 80094b8:	4613      	mov	r3, r2
 80094ba:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80094c6:	2200      	movs	r2, #0
 80094c8:	2104      	movs	r1, #4
 80094ca:	480c      	ldr	r0, [pc, #48]	; (80094fc <write_byte+0x50>)
 80094cc:	f004 fc3a 	bl	800dd44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 80094d0:	f107 010f 	add.w	r1, r7, #15
 80094d4:	2364      	movs	r3, #100	; 0x64
 80094d6:	2201      	movs	r2, #1
 80094d8:	4809      	ldr	r0, [pc, #36]	; (8009500 <write_byte+0x54>)
 80094da:	f005 fd2d 	bl	800ef38 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 80094de:	1db9      	adds	r1, r7, #6
 80094e0:	2364      	movs	r3, #100	; 0x64
 80094e2:	2201      	movs	r2, #1
 80094e4:	4806      	ldr	r0, [pc, #24]	; (8009500 <write_byte+0x54>)
 80094e6:	f005 fd27 	bl	800ef38 <HAL_SPI_Transmit>
	CS_SET;
 80094ea:	2201      	movs	r2, #1
 80094ec:	2104      	movs	r1, #4
 80094ee:	4803      	ldr	r0, [pc, #12]	; (80094fc <write_byte+0x50>)
 80094f0:	f004 fc28 	bl	800dd44 <HAL_GPIO_WritePin>
}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40020c00 	.word	0x40020c00
 8009500:	200084e0 	.word	0x200084e0

08009504 <IMU_init>:

uint8_t IMU_init() {
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800950a:	2000      	movs	r0, #0
 800950c:	f7ff ffa2 	bl	8009454 <read_byte>
 8009510:	4603      	mov	r3, r0
 8009512:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8009514:	79bb      	ldrb	r3, [r7, #6]
 8009516:	2be0      	cmp	r3, #224	; 0xe0
 8009518:	d119      	bne.n	800954e <IMU_init+0x4a>
		ret = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800951e:	2101      	movs	r1, #1
 8009520:	2006      	movs	r0, #6
 8009522:	f7ff ffc3 	bl	80094ac <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8009526:	2110      	movs	r1, #16
 8009528:	2003      	movs	r0, #3
 800952a:	f7ff ffbf 	bl	80094ac <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800952e:	2120      	movs	r1, #32
 8009530:	207f      	movs	r0, #127	; 0x7f
 8009532:	f7ff ffbb 	bl	80094ac <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8009536:	2117      	movs	r1, #23
 8009538:	2001      	movs	r0, #1
 800953a:	f7ff ffb7 	bl	80094ac <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 800953e:	2106      	movs	r1, #6
 8009540:	2014      	movs	r0, #20
 8009542:	f7ff ffb3 	bl	80094ac <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8009546:	2100      	movs	r1, #0
 8009548:	207f      	movs	r0, #127	; 0x7f
 800954a:	f7ff ffaf 	bl	80094ac <write_byte>
	}
	return ret;
 800954e:	79fb      	ldrb	r3, [r7, #7]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <read_gyro_data>:

void read_zg_data() {
	zg = ((int16_t)read_byte(0x37) << 8) | ((int16_t)read_byte(0x38));
}

void read_gyro_data() {
 8009558:	b598      	push	{r3, r4, r7, lr}
 800955a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800955c:	2033      	movs	r0, #51	; 0x33
 800955e:	f7ff ff79 	bl	8009454 <read_byte>
 8009562:	4603      	mov	r3, r0
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	b21c      	sxth	r4, r3
 8009568:	2034      	movs	r0, #52	; 0x34
 800956a:	f7ff ff73 	bl	8009454 <read_byte>
 800956e:	4603      	mov	r3, r0
 8009570:	b21b      	sxth	r3, r3
 8009572:	4323      	orrs	r3, r4
 8009574:	b21a      	sxth	r2, r3
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <read_gyro_data+0x64>)
 8009578:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800957a:	2035      	movs	r0, #53	; 0x35
 800957c:	f7ff ff6a 	bl	8009454 <read_byte>
 8009580:	4603      	mov	r3, r0
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	b21c      	sxth	r4, r3
 8009586:	2036      	movs	r0, #54	; 0x36
 8009588:	f7ff ff64 	bl	8009454 <read_byte>
 800958c:	4603      	mov	r3, r0
 800958e:	b21b      	sxth	r3, r3
 8009590:	4323      	orrs	r3, r4
 8009592:	b21a      	sxth	r2, r3
 8009594:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <read_gyro_data+0x68>)
 8009596:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8009598:	2037      	movs	r0, #55	; 0x37
 800959a:	f7ff ff5b 	bl	8009454 <read_byte>
 800959e:	4603      	mov	r3, r0
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	b21c      	sxth	r4, r3
 80095a4:	2038      	movs	r0, #56	; 0x38
 80095a6:	f7ff ff55 	bl	8009454 <read_byte>
 80095aa:	4603      	mov	r3, r0
 80095ac:	b21b      	sxth	r3, r3
 80095ae:	4323      	orrs	r3, r4
 80095b0:	b21a      	sxth	r2, r3
 80095b2:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <read_gyro_data+0x6c>)
 80095b4:	801a      	strh	r2, [r3, #0]
}
 80095b6:	bf00      	nop
 80095b8:	bd98      	pop	{r3, r4, r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000448 	.word	0x20000448
 80095c0:	20000446 	.word	0x20000446
 80095c4:	20000440 	.word	0x20000440

080095c8 <off_angle>:
extern  uint16_t work_ram[BACKUP_FLASH_SECTOR_SIZE] __attribute__ ((aligned(4)));
 char _backup_flash_start;

extern float ang_average ;
 float ang;
void off_angle(){
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
	float average;
	int i;
	Flash_load();
 80095ce:	f000 fb5b 	bl	8009c88 <Flash_load>
	IMU_init();
 80095d2:	f7ff ff97 	bl	8009504 <IMU_init>
	HAL_Delay(1500);
 80095d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80095da:	f002 fe7d 	bl	800c2d8 <HAL_Delay>

	for(i=0;i<=1000;i++){
 80095de:	2300      	movs	r3, #0
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	e014      	b.n	800960e <off_angle+0x46>
		read_gyro_data();
 80095e4:	f7ff ffb8 	bl	8009558 <read_gyro_data>
		average = average+zg;
 80095e8:	4b33      	ldr	r3, [pc, #204]	; (80096b8 <off_angle+0xf0>)
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b21b      	sxth	r3, r3
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80095fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095fe:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 8009602:	2001      	movs	r0, #1
 8009604:	f002 fe68 	bl	800c2d8 <HAL_Delay>
	for(i=0;i<=1000;i++){
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009614:	dde6      	ble.n	80095e4 <off_angle+0x1c>
	}
	LED(4);
 8009616:	2004      	movs	r0, #4
 8009618:	f000 fbe6 	bl	8009de8 <LED>
	if(average<=0) average = -average*10;
 800961c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009628:	d809      	bhi.n	800963e <off_angle+0x76>
 800962a:	edd7 7a01 	vldr	s15, [r7, #4]
 800962e:	eef1 7a67 	vneg.f32	s15, s15
 8009632:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800963a:	edc7 7a01 	vstr	s15, [r7, #4]
	work_ram[31]= average;
 800963e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009646:	ee17 3a90 	vmov	r3, s15
 800964a:	b29a      	uxth	r2, r3
 800964c:	4b1b      	ldr	r3, [pc, #108]	; (80096bc <off_angle+0xf4>)
 800964e:	87da      	strh	r2, [r3, #62]	; 0x3e
	if(average>=50) average=-average/10;
 8009650:	edd7 7a01 	vldr	s15, [r7, #4]
 8009654:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80096c0 <off_angle+0xf8>
 8009658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800965c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009660:	db09      	blt.n	8009676 <off_angle+0xae>
 8009662:	edd7 7a01 	vldr	s15, [r7, #4]
 8009666:	eeb1 7a67 	vneg.f32	s14, s15
 800966a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800966e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009672:	edc7 7a01 	vstr	s15, [r7, #4]
	ang_average = average/1000;
 8009676:	ed97 7a01 	vldr	s14, [r7, #4]
 800967a:	eddf 6a12 	vldr	s13, [pc, #72]	; 80096c4 <off_angle+0xfc>
 800967e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <off_angle+0x100>)
 8009684:	edc3 7a00 	vstr	s15, [r3]

	printf("%f\r\n",ang_average);
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <off_angle+0x100>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fe93 	bl	80083b8 <__aeabi_f2d>
 8009692:	4603      	mov	r3, r0
 8009694:	460c      	mov	r4, r1
 8009696:	461a      	mov	r2, r3
 8009698:	4623      	mov	r3, r4
 800969a:	480c      	ldr	r0, [pc, #48]	; (80096cc <off_angle+0x104>)
 800969c:	f008 fda0 	bl	80121e0 <iprintf>
	printf("%d\r\n",work_ram[31]);
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <off_angle+0xf4>)
 80096a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a4:	4619      	mov	r1, r3
 80096a6:	480a      	ldr	r0, [pc, #40]	; (80096d0 <off_angle+0x108>)
 80096a8:	f008 fd9a 	bl	80121e0 <iprintf>
	Flash_store();
 80096ac:	f000 fb0c 	bl	8009cc8 <Flash_store>
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd90      	pop	{r4, r7, pc}
 80096b8:	20000440 	.word	0x20000440
 80096bc:	200004e0 	.word	0x200004e0
 80096c0:	42480000 	.word	0x42480000
 80096c4:	447a0000 	.word	0x447a0000
 80096c8:	20000240 	.word	0x20000240
 80096cc:	08015ac0 	.word	0x08015ac0
 80096d0:	08015ac8 	.word	0x08015ac8
 80096d4:	00000000 	.word	0x00000000

080096d8 <calc_angle>:
float calc_angle(){
 80096d8:	b590      	push	{r4, r7, lr}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
	float omega_z=0;
 80096de:	f04f 0300 	mov.w	r3, #0
 80096e2:	607b      	str	r3, [r7, #4]
	//float angle;
	read_gyro_data();
 80096e4:	f7ff ff38 	bl	8009558 <read_gyro_data>
	omega_z = (((float)zg-ang_average) / 16.4) * PI / 180;
 80096e8:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <calc_angle+0x90>)
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096f6:	4b1d      	ldr	r3, [pc, #116]	; (800976c <calc_angle+0x94>)
 80096f8:	edd3 7a00 	vldr	s15, [r3]
 80096fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009700:	ee17 0a90 	vmov	r0, s15
 8009704:	f7fe fe58 	bl	80083b8 <__aeabi_f2d>
 8009708:	a313      	add	r3, pc, #76	; (adr r3, 8009758 <calc_angle+0x80>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7fe ffd5 	bl	80086bc <__aeabi_ddiv>
 8009712:	4603      	mov	r3, r0
 8009714:	460c      	mov	r4, r1
 8009716:	4618      	mov	r0, r3
 8009718:	4621      	mov	r1, r4
 800971a:	a311      	add	r3, pc, #68	; (adr r3, 8009760 <calc_angle+0x88>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7fe fea2 	bl	8008468 <__aeabi_dmul>
 8009724:	4603      	mov	r3, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4618      	mov	r0, r3
 800972a:	4621      	mov	r1, r4
 800972c:	f04f 0200 	mov.w	r2, #0
 8009730:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <calc_angle+0x98>)
 8009732:	f7fe ffc3 	bl	80086bc <__aeabi_ddiv>
 8009736:	4603      	mov	r3, r0
 8009738:	460c      	mov	r4, r1
 800973a:	4618      	mov	r0, r3
 800973c:	4621      	mov	r1, r4
 800973e:	f7ff f98b 	bl	8008a58 <__aeabi_d2f>
 8009742:	4603      	mov	r3, r0
 8009744:	607b      	str	r3, [r7, #4]
	//angle = angle+ (omega_z * 0.01);

	return omega_z;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	ee07 3a90 	vmov	s15, r3
}
 800974c:	eeb0 0a67 	vmov.f32	s0, s15
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}
 8009756:	bf00      	nop
 8009758:	66666666 	.word	0x66666666
 800975c:	40306666 	.word	0x40306666
 8009760:	fc8b007a 	.word	0xfc8b007a
 8009764:	400921fa 	.word	0x400921fa
 8009768:	20000440 	.word	0x20000440
 800976c:	20000240 	.word	0x20000240
 8009770:	40668000 	.word	0x40668000
 8009774:	00000000 	.word	0x00000000

08009778 <MotorCtrl>:
extern float sensL, sensR;
extern float speedval_I ;
extern float load_log;


int MotorCtrl(){
 8009778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
	static float sensvalBuf;
	static float sensval_I = 0,sensval_IBuf ;
	float sensval_D =0;
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	607b      	str	r3, [r7, #4]
	int16_t sensval;//偏差


	sensval = sensL - sensR;//hensa
 8009784:	4b5c      	ldr	r3, [pc, #368]	; (80098f8 <MotorCtrl+0x180>)
 8009786:	ed93 7a00 	vldr	s14, [r3]
 800978a:	4b5c      	ldr	r3, [pc, #368]	; (80098fc <MotorCtrl+0x184>)
 800978c:	edd3 7a00 	vldr	s15, [r3]
 8009790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009798:	ee17 3a90 	vmov	r3, s15
 800979c:	807b      	strh	r3, [r7, #2]

    sensval_I = sensval_I + (float)sensval*T;
 800979e:	4b58      	ldr	r3, [pc, #352]	; (8009900 <MotorCtrl+0x188>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fe08 	bl	80083b8 <__aeabi_f2d>
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097b8:	ee17 0a90 	vmov	r0, s15
 80097bc:	f7fe fdfc 	bl	80083b8 <__aeabi_f2d>
 80097c0:	a34b      	add	r3, pc, #300	; (adr r3, 80098f0 <MotorCtrl+0x178>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7fe fe4f 	bl	8008468 <__aeabi_dmul>
 80097ca:	4602      	mov	r2, r0
 80097cc:	460b      	mov	r3, r1
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7fe fc93 	bl	80080fc <__adddf3>
 80097d6:	4603      	mov	r3, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	4618      	mov	r0, r3
 80097dc:	4621      	mov	r1, r4
 80097de:	f7ff f93b 	bl	8008a58 <__aeabi_d2f>
 80097e2:	4602      	mov	r2, r0
 80097e4:	4b46      	ldr	r3, [pc, #280]	; (8009900 <MotorCtrl+0x188>)
 80097e6:	601a      	str	r2, [r3, #0]
   // sensval_IBuf = sensval_IBuf + sensval;

    if(sensval_I >= 100000000) sensval_I = 100000000;
 80097e8:	4b45      	ldr	r3, [pc, #276]	; (8009900 <MotorCtrl+0x188>)
 80097ea:	edd3 7a00 	vldr	s15, [r3]
 80097ee:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8009904 <MotorCtrl+0x18c>
 80097f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097fa:	db02      	blt.n	8009802 <MotorCtrl+0x8a>
 80097fc:	4b40      	ldr	r3, [pc, #256]	; (8009900 <MotorCtrl+0x188>)
 80097fe:	4a42      	ldr	r2, [pc, #264]	; (8009908 <MotorCtrl+0x190>)
 8009800:	601a      	str	r2, [r3, #0]
    if(sensval_I <= (-100000000)) sensval_I = (-100000000);
 8009802:	4b3f      	ldr	r3, [pc, #252]	; (8009900 <MotorCtrl+0x188>)
 8009804:	edd3 7a00 	vldr	s15, [r3]
 8009808:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800990c <MotorCtrl+0x194>
 800980c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009814:	d802      	bhi.n	800981c <MotorCtrl+0xa4>
 8009816:	4b3a      	ldr	r3, [pc, #232]	; (8009900 <MotorCtrl+0x188>)
 8009818:	4a3d      	ldr	r2, [pc, #244]	; (8009910 <MotorCtrl+0x198>)
 800981a:	601a      	str	r2, [r3, #0]

    sensval_D = (sensvalBuf - sensval)/T;
 800981c:	4b3d      	ldr	r3, [pc, #244]	; (8009914 <MotorCtrl+0x19c>)
 800981e:	ed93 7a00 	vldr	s14, [r3]
 8009822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800982e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009832:	ee17 0a90 	vmov	r0, s15
 8009836:	f7fe fdbf 	bl	80083b8 <__aeabi_f2d>
 800983a:	a32d      	add	r3, pc, #180	; (adr r3, 80098f0 <MotorCtrl+0x178>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7fe ff3c 	bl	80086bc <__aeabi_ddiv>
 8009844:	4603      	mov	r3, r0
 8009846:	460c      	mov	r4, r1
 8009848:	4618      	mov	r0, r3
 800984a:	4621      	mov	r1, r4
 800984c:	f7ff f904 	bl	8008a58 <__aeabi_d2f>
 8009850:	4603      	mov	r3, r0
 8009852:	607b      	str	r3, [r7, #4]
    sensvalBuf = sensval;
 8009854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009860:	4b2c      	ldr	r3, [pc, #176]	; (8009914 <MotorCtrl+0x19c>)
 8009862:	edc3 7a00 	vstr	s15, [r3]

	return (((double)sensval* Kp)+((float)sensval_I*Ki)-(sensval_D*Kd));
 8009866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fd92 	bl	8008394 <__aeabi_i2d>
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <MotorCtrl+0x1a0>)
 8009872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009876:	461a      	mov	r2, r3
 8009878:	4623      	mov	r3, r4
 800987a:	f7fe fdf5 	bl	8008468 <__aeabi_dmul>
 800987e:	4603      	mov	r3, r0
 8009880:	460c      	mov	r4, r1
 8009882:	461d      	mov	r5, r3
 8009884:	4626      	mov	r6, r4
 8009886:	4b1e      	ldr	r3, [pc, #120]	; (8009900 <MotorCtrl+0x188>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fd94 	bl	80083b8 <__aeabi_f2d>
 8009890:	4b22      	ldr	r3, [pc, #136]	; (800991c <MotorCtrl+0x1a4>)
 8009892:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009896:	461a      	mov	r2, r3
 8009898:	4623      	mov	r3, r4
 800989a:	f7fe fde5 	bl	8008468 <__aeabi_dmul>
 800989e:	4603      	mov	r3, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	461a      	mov	r2, r3
 80098a4:	4623      	mov	r3, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	4631      	mov	r1, r6
 80098aa:	f7fe fc27 	bl	80080fc <__adddf3>
 80098ae:	4603      	mov	r3, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	461d      	mov	r5, r3
 80098b4:	4626      	mov	r6, r4
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fe fd7e 	bl	80083b8 <__aeabi_f2d>
 80098bc:	4b18      	ldr	r3, [pc, #96]	; (8009920 <MotorCtrl+0x1a8>)
 80098be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098c2:	461a      	mov	r2, r3
 80098c4:	4623      	mov	r3, r4
 80098c6:	f7fe fdcf 	bl	8008468 <__aeabi_dmul>
 80098ca:	4603      	mov	r3, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	461a      	mov	r2, r3
 80098d0:	4623      	mov	r3, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	4631      	mov	r1, r6
 80098d6:	f7fe fc0f 	bl	80080f8 <__aeabi_dsub>
 80098da:	4603      	mov	r3, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	4618      	mov	r0, r3
 80098e0:	4621      	mov	r1, r4
 80098e2:	f7ff f871 	bl	80089c8 <__aeabi_d2iz>
 80098e6:	4603      	mov	r3, r0
	//LineMotorR = -(((double)sensval* Kp)+((float)sensval_I*Ki)-(sensval_D*Kd));

}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80098f4:	3f50624d 	.word	0x3f50624d
 80098f8:	20000488 	.word	0x20000488
 80098fc:	20008574 	.word	0x20008574
 8009900:	2000020c 	.word	0x2000020c
 8009904:	4cbebc20 	.word	0x4cbebc20
 8009908:	4cbebc20 	.word	0x4cbebc20
 800990c:	ccbebc20 	.word	0xccbebc20
 8009910:	ccbebc20 	.word	0xccbebc20
 8009914:	20000210 	.word	0x20000210
 8009918:	20000218 	.word	0x20000218
 800991c:	20000220 	.word	0x20000220
 8009920:	20000228 	.word	0x20000228
 8009924:	00000000 	.word	0x00000000

08009928 <SpeedCtrl>:
void SpeedCtrl(){
 8009928:	b5b0      	push	{r4, r5, r7, lr}
 800992a:	ed2d 8b02 	vpush	{d8}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
	int16_t MotorL=0,MotorR=0,sensmotor=0;
 8009932:	2300      	movs	r3, #0
 8009934:	82fb      	strh	r3, [r7, #22]
 8009936:	2300      	movs	r3, #0
 8009938:	82bb      	strh	r3, [r7, #20]
 800993a:	2300      	movs	r3, #0
 800993c:	827b      	strh	r3, [r7, #18]
	float speedval;
	//static float speedval_I ;
	float sKp = 1.6;//1.8
 800993e:	4b50      	ldr	r3, [pc, #320]	; (8009a80 <SpeedCtrl+0x158>)
 8009940:	60fb      	str	r3, [r7, #12]
	float sKi= 10;//10
 8009942:	4b50      	ldr	r3, [pc, #320]	; (8009a84 <SpeedCtrl+0x15c>)
 8009944:	60bb      	str	r3, [r7, #8]


	speedval = Speed  - speedget();
 8009946:	4b50      	ldr	r3, [pc, #320]	; (8009a88 <SpeedCtrl+0x160>)
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009952:	f000 f8a9 	bl	8009aa8 <speedget>
 8009956:	eef0 7a40 	vmov.f32	s15, s0
 800995a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800995e:	edc7 7a01 	vstr	s15, [r7, #4]
	speedval_I = speedval_I + speedval*T;
 8009962:	4b4a      	ldr	r3, [pc, #296]	; (8009a8c <SpeedCtrl+0x164>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fd26 	bl	80083b8 <__aeabi_f2d>
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7fe fd21 	bl	80083b8 <__aeabi_f2d>
 8009976:	a340      	add	r3, pc, #256	; (adr r3, 8009a78 <SpeedCtrl+0x150>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7fe fd74 	bl	8008468 <__aeabi_dmul>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7fe fbb8 	bl	80080fc <__adddf3>
 800998c:	4603      	mov	r3, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4618      	mov	r0, r3
 8009992:	4621      	mov	r1, r4
 8009994:	f7ff f860 	bl	8008a58 <__aeabi_d2f>
 8009998:	4602      	mov	r2, r0
 800999a:	4b3c      	ldr	r3, [pc, #240]	; (8009a8c <SpeedCtrl+0x164>)
 800999c:	601a      	str	r2, [r3, #0]


	if(speedval_I >= 100000) speedval_I = 100000;
 800999e:	4b3b      	ldr	r3, [pc, #236]	; (8009a8c <SpeedCtrl+0x164>)
 80099a0:	edd3 7a00 	vldr	s15, [r3]
 80099a4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8009a90 <SpeedCtrl+0x168>
 80099a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b0:	db02      	blt.n	80099b8 <SpeedCtrl+0x90>
 80099b2:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <SpeedCtrl+0x164>)
 80099b4:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <SpeedCtrl+0x16c>)
 80099b6:	601a      	str	r2, [r3, #0]
	if(speedval_I <= (-100000)) speedval_I = (-100000);
 80099b8:	4b34      	ldr	r3, [pc, #208]	; (8009a8c <SpeedCtrl+0x164>)
 80099ba:	edd3 7a00 	vldr	s15, [r3]
 80099be:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009a98 <SpeedCtrl+0x170>
 80099c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	d802      	bhi.n	80099d2 <SpeedCtrl+0xaa>
 80099cc:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <SpeedCtrl+0x164>)
 80099ce:	4a33      	ldr	r2, [pc, #204]	; (8009a9c <SpeedCtrl+0x174>)
 80099d0:	601a      	str	r2, [r3, #0]
	sensmotor  = MotorCtrl();
 80099d2:	f7ff fed1 	bl	8009778 <MotorCtrl>
 80099d6:	4603      	mov	r3, r0
 80099d8:	827b      	strh	r3, [r7, #18]
	MotorL = (speedval* sKp)+(speedval_I*sKi)+sensmotor;
 80099da:	ed97 7a01 	vldr	s14, [r7, #4]
 80099de:	edd7 7a03 	vldr	s15, [r7, #12]
 80099e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099e6:	4b29      	ldr	r3, [pc, #164]	; (8009a8c <SpeedCtrl+0x164>)
 80099e8:	edd3 6a00 	vldr	s13, [r3]
 80099ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80099f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099fc:	ee07 3a90 	vmov	s15, r3
 8009a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a0c:	ee17 3a90 	vmov	r3, s15
 8009a10:	82fb      	strh	r3, [r7, #22]
	MotorR = (speedval* sKp)+(speedval_I*sKi)-sensmotor;
 8009a12:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8009a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <SpeedCtrl+0x164>)
 8009a20:	edd3 6a00 	vldr	s13, [r3]
 8009a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a44:	ee17 3a90 	vmov	r3, s15
 8009a48:	82bb      	strh	r3, [r7, #20]


	Motor(MotorL,MotorR);
 8009a4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009a4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 faa3 	bl	8009fa0 <Motor>

	  TIM1 -> CNT = 32767;
 8009a5a:	4b11      	ldr	r3, [pc, #68]	; (8009aa0 <SpeedCtrl+0x178>)
 8009a5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24
	  TIM3 -> CNT = 32767;
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <SpeedCtrl+0x17c>)
 8009a64:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

}
 8009a6a:	bf00      	nop
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	ecbd 8b02 	vpop	{d8}
 8009a74:	bdb0      	pop	{r4, r5, r7, pc}
 8009a76:	bf00      	nop
 8009a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8009a7c:	3f50624d 	.word	0x3f50624d
 8009a80:	3fcccccd 	.word	0x3fcccccd
 8009a84:	41200000 	.word	0x41200000
 8009a88:	20000000 	.word	0x20000000
 8009a8c:	2000023c 	.word	0x2000023c
 8009a90:	47c35000 	.word	0x47c35000
 8009a94:	47c35000 	.word	0x47c35000
 8009a98:	c7c35000 	.word	0xc7c35000
 8009a9c:	c7c35000 	.word	0xc7c35000
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40000400 	.word	0x40000400

08009aa8 <speedget>:

float speedget()
{
 8009aa8:	b5b0      	push	{r4, r5, r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	static float speedbuffg=0;
	float speedget ;
	float val ;
	L = TIM1 -> CNT;
 8009aae:	4b46      	ldr	r3, [pc, #280]	; (8009bc8 <speedget+0x120>)
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4b45      	ldr	r3, [pc, #276]	; (8009bcc <speedget+0x124>)
 8009ab6:	601a      	str	r2, [r3, #0]
	R = TIM3 -> CNT;
 8009ab8:	4b45      	ldr	r3, [pc, #276]	; (8009bd0 <speedget+0x128>)
 8009aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b45      	ldr	r3, [pc, #276]	; (8009bd4 <speedget+0x12c>)
 8009ac0:	601a      	str	r2, [r3, #0]
	R = R -32767;
 8009ac2:	4b44      	ldr	r3, [pc, #272]	; (8009bd4 <speedget+0x12c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8009aca:	3b7f      	subs	r3, #127	; 0x7f
 8009acc:	4a41      	ldr	r2, [pc, #260]	; (8009bd4 <speedget+0x12c>)
 8009ace:	6013      	str	r3, [r2, #0]
	L = (65535 - L)-32768;
 8009ad0:	4b3e      	ldr	r3, [pc, #248]	; (8009bcc <speedget+0x124>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8009ad8:	337f      	adds	r3, #127	; 0x7f
 8009ada:	4a3c      	ldr	r2, [pc, #240]	; (8009bcc <speedget+0x124>)
 8009adc:	6013      	str	r3, [r2, #0]

	val=(L+R)/2;
 8009ade:	4b3b      	ldr	r3, [pc, #236]	; (8009bcc <speedget+0x124>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	4b3c      	ldr	r3, [pc, #240]	; (8009bd4 <speedget+0x12c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	0fda      	lsrs	r2, r3, #31
 8009aea:	4413      	add	r3, r2
 8009aec:	105b      	asrs	r3, r3, #1
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009af6:	edc7 7a01 	vstr	s15, [r7, #4]
	speedget = (((32.2/2048)*val)/T);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fe fc5c 	bl	80083b8 <__aeabi_f2d>
 8009b00:	a32d      	add	r3, pc, #180	; (adr r3, 8009bb8 <speedget+0x110>)
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7fe fcaf 	bl	8008468 <__aeabi_dmul>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	4618      	mov	r0, r3
 8009b10:	4621      	mov	r1, r4
 8009b12:	a32b      	add	r3, pc, #172	; (adr r3, 8009bc0 <speedget+0x118>)
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f7fe fdd0 	bl	80086bc <__aeabi_ddiv>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	4618      	mov	r0, r3
 8009b22:	4621      	mov	r1, r4
 8009b24:	f7fe ff98 	bl	8008a58 <__aeabi_d2f>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	603b      	str	r3, [r7, #0]

	speedbuffg += speedget*T;
 8009b2c:	4b2a      	ldr	r3, [pc, #168]	; (8009bd8 <speedget+0x130>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe fc41 	bl	80083b8 <__aeabi_f2d>
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	6838      	ldr	r0, [r7, #0]
 8009b3c:	f7fe fc3c 	bl	80083b8 <__aeabi_f2d>
 8009b40:	a31f      	add	r3, pc, #124	; (adr r3, 8009bc0 <speedget+0x118>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7fe fc8f 	bl	8008468 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7fe fad3 	bl	80080fc <__adddf3>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f7fe ff7b 	bl	8008a58 <__aeabi_d2f>
 8009b62:	4602      	mov	r2, r0
 8009b64:	4b1c      	ldr	r3, [pc, #112]	; (8009bd8 <speedget+0x130>)
 8009b66:	601a      	str	r2, [r3, #0]
	if(speedbuffg>=10){
 8009b68:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <speedget+0x130>)
 8009b6a:	edd3 7a00 	vldr	s15, [r3]
 8009b6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7a:	db0a      	blt.n	8009b92 <speedget+0xea>
		con=1;
 8009b7c:	4b17      	ldr	r3, [pc, #92]	; (8009bdc <speedget+0x134>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
		load_log = speedbuffg;
 8009b82:	4b15      	ldr	r3, [pc, #84]	; (8009bd8 <speedget+0x130>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a16      	ldr	r2, [pc, #88]	; (8009be0 <speedget+0x138>)
 8009b88:	6013      	str	r3, [r2, #0]
		speedbuffg=0;
 8009b8a:	4b13      	ldr	r3, [pc, #76]	; (8009bd8 <speedget+0x130>)
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
	}
	TIM1 -> CNT = 32767;
 8009b92:	4b0d      	ldr	r3, [pc, #52]	; (8009bc8 <speedget+0x120>)
 8009b94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 32767;
 8009b9a:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <speedget+0x128>)
 8009b9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009ba0:	625a      	str	r2, [r3, #36]	; 0x24
	return speedget;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	ee07 3a90 	vmov	s15, r3
}
 8009ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	9999999a 	.word	0x9999999a
 8009bbc:	3f901999 	.word	0x3f901999
 8009bc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8009bc4:	3f50624d 	.word	0x3f50624d
 8009bc8:	40010000 	.word	0x40010000
 8009bcc:	20008594 	.word	0x20008594
 8009bd0:	40000400 	.word	0x40000400
 8009bd4:	20008598 	.word	0x20008598
 8009bd8:	20000214 	.word	0x20000214
 8009bdc:	20000230 	.word	0x20000230
 8009be0:	20000244 	.word	0x20000244

08009be4 <Flash_clear>:

extern float Driving_log[BACKUP_FLASH_SECTOR_SIZE2] __attribute__ ((aligned(4)));
extern char _backup_flash_start2;

bool Flash_clear()
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009bea:	f003 fc77 	bl	800d4dc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009bfe:	1d3a      	adds	r2, r7, #4
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4611      	mov	r1, r2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f003 fdc8 	bl	800d79c <HAL_FLASHEx_Erase>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009c10:	f003 fc86 	bl	800d520 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009c14:	7ffb      	ldrb	r3, [r7, #31]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d105      	bne.n	8009c26 <Flash_clear+0x42>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c20:	d101      	bne.n	8009c26 <Flash_clear+0x42>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <Flash_clear+0x44>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	b2db      	uxtb	r3, r3
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3720      	adds	r7, #32
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <Flash_clear2>:

bool Flash_clear2()
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b088      	sub	sp, #32
 8009c3a:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 8009c3c:	f003 fc4e 	bl	800d4dc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009c40:	2300      	movs	r3, #0
 8009c42:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM2;
 8009c44:	2306      	movs	r3, #6
 8009c46:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 6;
 8009c4c:	2306      	movs	r3, #6
 8009c4e:	617b      	str	r3, [r7, #20]


    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result2 = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009c50:	1d3a      	adds	r2, r7, #4
 8009c52:	f107 0308 	add.w	r3, r7, #8
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f003 fd9f 	bl	800d79c <HAL_FLASHEx_Erase>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009c62:	f003 fc5d 	bl	800d520 <HAL_FLASH_Lock>

    return result2 == HAL_OK && error_sector == 0xFFFFFFFF;
 8009c66:	7ffb      	ldrb	r3, [r7, #31]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d105      	bne.n	8009c78 <Flash_clear2+0x42>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d101      	bne.n	8009c78 <Flash_clear2+0x42>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <Flash_clear2+0x44>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <Flash_load>:

uint16_t* Flash_load()
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 8009c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c90:	4903      	ldr	r1, [pc, #12]	; (8009ca0 <Flash_load+0x18>)
 8009c92:	4804      	ldr	r0, [pc, #16]	; (8009ca4 <Flash_load+0x1c>)
 8009c94:	f007 fc52 	bl	801153c <memcpy>
    return work_ram;
 8009c98:	4b02      	ldr	r3, [pc, #8]	; (8009ca4 <Flash_load+0x1c>)
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	08004000 	.word	0x08004000
 8009ca4:	200004e0 	.word	0x200004e0

08009ca8 <Flash_load2>:
float* Flash_load2()
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	af00      	add	r7, sp, #0
    memcpy(Driving_log, &_backup_flash_start2, BACKUP_FLASH_SECTOR_SIZE2);
 8009cac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009cb0:	4903      	ldr	r1, [pc, #12]	; (8009cc0 <Flash_load2+0x18>)
 8009cb2:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <Flash_load2+0x1c>)
 8009cb4:	f007 fc42 	bl	801153c <memcpy>
    return Driving_log;
 8009cb8:	4b02      	ldr	r3, [pc, #8]	; (8009cc4 <Flash_load2+0x1c>)
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	08040000 	.word	0x08040000
 8009cc4:	20008620 	.word	0x20008620

08009cc8 <Flash_store>:
bool Flash_store()
{
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009cce:	f7ff ff89 	bl	8009be4 <Flash_clear>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f083 0301 	eor.w	r3, r3, #1
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <Flash_store+0x1a>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e02f      	b.n	8009d42 <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8009ce2:	4b1a      	ldr	r3, [pc, #104]	; (8009d4c <Flash_store+0x84>)
 8009ce4:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009ce6:	f003 fbf9 	bl	800d4dc <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8009cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cee:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]
 8009cf4:	e017      	b.n	8009d26 <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4a15      	ldr	r2, [pc, #84]	; (8009d50 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 8009cfc:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	4413      	add	r3, r2
 8009d06:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8009d08:	f04f 0400 	mov.w	r4, #0
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4623      	mov	r3, r4
 8009d10:	2002      	movs	r0, #2
 8009d12:	f003 fb8f 	bl	800d434 <HAL_FLASH_Program>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d107      	bne.n	8009d30 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60bb      	str	r3, [r7, #8]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d3e3      	bcc.n	8009cf6 <Flash_store+0x2e>
 8009d2e:	e000      	b.n	8009d32 <Flash_store+0x6a>
        if (result != HAL_OK) break;
 8009d30:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009d32:	f003 fbf5 	bl	800d520 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bf0c      	ite	eq
 8009d3c:	2301      	moveq	r3, #1
 8009d3e:	2300      	movne	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd90      	pop	{r4, r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200004e0 	.word	0x200004e0
 8009d50:	08004000 	.word	0x08004000

08009d54 <Flash_store2>:
bool Flash_store2()
{
 8009d54:	b590      	push	{r4, r7, lr}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear2()) {
 8009d5a:	f7ff ff6c 	bl	8009c36 <Flash_clear2>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f083 0301 	eor.w	r3, r3, #1
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <Flash_store2+0x20>
    	printf("error\r\n");
 8009d6a:	481c      	ldr	r0, [pc, #112]	; (8009ddc <Flash_store2+0x88>)
 8009d6c:	f008 faac 	bl	80122c8 <puts>
    	return false;
 8009d70:	2300      	movs	r3, #0
 8009d72:	e02f      	b.n	8009dd4 <Flash_store2+0x80>
    }
    uint32_t *p_Driving_log = (uint32_t*)Driving_log;
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <Flash_store2+0x8c>)
 8009d76:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8009d78:	f003 fbb0 	bl	800d4dc <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result2;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE2 / sizeof(uint32_t);
 8009d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d80:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
 8009d86:	e017      	b.n	8009db8 <Flash_store2+0x64>
    {
        result2 = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start2) + sizeof(uint32_t) * i,
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <Flash_store2+0x90>)
        result2 = HAL_FLASH_Program(
 8009d8e:	1899      	adds	r1, r3, r2
                    p_Driving_log[i]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	4413      	add	r3, r2
 8009d98:	681b      	ldr	r3, [r3, #0]
        result2 = HAL_FLASH_Program(
 8009d9a:	f04f 0400 	mov.w	r4, #0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4623      	mov	r3, r4
 8009da2:	2002      	movs	r0, #2
 8009da4:	f003 fb46 	bl	800d434 <HAL_FLASH_Program>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
                );
        if (result2 != HAL_OK) break;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d107      	bne.n	8009dc2 <Flash_store2+0x6e>
    for (size_t i=0; i<write_cnt; i++)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d3e3      	bcc.n	8009d88 <Flash_store2+0x34>
 8009dc0:	e000      	b.n	8009dc4 <Flash_store2+0x70>
        if (result2 != HAL_OK) break;
 8009dc2:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8009dc4:	f003 fbac 	bl	800d520 <HAL_FLASH_Lock>

    return result2 == HAL_OK;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bf0c      	ite	eq
 8009dce:	2301      	moveq	r3, #1
 8009dd0:	2300      	movne	r3, #0
 8009dd2:	b2db      	uxtb	r3, r3
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd90      	pop	{r4, r7, pc}
 8009ddc:	08015ad0 	.word	0x08015ad0
 8009de0:	20008620 	.word	0x20008620
 8009de4:	08040000 	.word	0x08040000

08009de8 <LED>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim4;
void MX_TIM6_Init(void);
extern uint8_t gh;
void LED(uint8_t x){
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
	switch(x){
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2b07      	cmp	r3, #7
 8009df8:	f200 80ac 	bhi.w	8009f54 <LED+0x16c>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <LED+0x1c>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e25 	.word	0x08009e25
 8009e08:	08009e4b 	.word	0x08009e4b
 8009e0c:	08009e71 	.word	0x08009e71
 8009e10:	08009e97 	.word	0x08009e97
 8009e14:	08009ebd 	.word	0x08009ebd
 8009e18:	08009ee3 	.word	0x08009ee3
 8009e1c:	08009f09 	.word	0x08009f09
 8009e20:	08009f2f 	.word	0x08009f2f
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e24:	2200      	movs	r2, #0
 8009e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e2a:	484c      	ldr	r0, [pc, #304]	; (8009f5c <LED+0x174>)
 8009e2c:	f003 ff8a 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009e30:	2201      	movs	r2, #1
 8009e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e36:	4849      	ldr	r0, [pc, #292]	; (8009f5c <LED+0x174>)
 8009e38:	f003 ff84 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e42:	4846      	ldr	r0, [pc, #280]	; (8009f5c <LED+0x174>)
 8009e44:	f003 ff7e 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009e48:	e084      	b.n	8009f54 <LED+0x16c>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e50:	4842      	ldr	r0, [pc, #264]	; (8009f5c <LED+0x174>)
 8009e52:	f003 ff77 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009e56:	2200      	movs	r2, #0
 8009e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e5c:	483f      	ldr	r0, [pc, #252]	; (8009f5c <LED+0x174>)
 8009e5e:	f003 ff71 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009e62:	2201      	movs	r2, #1
 8009e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e68:	483c      	ldr	r0, [pc, #240]	; (8009f5c <LED+0x174>)
 8009e6a:	f003 ff6b 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009e6e:	e071      	b.n	8009f54 <LED+0x16c>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e70:	2200      	movs	r2, #0
 8009e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e76:	4839      	ldr	r0, [pc, #228]	; (8009f5c <LED+0x174>)
 8009e78:	f003 ff64 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e82:	4836      	ldr	r0, [pc, #216]	; (8009f5c <LED+0x174>)
 8009e84:	f003 ff5e 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e8e:	4833      	ldr	r0, [pc, #204]	; (8009f5c <LED+0x174>)
 8009e90:	f003 ff58 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009e94:	e05e      	b.n	8009f54 <LED+0x16c>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8009e96:	2201      	movs	r2, #1
 8009e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e9c:	482f      	ldr	r0, [pc, #188]	; (8009f5c <LED+0x174>)
 8009e9e:	f003 ff51 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ea8:	482c      	ldr	r0, [pc, #176]	; (8009f5c <LED+0x174>)
 8009eaa:	f003 ff4b 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009eb4:	4829      	ldr	r0, [pc, #164]	; (8009f5c <LED+0x174>)
 8009eb6:	f003 ff45 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009eba:	e04b      	b.n	8009f54 <LED+0x16c>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ec2:	4826      	ldr	r0, [pc, #152]	; (8009f5c <LED+0x174>)
 8009ec4:	f003 ff3e 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ece:	4823      	ldr	r0, [pc, #140]	; (8009f5c <LED+0x174>)
 8009ed0:	f003 ff38 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009eda:	4820      	ldr	r0, [pc, #128]	; (8009f5c <LED+0x174>)
 8009edc:	f003 ff32 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009ee0:	e038      	b.n	8009f54 <LED+0x16c>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009ee8:	481c      	ldr	r0, [pc, #112]	; (8009f5c <LED+0x174>)
 8009eea:	f003 ff2b 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ef4:	4819      	ldr	r0, [pc, #100]	; (8009f5c <LED+0x174>)
 8009ef6:	f003 ff25 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009efa:	2200      	movs	r2, #0
 8009efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f00:	4816      	ldr	r0, [pc, #88]	; (8009f5c <LED+0x174>)
 8009f02:	f003 ff1f 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009f06:	e025      	b.n	8009f54 <LED+0x16c>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f0e:	4813      	ldr	r0, [pc, #76]	; (8009f5c <LED+0x174>)
 8009f10:	f003 ff18 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8009f14:	2200      	movs	r2, #0
 8009f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f1a:	4810      	ldr	r0, [pc, #64]	; (8009f5c <LED+0x174>)
 8009f1c:	f003 ff12 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8009f20:	2200      	movs	r2, #0
 8009f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f26:	480d      	ldr	r0, [pc, #52]	; (8009f5c <LED+0x174>)
 8009f28:	f003 ff0c 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009f2c:	e012      	b.n	8009f54 <LED+0x16c>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f34:	4809      	ldr	r0, [pc, #36]	; (8009f5c <LED+0x174>)
 8009f36:	f003 ff05 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f40:	4806      	ldr	r0, [pc, #24]	; (8009f5c <LED+0x174>)
 8009f42:	f003 feff 	bl	800dd44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8009f46:	2201      	movs	r2, #1
 8009f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009f4c:	4803      	ldr	r0, [pc, #12]	; (8009f5c <LED+0x174>)
 8009f4e:	f003 fef9 	bl	800dd44 <HAL_GPIO_WritePin>
			break;
 8009f52:	bf00      	nop

	}

}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	40020400 	.word	0x40020400

08009f60 <error>:
void error(){
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
	while(1){
		Motor(0,0);
 8009f64:	2100      	movs	r1, #0
 8009f66:	2000      	movs	r0, #0
 8009f68:	f000 f81a 	bl	8009fa0 <Motor>
		LED(1);
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	f7ff ff3b 	bl	8009de8 <LED>
		Motor(0,0);
 8009f72:	e7f7      	b.n	8009f64 <error+0x4>

08009f74 <stop>:
	}
}
void stop(){
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
	static int i=0;
//	i++;
//	if (i>100 ){

		HAL_TIM_Base_Stop_IT(&htim6);
 8009f78:	4807      	ldr	r0, [pc, #28]	; (8009f98 <stop+0x24>)
 8009f7a:	f005 fd1c 	bl	800f9b6 <HAL_TIM_Base_Stop_IT>
		Motor(-1000,-1000);
 8009f7e:	4907      	ldr	r1, [pc, #28]	; (8009f9c <stop+0x28>)
 8009f80:	4806      	ldr	r0, [pc, #24]	; (8009f9c <stop+0x28>)
 8009f82:	f000 f80d 	bl	8009fa0 <Motor>
		Motor(0,0);
 8009f86:	2100      	movs	r1, #0
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f000 f809 	bl	8009fa0 <Motor>
//	}


	LED(6);
 8009f8e:	2006      	movs	r0, #6
 8009f90:	f7ff ff2a 	bl	8009de8 <LED>


}
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	200003c0 	.word	0x200003c0
 8009f9c:	fffffc18 	.word	0xfffffc18

08009fa0 <Motor>:

void Motor(int16_t MotorL,int16_t MotorR)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	460a      	mov	r2, r1
 8009faa:	80fb      	strh	r3, [r7, #6]
 8009fac:	4613      	mov	r3, r2
 8009fae:	80bb      	strh	r3, [r7, #4]
	if(MotorL > 0 ){
 8009fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	dd06      	ble.n	8009fc6 <Motor+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fbe:	4823      	ldr	r0, [pc, #140]	; (800a04c <Motor+0xac>)
 8009fc0:	f003 fec0 	bl	800dd44 <HAL_GPIO_WritePin>
 8009fc4:	e00d      	b.n	8009fe2 <Motor+0x42>

	}else if(MotorL < 0){
 8009fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	da09      	bge.n	8009fe2 <Motor+0x42>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fd4:	481d      	ldr	r0, [pc, #116]	; (800a04c <Motor+0xac>)
 8009fd6:	f003 feb5 	bl	800dd44 <HAL_GPIO_WritePin>
		MotorL = -MotorL;
 8009fda:	88fb      	ldrh	r3, [r7, #6]
 8009fdc:	425b      	negs	r3, r3
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	80fb      	strh	r3, [r7, #6]
	}
	if(MotorR > 0 ){
 8009fe2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dd05      	ble.n	8009ff6 <Motor+0x56>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8009fea:	2200      	movs	r2, #0
 8009fec:	2140      	movs	r1, #64	; 0x40
 8009fee:	4818      	ldr	r0, [pc, #96]	; (800a050 <Motor+0xb0>)
 8009ff0:	f003 fea8 	bl	800dd44 <HAL_GPIO_WritePin>
 8009ff4:	e00c      	b.n	800a010 <Motor+0x70>

	}else if(MotorR < 0){
 8009ff6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	da08      	bge.n	800a010 <Motor+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009ffe:	2201      	movs	r2, #1
 800a000:	2140      	movs	r1, #64	; 0x40
 800a002:	4813      	ldr	r0, [pc, #76]	; (800a050 <Motor+0xb0>)
 800a004:	f003 fe9e 	bl	800dd44 <HAL_GPIO_WritePin>
		MotorR = -MotorR;
 800a008:	88bb      	ldrh	r3, [r7, #4]
 800a00a:	425b      	negs	r3, r3
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	80bb      	strh	r3, [r7, #4]

	}
	if (MotorR > 1800) MotorR = 1800;
 800a010:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a014:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800a018:	dd02      	ble.n	800a020 <Motor+0x80>
 800a01a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800a01e:	80bb      	strh	r3, [r7, #4]
	if (MotorL > 1800) MotorL = 1800;
 800a020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a024:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800a028:	dd02      	ble.n	800a030 <Motor+0x90>
 800a02a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800a02e:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MotorL);
 800a030:	4b08      	ldr	r3, [pc, #32]	; (800a054 <Motor+0xb4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a038:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, MotorR);
 800a03a:	4b07      	ldr	r3, [pc, #28]	; (800a058 <Motor+0xb8>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a042:	639a      	str	r2, [r3, #56]	; 0x38

}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	40020000 	.word	0x40020000
 800a050:	40020400 	.word	0x40020400
 800a054:	20000258 	.word	0x20000258
 800a058:	20000298 	.word	0x20000298

0800a05c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*)&ch, 1, 0xFFFF);
 800a064:	1d39      	adds	r1, r7, #4
 800a066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a06a:	2201      	movs	r2, #1
 800a06c:	4803      	ldr	r0, [pc, #12]	; (800a07c <__io_putchar+0x20>)
 800a06e:	f006 fb9c 	bl	80107aa <HAL_UART_Transmit>
	return ch;
 800a072:	687b      	ldr	r3, [r7, #4]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	2000859c 	.word	0x2000859c

0800a080 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr
 800a094:	0000      	movs	r0, r0
	...

0800a098 <init>:



void init()
{
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	b090      	sub	sp, #64	; 0x40
 800a09e:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t l=0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, SENSOR_NUMBER) != HAL_OK){
 800a0a4:	220d      	movs	r2, #13
 800a0a6:	4996      	ldr	r1, [pc, #600]	; (800a300 <init+0x268>)
 800a0a8:	4896      	ldr	r0, [pc, #600]	; (800a304 <init+0x26c>)
 800a0aa:	f002 f97b 	bl	800c3a4 <HAL_ADC_Start_DMA>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <init+0x20>
	  Error_Handler();
 800a0b4:	f001 f994 	bl	800b3e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4) != HAL_OK){
 800a0b8:	210c      	movs	r1, #12
 800a0ba:	4893      	ldr	r0, [pc, #588]	; (800a308 <init+0x270>)
 800a0bc:	f005 fcd2 	bl	800fa64 <HAL_TIM_PWM_Start>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <init+0x32>
	      Error_Handler();
 800a0c6:	f001 f98b 	bl	800b3e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK){
 800a0ca:	2104      	movs	r1, #4
 800a0cc:	488f      	ldr	r0, [pc, #572]	; (800a30c <init+0x274>)
 800a0ce:	f005 fcc9 	bl	800fa64 <HAL_TIM_PWM_Start>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <init+0x44>
				      Error_Handler();
 800a0d8:	f001 f982 	bl	800b3e0 <Error_Handler>
				}
	lcd_init();
 800a0dc:	f7ff f91c 	bl	8009318 <lcd_init>
	lcd_clear();lcd_locate(0,0);
 800a0e0:	f7ff f95e 	bl	80093a0 <lcd_clear>
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	f7ff f96a 	bl	80093c0 <lcd_locate>
	lcd_printf("OK");
 800a0ec:	4888      	ldr	r0, [pc, #544]	; (800a310 <init+0x278>)
 800a0ee:	f7ff f991 	bl	8009414 <lcd_printf>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800a0f2:	213c      	movs	r1, #60	; 0x3c
 800a0f4:	4887      	ldr	r0, [pc, #540]	; (800a314 <init+0x27c>)
 800a0f6:	f005 fd85 	bl	800fc04 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800a0fa:	213c      	movs	r1, #60	; 0x3c
 800a0fc:	4886      	ldr	r0, [pc, #536]	; (800a318 <init+0x280>)
 800a0fe:	f005 fd81 	bl	800fc04 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_ALL);
 800a102:	213c      	movs	r1, #60	; 0x3c
 800a104:	4881      	ldr	r0, [pc, #516]	; (800a30c <init+0x274>)
 800a106:	f005 fcad 	bl	800fa64 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800a10a:	2201      	movs	r2, #1
 800a10c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a110:	4882      	ldr	r0, [pc, #520]	; (800a31c <init+0x284>)
 800a112:	f003 fe17 	bl	800dd44 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_ALL);
 800a116:	213c      	movs	r1, #60	; 0x3c
 800a118:	487b      	ldr	r0, [pc, #492]	; (800a308 <init+0x270>)
 800a11a:	f005 fca3 	bl	800fa64 <HAL_TIM_PWM_Start>


	TIM1 -> CNT = 32767;
 800a11e:	4b80      	ldr	r3, [pc, #512]	; (800a320 <init+0x288>)
 800a120:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a124:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 32767;
 800a126:	4b7f      	ldr	r3, [pc, #508]	; (800a324 <init+0x28c>)
 800a128:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a12c:	625a      	str	r2, [r3, #36]	; 0x24

	Flash_load();
 800a12e:	f7ff fdab 	bl	8009c88 <Flash_load>
	ang_average=(float)work_ram[31]/1000;
 800a132:	4b7d      	ldr	r3, [pc, #500]	; (800a328 <init+0x290>)
 800a134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a13e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800a32c <init+0x294>
 800a142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a146:	4b7a      	ldr	r3, [pc, #488]	; (800a330 <init+0x298>)
 800a148:	edc3 7a00 	vstr	s15, [r3]
	printf("%lf\r\n",ang_average);
 800a14c:	4b78      	ldr	r3, [pc, #480]	; (800a330 <init+0x298>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe f931 	bl	80083b8 <__aeabi_f2d>
 800a156:	4603      	mov	r3, r0
 800a158:	460c      	mov	r4, r1
 800a15a:	461a      	mov	r2, r3
 800a15c:	4623      	mov	r3, r4
 800a15e:	4875      	ldr	r0, [pc, #468]	; (800a334 <init+0x29c>)
 800a160:	f008 f83e 	bl	80121e0 <iprintf>
	if(ang_average>=50) ang_average=-ang_average/10;
 800a164:	4b72      	ldr	r3, [pc, #456]	; (800a330 <init+0x298>)
 800a166:	edd3 7a00 	vldr	s15, [r3]
 800a16a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a338 <init+0x2a0>
 800a16e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a176:	db0b      	blt.n	800a190 <init+0xf8>
 800a178:	4b6d      	ldr	r3, [pc, #436]	; (800a330 <init+0x298>)
 800a17a:	edd3 7a00 	vldr	s15, [r3]
 800a17e:	eeb1 7a67 	vneg.f32	s14, s15
 800a182:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800a186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a18a:	4b69      	ldr	r3, [pc, #420]	; (800a330 <init+0x298>)
 800a18c:	edc3 7a00 	vstr	s15, [r3]
	printf("%lf\r\n",ang_average);
 800a190:	4b67      	ldr	r3, [pc, #412]	; (800a330 <init+0x298>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe f90f 	bl	80083b8 <__aeabi_f2d>
 800a19a:	4603      	mov	r3, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	4864      	ldr	r0, [pc, #400]	; (800a334 <init+0x29c>)
 800a1a4:	f008 f81c 	bl	80121e0 <iprintf>

	Kp = work_ram[0];
 800a1a8:	4b5f      	ldr	r3, [pc, #380]	; (800a328 <init+0x290>)
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe f8e1 	bl	8008374 <__aeabi_ui2d>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	4a61      	ldr	r2, [pc, #388]	; (800a33c <init+0x2a4>)
 800a1b8:	e9c2 3400 	strd	r3, r4, [r2]
	Ki = work_ram[1];
 800a1bc:	4b5a      	ldr	r3, [pc, #360]	; (800a328 <init+0x290>)
 800a1be:	885b      	ldrh	r3, [r3, #2]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe f8d7 	bl	8008374 <__aeabi_ui2d>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	4a5d      	ldr	r2, [pc, #372]	; (800a340 <init+0x2a8>)
 800a1cc:	e9c2 3400 	strd	r3, r4, [r2]
	Kd = work_ram[2];
 800a1d0:	4b55      	ldr	r3, [pc, #340]	; (800a328 <init+0x290>)
 800a1d2:	889b      	ldrh	r3, [r3, #4]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe f8cd 	bl	8008374 <__aeabi_ui2d>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	4a59      	ldr	r2, [pc, #356]	; (800a344 <init+0x2ac>)
 800a1e0:	e9c2 3400 	strd	r3, r4, [r2]
	Kp = Kp/100;
 800a1e4:	4b55      	ldr	r3, [pc, #340]	; (800a33c <init+0x2a4>)
 800a1e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	4b56      	ldr	r3, [pc, #344]	; (800a348 <init+0x2b0>)
 800a1f0:	f7fe fa64 	bl	80086bc <__aeabi_ddiv>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	4a50      	ldr	r2, [pc, #320]	; (800a33c <init+0x2a4>)
 800a1fa:	e9c2 3400 	strd	r3, r4, [r2]
	Ki = Ki/1000000;
 800a1fe:	4b50      	ldr	r3, [pc, #320]	; (800a340 <init+0x2a8>)
 800a200:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a204:	a33c      	add	r3, pc, #240	; (adr r3, 800a2f8 <init+0x260>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f7fe fa57 	bl	80086bc <__aeabi_ddiv>
 800a20e:	4603      	mov	r3, r0
 800a210:	460c      	mov	r4, r1
 800a212:	4a4b      	ldr	r2, [pc, #300]	; (800a340 <init+0x2a8>)
 800a214:	e9c2 3400 	strd	r3, r4, [r2]
	Kd = Kd/100;
 800a218:	4b4a      	ldr	r3, [pc, #296]	; (800a344 <init+0x2ac>)
 800a21a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a21e:	f04f 0200 	mov.w	r2, #0
 800a222:	4b49      	ldr	r3, [pc, #292]	; (800a348 <init+0x2b0>)
 800a224:	f7fe fa4a 	bl	80086bc <__aeabi_ddiv>
 800a228:	4603      	mov	r3, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	4a45      	ldr	r2, [pc, #276]	; (800a344 <init+0x2ac>)
 800a22e:	e9c2 3400 	strd	r3, r4, [r2]
	printf("MAX: %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n", work_ram[3],work_ram[4],work_ram[5],work_ram[6],work_ram[7],work_ram[8],work_ram[9],work_ram[10],work_ram[11],work_ram[12],work_ram[13],work_ram[14],work_ram[15]);
 800a232:	4b3d      	ldr	r3, [pc, #244]	; (800a328 <init+0x290>)
 800a234:	88db      	ldrh	r3, [r3, #6]
 800a236:	469c      	mov	ip, r3
 800a238:	4b3b      	ldr	r3, [pc, #236]	; (800a328 <init+0x290>)
 800a23a:	891b      	ldrh	r3, [r3, #8]
 800a23c:	469e      	mov	lr, r3
 800a23e:	4b3a      	ldr	r3, [pc, #232]	; (800a328 <init+0x290>)
 800a240:	895b      	ldrh	r3, [r3, #10]
 800a242:	4698      	mov	r8, r3
 800a244:	4b38      	ldr	r3, [pc, #224]	; (800a328 <init+0x290>)
 800a246:	899b      	ldrh	r3, [r3, #12]
 800a248:	461a      	mov	r2, r3
 800a24a:	4b37      	ldr	r3, [pc, #220]	; (800a328 <init+0x290>)
 800a24c:	89db      	ldrh	r3, [r3, #14]
 800a24e:	4619      	mov	r1, r3
 800a250:	4b35      	ldr	r3, [pc, #212]	; (800a328 <init+0x290>)
 800a252:	8a1b      	ldrh	r3, [r3, #16]
 800a254:	4618      	mov	r0, r3
 800a256:	4b34      	ldr	r3, [pc, #208]	; (800a328 <init+0x290>)
 800a258:	8a5b      	ldrh	r3, [r3, #18]
 800a25a:	461c      	mov	r4, r3
 800a25c:	4b32      	ldr	r3, [pc, #200]	; (800a328 <init+0x290>)
 800a25e:	8a9b      	ldrh	r3, [r3, #20]
 800a260:	461d      	mov	r5, r3
 800a262:	4b31      	ldr	r3, [pc, #196]	; (800a328 <init+0x290>)
 800a264:	8adb      	ldrh	r3, [r3, #22]
 800a266:	461e      	mov	r6, r3
 800a268:	4b2f      	ldr	r3, [pc, #188]	; (800a328 <init+0x290>)
 800a26a:	8b1b      	ldrh	r3, [r3, #24]
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	4b2e      	ldr	r3, [pc, #184]	; (800a328 <init+0x290>)
 800a270:	8b5b      	ldrh	r3, [r3, #26]
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	4b2c      	ldr	r3, [pc, #176]	; (800a328 <init+0x290>)
 800a276:	8b9b      	ldrh	r3, [r3, #28]
 800a278:	607b      	str	r3, [r7, #4]
 800a27a:	4b2b      	ldr	r3, [pc, #172]	; (800a328 <init+0x290>)
 800a27c:	8bdb      	ldrh	r3, [r3, #30]
 800a27e:	9309      	str	r3, [sp, #36]	; 0x24
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	9308      	str	r3, [sp, #32]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	9306      	str	r3, [sp, #24]
 800a28c:	9605      	str	r6, [sp, #20]
 800a28e:	9504      	str	r5, [sp, #16]
 800a290:	9403      	str	r4, [sp, #12]
 800a292:	9002      	str	r0, [sp, #8]
 800a294:	9101      	str	r1, [sp, #4]
 800a296:	9200      	str	r2, [sp, #0]
 800a298:	4643      	mov	r3, r8
 800a29a:	4672      	mov	r2, lr
 800a29c:	4661      	mov	r1, ip
 800a29e:	482b      	ldr	r0, [pc, #172]	; (800a34c <init+0x2b4>)
 800a2a0:	f007 ff9e 	bl	80121e0 <iprintf>
	while(l < SENSOR_NUMBER){
 800a2a4:	e01d      	b.n	800a2e2 <init+0x24a>
			di[l] = work_ram[l+3];
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	1cda      	adds	r2, r3, #3
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	491e      	ldr	r1, [pc, #120]	; (800a328 <init+0x290>)
 800a2ae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a2b2:	4a27      	ldr	r2, [pc, #156]	; (800a350 <init+0x2b8>)
 800a2b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			b[l] = work_ram[l+17];
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	f103 0211 	add.w	r2, r3, #17
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	4919      	ldr	r1, [pc, #100]	; (800a328 <init+0x290>)
 800a2c2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a2c6:	4a23      	ldr	r2, [pc, #140]	; (800a354 <init+0x2bc>)
 800a2c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			printf("%d,", b[l]);
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	4a21      	ldr	r2, [pc, #132]	; (800a354 <init+0x2bc>)
 800a2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4820      	ldr	r0, [pc, #128]	; (800a358 <init+0x2c0>)
 800a2d8:	f007 ff82 	bl	80121e0 <iprintf>
			l++;
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	75fb      	strb	r3, [r7, #23]
	while(l < SENSOR_NUMBER){
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	2b0c      	cmp	r3, #12
 800a2e6:	d9de      	bls.n	800a2a6 <init+0x20e>
	}
	printf("\r\n");
 800a2e8:	481c      	ldr	r0, [pc, #112]	; (800a35c <init+0x2c4>)
 800a2ea:	f007 ffed 	bl	80122c8 <puts>
}
 800a2ee:	bf00      	nop
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	412e8480 	.word	0x412e8480
 800a300:	2000044c 	.word	0x2000044c
 800a304:	20000318 	.word	0x20000318
 800a308:	20000258 	.word	0x20000258
 800a30c:	20000298 	.word	0x20000298
 800a310:	08015ad8 	.word	0x08015ad8
 800a314:	20000400 	.word	0x20000400
 800a318:	200002d8 	.word	0x200002d8
 800a31c:	40020000 	.word	0x40020000
 800a320:	40010000 	.word	0x40010000
 800a324:	40000400 	.word	0x40000400
 800a328:	200004e0 	.word	0x200004e0
 800a32c:	447a0000 	.word	0x447a0000
 800a330:	20000240 	.word	0x20000240
 800a334:	08015adc 	.word	0x08015adc
 800a338:	42480000 	.word	0x42480000
 800a33c:	20000218 	.word	0x20000218
 800a340:	20000220 	.word	0x20000220
 800a344:	20000228 	.word	0x20000228
 800a348:	40590000 	.word	0x40590000
 800a34c:	08015ae4 	.word	0x08015ae4
 800a350:	2000853c 	.word	0x2000853c
 800a354:	20000468 	.word	0x20000468
 800a358:	08015b14 	.word	0x08015b14
 800a35c:	08015b18 	.word	0x08015b18

0800a360 <log_Calcu>:

int log_Calcu(int c){
 800a360:	b5b0      	push	{r4, r5, r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	int i=0;
 800a368:	2300      	movs	r3, #0
 800a36a:	60bb      	str	r3, [r7, #8]
	double h=0;
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	f04f 0400 	mov.w	r4, #0
 800a374:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int spee=1000;
 800a378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a37c:	60fb      	str	r3, [r7, #12]
	//Driving_log[0] = 0;
	h = Driving_log[6100]/(Driving_log[c]*0.01);
 800a37e:	4b4c      	ldr	r3, [pc, #304]	; (800a4b0 <log_Calcu+0x150>)
 800a380:	f503 43be 	add.w	r3, r3, #24320	; 0x5f00
 800a384:	3350      	adds	r3, #80	; 0x50
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe f815 	bl	80083b8 <__aeabi_f2d>
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	4a47      	ldr	r2, [pc, #284]	; (800a4b0 <log_Calcu+0x150>)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe f80b 	bl	80083b8 <__aeabi_f2d>
 800a3a2:	a33d      	add	r3, pc, #244	; (adr r3, 800a498 <log_Calcu+0x138>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	f7fe f85e 	bl	8008468 <__aeabi_dmul>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7fe f982 	bl	80086bc <__aeabi_ddiv>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	if(h<0)h=-h;
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3cc:	f7fe fabe 	bl	800894c <__aeabi_dcmplt>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <log_Calcu+0x82>
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a3e0:	617b      	str	r3, [r7, #20]
	if(h < 100) spee = 1200;
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	4b33      	ldr	r3, [pc, #204]	; (800a4b4 <log_Calcu+0x154>)
 800a3e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3ec:	f7fe faae 	bl	800894c <__aeabi_dcmplt>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <log_Calcu+0x9e>
 800a3f6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	e044      	b.n	800a488 <log_Calcu+0x128>
	else if(h < 300)  spee = 1400;
 800a3fe:	a328      	add	r3, pc, #160	; (adr r3, 800a4a0 <log_Calcu+0x140>)
 800a400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a404:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a408:	f7fe faa0 	bl	800894c <__aeabi_dcmplt>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <log_Calcu+0xba>
 800a412:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e036      	b.n	800a488 <log_Calcu+0x128>
	else if(h < 500)  spee = 1300;
 800a41a:	f04f 0200 	mov.w	r2, #0
 800a41e:	4b26      	ldr	r3, [pc, #152]	; (800a4b8 <log_Calcu+0x158>)
 800a420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a424:	f7fe fa92 	bl	800894c <__aeabi_dcmplt>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <log_Calcu+0xd6>
 800a42e:	f240 5314 	movw	r3, #1300	; 0x514
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e028      	b.n	800a488 <log_Calcu+0x128>
	else if(h < 800)  spee = 1500;
 800a436:	f04f 0200 	mov.w	r2, #0
 800a43a:	4b20      	ldr	r3, [pc, #128]	; (800a4bc <log_Calcu+0x15c>)
 800a43c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a440:	f7fe fa84 	bl	800894c <__aeabi_dcmplt>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <log_Calcu+0xf2>
 800a44a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	e01a      	b.n	800a488 <log_Calcu+0x128>
	else if(h < 1000) spee = 1600;
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	4b1a      	ldr	r3, [pc, #104]	; (800a4c0 <log_Calcu+0x160>)
 800a458:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a45c:	f7fe fa76 	bl	800894c <__aeabi_dcmplt>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <log_Calcu+0x10e>
 800a466:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e00c      	b.n	800a488 <log_Calcu+0x128>
	else if(h < 1500) spee = 3000;
 800a46e:	a30e      	add	r3, pc, #56	; (adr r3, 800a4a8 <log_Calcu+0x148>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a478:	f7fe fa68 	bl	800894c <__aeabi_dcmplt>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <log_Calcu+0x128>
 800a482:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a486:	60fb      	str	r3, [r7, #12]
	return spee;
 800a488:	68fb      	ldr	r3, [r7, #12]

}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bdb0      	pop	{r4, r5, r7, pc}
 800a492:	bf00      	nop
 800a494:	f3af 8000 	nop.w
 800a498:	47ae147b 	.word	0x47ae147b
 800a49c:	3f847ae1 	.word	0x3f847ae1
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	4072c000 	.word	0x4072c000
 800a4a8:	00000000 	.word	0x00000000
 800a4ac:	40977000 	.word	0x40977000
 800a4b0:	20008620 	.word	0x20008620
 800a4b4:	40590000 	.word	0x40590000
 800a4b8:	407f4000 	.word	0x407f4000
 800a4bc:	40890000 	.word	0x40890000
 800a4c0:	408f4000 	.word	0x408f4000

0800a4c4 <sidemaker>:

void sidemaker(){
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
	//static int h= 0;
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) ==0 && count > 700 && stoping > 30){
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	4814      	ldr	r0, [pc, #80]	; (800a51c <sidemaker+0x58>)
 800a4cc:	f003 fc22 	bl	800dd14 <HAL_GPIO_ReadPin>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d114      	bne.n	800a500 <sidemaker+0x3c>
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <sidemaker+0x5c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a4de:	dd0f      	ble.n	800a500 <sidemaker+0x3c>
 800a4e0:	4b10      	ldr	r3, [pc, #64]	; (800a524 <sidemaker+0x60>)
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	2b1e      	cmp	r3, #30
 800a4e6:	d90b      	bls.n	800a500 <sidemaker+0x3c>
		floag=1;
 800a4e8:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <sidemaker+0x64>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
		stoping =0;
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <sidemaker+0x60>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	801a      	strh	r2, [r3, #0]
		stop_flag++;
 800a4f4:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <sidemaker+0x68>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <sidemaker+0x68>)
 800a4fe:	701a      	strb	r2, [r3, #0]

	}

	if(Speed < Speedbuff) Speed= Speed + 10;;
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <sidemaker+0x6c>)
 800a502:	881a      	ldrh	r2, [r3, #0]
 800a504:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <sidemaker+0x70>)
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d205      	bcs.n	800a518 <sidemaker+0x54>
 800a50c:	4b08      	ldr	r3, [pc, #32]	; (800a530 <sidemaker+0x6c>)
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	330a      	adds	r3, #10
 800a512:	b29a      	uxth	r2, r3
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <sidemaker+0x6c>)
 800a516:	801a      	strh	r2, [r3, #0]

}
 800a518:	bf00      	nop
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	40020400 	.word	0x40020400
 800a520:	20000004 	.word	0x20000004
 800a524:	20000008 	.word	0x20000008
 800a528:	20000234 	.word	0x20000234
 800a52c:	20000235 	.word	0x20000235
 800a530:	20000000 	.word	0x20000000
 800a534:	200085dc 	.word	0x200085dc

0800a538 <driv_log>:

void driv_log(){
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	if(con==1 && floag==1 && second==0){
 800a53c:	4b43      	ldr	r3, [pc, #268]	; (800a64c <driv_log+0x114>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d137      	bne.n	800a5b4 <driv_log+0x7c>
 800a544:	4b42      	ldr	r3, [pc, #264]	; (800a650 <driv_log+0x118>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d133      	bne.n	800a5b4 <driv_log+0x7c>
 800a54c:	4b41      	ldr	r3, [pc, #260]	; (800a654 <driv_log+0x11c>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d12f      	bne.n	800a5b4 <driv_log+0x7c>
			Driving_log[log_count] =ahs/a;
 800a554:	4b40      	ldr	r3, [pc, #256]	; (800a658 <driv_log+0x120>)
 800a556:	edd3 6a00 	vldr	s13, [r3]
 800a55a:	4b40      	ldr	r3, [pc, #256]	; (800a65c <driv_log+0x124>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a566:	4b3e      	ldr	r3, [pc, #248]	; (800a660 <driv_log+0x128>)
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a56e:	4a3d      	ldr	r2, [pc, #244]	; (800a664 <driv_log+0x12c>)
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	edc3 7a00 	vstr	s15, [r3]
			Driving_log[log_count+6100]= load_log;
 800a578:	4b39      	ldr	r3, [pc, #228]	; (800a660 <driv_log+0x128>)
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 800a580:	3314      	adds	r3, #20
 800a582:	4a39      	ldr	r2, [pc, #228]	; (800a668 <driv_log+0x130>)
 800a584:	6812      	ldr	r2, [r2, #0]
 800a586:	4937      	ldr	r1, [pc, #220]	; (800a664 <driv_log+0x12c>)
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	601a      	str	r2, [r3, #0]
			log_count++;
 800a58e:	4b34      	ldr	r3, [pc, #208]	; (800a660 <driv_log+0x128>)
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	b29a      	uxth	r2, r3
 800a596:	4b32      	ldr	r3, [pc, #200]	; (800a660 <driv_log+0x128>)
 800a598:	801a      	strh	r2, [r3, #0]
			con=0;
 800a59a:	4b2c      	ldr	r3, [pc, #176]	; (800a64c <driv_log+0x114>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	701a      	strb	r2, [r3, #0]
			a=0;
 800a5a0:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <driv_log+0x124>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
			ahs =0;
 800a5a6:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <driv_log+0x120>)
 800a5a8:	f04f 0200 	mov.w	r2, #0
 800a5ac:	601a      	str	r2, [r3, #0]
			LED(3);
 800a5ae:	2003      	movs	r0, #3
 800a5b0:	f7ff fc1a 	bl	8009de8 <LED>
		}
		if(con==1 && floag==1 && second==1){
 800a5b4:	4b25      	ldr	r3, [pc, #148]	; (800a64c <driv_log+0x114>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d132      	bne.n	800a622 <driv_log+0xea>
 800a5bc:	4b24      	ldr	r3, [pc, #144]	; (800a650 <driv_log+0x118>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d12e      	bne.n	800a622 <driv_log+0xea>
 800a5c4:	4b23      	ldr	r3, [pc, #140]	; (800a654 <driv_log+0x11c>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d12a      	bne.n	800a622 <driv_log+0xea>
			if(cros==1){
 800a5cc:	4b27      	ldr	r3, [pc, #156]	; (800a66c <driv_log+0x134>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d10d      	bne.n	800a5f0 <driv_log+0xb8>
				log_count = work_ram[33+i];
 800a5d4:	4b26      	ldr	r3, [pc, #152]	; (800a670 <driv_log+0x138>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	3321      	adds	r3, #33	; 0x21
 800a5da:	4a26      	ldr	r2, [pc, #152]	; (800a674 <driv_log+0x13c>)
 800a5dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800a5e0:	4b1f      	ldr	r3, [pc, #124]	; (800a660 <driv_log+0x128>)
 800a5e2:	801a      	strh	r2, [r3, #0]
				i++;
 800a5e4:	4b22      	ldr	r3, [pc, #136]	; (800a670 <driv_log+0x138>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b20      	ldr	r3, [pc, #128]	; (800a670 <driv_log+0x138>)
 800a5ee:	701a      	strb	r2, [r3, #0]
			}

			Speed =log_Calcu(log_count);
 800a5f0:	4b1b      	ldr	r3, [pc, #108]	; (800a660 <driv_log+0x128>)
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff feb3 	bl	800a360 <log_Calcu>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <driv_log+0x140>)
 800a600:	801a      	strh	r2, [r3, #0]
			Speedbuff = Speed;
 800a602:	4b1d      	ldr	r3, [pc, #116]	; (800a678 <driv_log+0x140>)
 800a604:	881a      	ldrh	r2, [r3, #0]
 800a606:	4b1d      	ldr	r3, [pc, #116]	; (800a67c <driv_log+0x144>)
 800a608:	801a      	strh	r2, [r3, #0]
			log_count++;
 800a60a:	4b15      	ldr	r3, [pc, #84]	; (800a660 <driv_log+0x128>)
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	3301      	adds	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	4b13      	ldr	r3, [pc, #76]	; (800a660 <driv_log+0x128>)
 800a614:	801a      	strh	r2, [r3, #0]
			con=0;
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <driv_log+0x114>)
 800a618:	2200      	movs	r2, #0
 800a61a:	701a      	strb	r2, [r3, #0]
			LED(1);
 800a61c:	2001      	movs	r0, #1
 800a61e:	f7ff fbe3 	bl	8009de8 <LED>
		}
		if(cros==1){
 800a622:	4b12      	ldr	r3, [pc, #72]	; (800a66c <driv_log+0x134>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d10d      	bne.n	800a646 <driv_log+0x10e>
			work_ram[33+i]=log_count;
 800a62a:	4b11      	ldr	r3, [pc, #68]	; (800a670 <driv_log+0x138>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	3321      	adds	r3, #33	; 0x21
 800a630:	4a0b      	ldr	r2, [pc, #44]	; (800a660 <driv_log+0x128>)
 800a632:	8811      	ldrh	r1, [r2, #0]
 800a634:	4a0f      	ldr	r2, [pc, #60]	; (800a674 <driv_log+0x13c>)
 800a636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			i++;
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <driv_log+0x138>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	3301      	adds	r3, #1
 800a640:	b2da      	uxtb	r2, r3
 800a642:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <driv_log+0x138>)
 800a644:	701a      	strb	r2, [r3, #0]
		}
}
 800a646:	bf00      	nop
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000230 	.word	0x20000230
 800a650:	20000234 	.word	0x20000234
 800a654:	20000236 	.word	0x20000236
 800a658:	20000484 	.word	0x20000484
 800a65c:	20000237 	.word	0x20000237
 800a660:	20000232 	.word	0x20000232
 800a664:	20008620 	.word	0x20008620
 800a668:	20000244 	.word	0x20000244
 800a66c:	20000238 	.word	0x20000238
 800a670:	20000248 	.word	0x20000248
 800a674:	200004e0 	.word	0x200004e0
 800a678:	20000000 	.word	0x20000000
 800a67c:	200085dc 	.word	0x200085dc

0800a680 <mode>:
	ed = e0-e/T;
	e0=e;
	angMotorL=(e*kp+ei*ki-ed*kd);
	return angMotorL;
}
int mode(){
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	b085      	sub	sp, #20
 800a684:	af02      	add	r7, sp, #8
	int8_t i=1;
 800a686:	2301      	movs	r3, #1
 800a688:	71fb      	strb	r3, [r7, #7]
	  int g;
	while(1){
		while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 800a68a:	e031      	b.n	800a6f0 <mode+0x70>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0) i++;
 800a68c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a690:	48ac      	ldr	r0, [pc, #688]	; (800a944 <mode+0x2c4>)
 800a692:	f003 fb3f 	bl	800dd14 <HAL_GPIO_ReadPin>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <mode+0x28>
 800a69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(100);
 800a6a8:	2064      	movs	r0, #100	; 0x64
 800a6aa:	f001 fe15 	bl	800c2d8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0) i--;
 800a6ae:	2104      	movs	r1, #4
 800a6b0:	48a4      	ldr	r0, [pc, #656]	; (800a944 <mode+0x2c4>)
 800a6b2:	f003 fb2f 	bl	800dd14 <HAL_GPIO_ReadPin>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d105      	bne.n	800a6c8 <mode+0x48>
 800a6bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	71fb      	strb	r3, [r7, #7]
			LED(i);
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fb8c 	bl	8009de8 <LED>
			if(i==8) i=1;
 800a6d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	d101      	bne.n	800a6dc <mode+0x5c>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	71fb      	strb	r3, [r7, #7]
			if(i==-1) i=7;
 800a6dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d101      	bne.n	800a6ea <mode+0x6a>
 800a6e6:	2307      	movs	r3, #7
 800a6e8:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(100);
 800a6ea:	2064      	movs	r0, #100	; 0x64
 800a6ec:	f001 fdf4 	bl	800c2d8 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 800a6f0:	2102      	movs	r1, #2
 800a6f2:	4894      	ldr	r0, [pc, #592]	; (800a944 <mode+0x2c4>)
 800a6f4:	f003 fb0e 	bl	800dd14 <HAL_GPIO_ReadPin>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1c6      	bne.n	800a68c <mode+0xc>

		}
		HAL_Delay(1000);
 800a6fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a702:	f001 fde9 	bl	800c2d8 <HAL_Delay>
		switch(i){
 800a706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b05      	cmp	r3, #5
 800a70e:	d8ef      	bhi.n	800a6f0 <mode+0x70>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <mode+0x98>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a731 	.word	0x0800a731
 800a71c:	0800a753 	.word	0x0800a753
 800a720:	0800a771 	.word	0x0800a771
 800a724:	0800a79f 	.word	0x0800a79f
 800a728:	0800a853 	.word	0x0800a853
 800a72c:	0800a8e1 	.word	0x0800a8e1
			case 1:
				LED(1);
 800a730:	2001      	movs	r0, #1
 800a732:	f7ff fb59 	bl	8009de8 <LED>
				lcd_clear();
 800a736:	f7fe fe33 	bl	80093a0 <lcd_clear>
				lcd_locate(0,0);
 800a73a:	2100      	movs	r1, #0
 800a73c:	2000      	movs	r0, #0
 800a73e:	f7fe fe3f 	bl	80093c0 <lcd_locate>
				lcd_printf("IMU");
 800a742:	4881      	ldr	r0, [pc, #516]	; (800a948 <mode+0x2c8>)
 800a744:	f7fe fe66 	bl	8009414 <lcd_printf>
				IMU_init();
 800a748:	f7fe fedc 	bl	8009504 <IMU_init>
				off_angle();
 800a74c:	f7fe ff3c 	bl	80095c8 <off_angle>
				break;
 800a750:	e0f7      	b.n	800a942 <mode+0x2c2>
			case 2:
				LED(2);
 800a752:	2002      	movs	r0, #2
 800a754:	f7ff fb48 	bl	8009de8 <LED>
				lcd_clear();
 800a758:	f7fe fe22 	bl	80093a0 <lcd_clear>
				lcd_locate(0,0);
 800a75c:	2100      	movs	r1, #0
 800a75e:	2000      	movs	r0, #0
 800a760:	f7fe fe2e 	bl	80093c0 <lcd_locate>
				lcd_printf("ADCinit");
 800a764:	4879      	ldr	r0, [pc, #484]	; (800a94c <mode+0x2cc>)
 800a766:	f7fe fe55 	bl	8009414 <lcd_printf>
				ADCinit();
 800a76a:	f7fe fb45 	bl	8008df8 <ADCinit>
				break;
 800a76e:	e0e8      	b.n	800a942 <mode+0x2c2>
			case 3:
				LED(3);
 800a770:	2003      	movs	r0, #3
 800a772:	f7ff fb39 	bl	8009de8 <LED>
				Speedbuff = Speed;
 800a776:	4b76      	ldr	r3, [pc, #472]	; (800a950 <mode+0x2d0>)
 800a778:	881a      	ldrh	r2, [r3, #0]
 800a77a:	4b76      	ldr	r3, [pc, #472]	; (800a954 <mode+0x2d4>)
 800a77c:	801a      	strh	r2, [r3, #0]
				lcd_clear();
 800a77e:	f7fe fe0f 	bl	80093a0 <lcd_clear>
				lcd_locate(0,0);
 800a782:	2100      	movs	r1, #0
 800a784:	2000      	movs	r0, #0
 800a786:	f7fe fe1b 	bl	80093c0 <lcd_locate>
				lcd_printf("Tuning");
 800a78a:	4873      	ldr	r0, [pc, #460]	; (800a958 <mode+0x2d8>)
 800a78c:	f7fe fe42 	bl	8009414 <lcd_printf>
				tuning();
 800a790:	f001 fa26 	bl	800bbe0 <tuning>
				Speed = Speedbuff;
 800a794:	4b6f      	ldr	r3, [pc, #444]	; (800a954 <mode+0x2d4>)
 800a796:	881a      	ldrh	r2, [r3, #0]
 800a798:	4b6d      	ldr	r3, [pc, #436]	; (800a950 <mode+0x2d0>)
 800a79a:	801a      	strh	r2, [r3, #0]
				break;
 800a79c:	e0d1      	b.n	800a942 <mode+0x2c2>
			case 4:
				LED(4);
 800a79e:	2004      	movs	r0, #4
 800a7a0:	f7ff fb22 	bl	8009de8 <LED>
				lcd_clear();
 800a7a4:	f7fe fdfc 	bl	80093a0 <lcd_clear>
				HAL_Delay(500);
 800a7a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a7ac:	f001 fd94 	bl	800c2d8 <HAL_Delay>
				Speedbuff = Speed;
 800a7b0:	4b67      	ldr	r3, [pc, #412]	; (800a950 <mode+0x2d0>)
 800a7b2:	881a      	ldrh	r2, [r3, #0]
 800a7b4:	4b67      	ldr	r3, [pc, #412]	; (800a954 <mode+0x2d4>)
 800a7b6:	801a      	strh	r2, [r3, #0]
				Speed =0;
 800a7b8:	4b65      	ldr	r3, [pc, #404]	; (800a950 <mode+0x2d0>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	801a      	strh	r2, [r3, #0]
				stop_flag=0;
 800a7be:	4b67      	ldr	r3, [pc, #412]	; (800a95c <mode+0x2dc>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
				stoping=20;
 800a7c4:	4b66      	ldr	r3, [pc, #408]	; (800a960 <mode+0x2e0>)
 800a7c6:	2214      	movs	r2, #20
 800a7c8:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 800a7ca:	4866      	ldr	r0, [pc, #408]	; (800a964 <mode+0x2e4>)
 800a7cc:	f005 f8cf 	bl	800f96e <HAL_TIM_Base_Start_IT>
				while(1){
					if(stop_flag>=2){
 800a7d0:	4b62      	ldr	r3, [pc, #392]	; (800a95c <mode+0x2dc>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d9fb      	bls.n	800a7d0 <mode+0x150>
						stop();
 800a7d8:	f7ff fbcc 	bl	8009f74 <stop>
						con=0;
 800a7dc:	4b62      	ldr	r3, [pc, #392]	; (800a968 <mode+0x2e8>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
						floag=0;
 800a7e2:	4b62      	ldr	r3, [pc, #392]	; (800a96c <mode+0x2ec>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	701a      	strb	r2, [r3, #0]
						stoping =0;
 800a7e8:	4b5d      	ldr	r3, [pc, #372]	; (800a960 <mode+0x2e0>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	801a      	strh	r2, [r3, #0]
						stop_flag=0;
 800a7ee:	4b5b      	ldr	r3, [pc, #364]	; (800a95c <mode+0x2dc>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
						break;
 800a7f4:	bf00      	nop
					}
				}
				 work_ram[32]=log_count;
 800a7f6:	4b5e      	ldr	r3, [pc, #376]	; (800a970 <mode+0x2f0>)
 800a7f8:	881a      	ldrh	r2, [r3, #0]
 800a7fa:	4b5e      	ldr	r3, [pc, #376]	; (800a974 <mode+0x2f4>)
 800a7fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				 Flash_store();
 800a800:	f7ff fa62 	bl	8009cc8 <Flash_store>
				Flash_store2();
 800a804:	f7ff faa6 	bl	8009d54 <Flash_store2>
				printf("%d\r\n",log_count);
 800a808:	4b59      	ldr	r3, [pc, #356]	; (800a970 <mode+0x2f0>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	4619      	mov	r1, r3
 800a80e:	485a      	ldr	r0, [pc, #360]	; (800a978 <mode+0x2f8>)
 800a810:	f007 fce6 	bl	80121e0 <iprintf>
				for(g=0;g<=10;g++){
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	e014      	b.n	800a844 <mode+0x1c4>
					LED(7);
 800a81a:	2007      	movs	r0, #7
 800a81c:	f7ff fae4 	bl	8009de8 <LED>
					printf("%lf\r\n",Driving_log[g]);
 800a820:	4a56      	ldr	r2, [pc, #344]	; (800a97c <mode+0x2fc>)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fd fdc4 	bl	80083b8 <__aeabi_f2d>
 800a830:	4603      	mov	r3, r0
 800a832:	460c      	mov	r4, r1
 800a834:	461a      	mov	r2, r3
 800a836:	4623      	mov	r3, r4
 800a838:	4851      	ldr	r0, [pc, #324]	; (800a980 <mode+0x300>)
 800a83a:	f007 fcd1 	bl	80121e0 <iprintf>
				for(g=0;g<=10;g++){
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	3301      	adds	r3, #1
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b0a      	cmp	r3, #10
 800a848:	dde7      	ble.n	800a81a <mode+0x19a>
				}
				log_count=0;
 800a84a:	4b49      	ldr	r3, [pc, #292]	; (800a970 <mode+0x2f0>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	801a      	strh	r2, [r3, #0]
				break;
 800a850:	e077      	b.n	800a942 <mode+0x2c2>
			case 5:
				LED(5);
 800a852:	2005      	movs	r0, #5
 800a854:	f7ff fac8 	bl	8009de8 <LED>
				lcd_clear();
 800a858:	f7fe fda2 	bl	80093a0 <lcd_clear>
				  Flash_load();
 800a85c:	f7ff fa14 	bl	8009c88 <Flash_load>
				  Flash_load2();
 800a860:	f7ff fa22 	bl	8009ca8 <Flash_load2>
				  printf("%d\n\r", work_ram[33]);
 800a864:	4b43      	ldr	r3, [pc, #268]	; (800a974 <mode+0x2f4>)
 800a866:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800a86a:	4619      	mov	r1, r3
 800a86c:	4845      	ldr	r0, [pc, #276]	; (800a984 <mode+0x304>)
 800a86e:	f007 fcb7 	bl	80121e0 <iprintf>
				 // printf("%d\r\n", work_ram[32] );
				  for(g=0;g<=work_ram[32];g++){
 800a872:	2300      	movs	r3, #0
 800a874:	603b      	str	r3, [r7, #0]
 800a876:	e020      	b.n	800a8ba <mode+0x23a>
					   printf("%lf,%lf\r\n", Driving_log[g],Driving_log[g+6100] );
 800a878:	4a40      	ldr	r2, [pc, #256]	; (800a97c <mode+0x2fc>)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f7fd fd98 	bl	80083b8 <__aeabi_f2d>
 800a888:	4605      	mov	r5, r0
 800a88a:	460e      	mov	r6, r1
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f503 53be 	add.w	r3, r3, #6080	; 0x17c0
 800a892:	3314      	adds	r3, #20
 800a894:	4a39      	ldr	r2, [pc, #228]	; (800a97c <mode+0x2fc>)
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fd fd8b 	bl	80083b8 <__aeabi_f2d>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	e9cd 3400 	strd	r3, r4, [sp]
 800a8aa:	462a      	mov	r2, r5
 800a8ac:	4633      	mov	r3, r6
 800a8ae:	4836      	ldr	r0, [pc, #216]	; (800a988 <mode+0x308>)
 800a8b0:	f007 fc96 	bl	80121e0 <iprintf>
				  for(g=0;g<=work_ram[32];g++){
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	603b      	str	r3, [r7, #0]
 800a8ba:	4b2e      	ldr	r3, [pc, #184]	; (800a974 <mode+0x2f4>)
 800a8bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	ddd7      	ble.n	800a878 <mode+0x1f8>
				  }
				  printf("%d\r\n", work_ram[32] );
 800a8c8:	4b2a      	ldr	r3, [pc, #168]	; (800a974 <mode+0x2f4>)
 800a8ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4829      	ldr	r0, [pc, #164]	; (800a978 <mode+0x2f8>)
 800a8d2:	f007 fc85 	bl	80121e0 <iprintf>
				HAL_Delay(500);
 800a8d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8da:	f001 fcfd 	bl	800c2d8 <HAL_Delay>
				break ;
 800a8de:	e030      	b.n	800a942 <mode+0x2c2>
			case 6:
				Flash_load();
 800a8e0:	f7ff f9d2 	bl	8009c88 <Flash_load>
				Flash_load2();
 800a8e4:	f7ff f9e0 	bl	8009ca8 <Flash_load2>
				HAL_Delay(500);
 800a8e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8ec:	f001 fcf4 	bl	800c2d8 <HAL_Delay>
				second=1;
 800a8f0:	4b26      	ldr	r3, [pc, #152]	; (800a98c <mode+0x30c>)
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	701a      	strb	r2, [r3, #0]
				log_count=0;
 800a8f6:	4b1e      	ldr	r3, [pc, #120]	; (800a970 <mode+0x2f0>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	801a      	strh	r2, [r3, #0]
				Speedbuff = Speed;
 800a8fc:	4b14      	ldr	r3, [pc, #80]	; (800a950 <mode+0x2d0>)
 800a8fe:	881a      	ldrh	r2, [r3, #0]
 800a900:	4b14      	ldr	r3, [pc, #80]	; (800a954 <mode+0x2d4>)
 800a902:	801a      	strh	r2, [r3, #0]
				Speed =0;
 800a904:	4b12      	ldr	r3, [pc, #72]	; (800a950 <mode+0x2d0>)
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
				stop_flag=0;
 800a90a:	4b14      	ldr	r3, [pc, #80]	; (800a95c <mode+0x2dc>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	701a      	strb	r2, [r3, #0]
				stoping=20;
 800a910:	4b13      	ldr	r3, [pc, #76]	; (800a960 <mode+0x2e0>)
 800a912:	2214      	movs	r2, #20
 800a914:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim6);
 800a916:	4813      	ldr	r0, [pc, #76]	; (800a964 <mode+0x2e4>)
 800a918:	f005 f829 	bl	800f96e <HAL_TIM_Base_Start_IT>
				while(1){
					if(stop_flag>=2){
 800a91c:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <mode+0x2dc>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d9fb      	bls.n	800a91c <mode+0x29c>
						stop();
 800a924:	f7ff fb26 	bl	8009f74 <stop>
						con=0;
 800a928:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <mode+0x2e8>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
						floag=0;
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <mode+0x2ec>)
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
						stoping =0;
 800a934:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <mode+0x2e0>)
 800a936:	2200      	movs	r2, #0
 800a938:	801a      	strh	r2, [r3, #0]
						stop_flag=0;
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <mode+0x2dc>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	701a      	strb	r2, [r3, #0]
						break;
 800a940:	bf00      	nop
		while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_1)){
 800a942:	e6d5      	b.n	800a6f0 <mode+0x70>
 800a944:	40020800 	.word	0x40020800
 800a948:	08015b1c 	.word	0x08015b1c
 800a94c:	08015b20 	.word	0x08015b20
 800a950:	20000000 	.word	0x20000000
 800a954:	200085dc 	.word	0x200085dc
 800a958:	08015b28 	.word	0x08015b28
 800a95c:	20000235 	.word	0x20000235
 800a960:	20000008 	.word	0x20000008
 800a964:	200003c0 	.word	0x200003c0
 800a968:	20000230 	.word	0x20000230
 800a96c:	20000234 	.word	0x20000234
 800a970:	20000232 	.word	0x20000232
 800a974:	200004e0 	.word	0x200004e0
 800a978:	08015b30 	.word	0x08015b30
 800a97c:	20008620 	.word	0x20008620
 800a980:	08015adc 	.word	0x08015adc
 800a984:	08015b38 	.word	0x08015b38
 800a988:	08015b40 	.word	0x08015b40
 800a98c:	20000236 	.word	0x20000236

0800a990 <HAL_TIM_PeriodElapsedCallback>:
				break;

		}
	}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	count++;
 800a998:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3301      	adds	r3, #1
 800a99e:	4a13      	ldr	r2, [pc, #76]	; (800a9ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800a9a0:	6013      	str	r3, [r2, #0]
	stoping++;
 800a9a2:	4b13      	ldr	r3, [pc, #76]	; (800a9f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	4b11      	ldr	r3, [pc, #68]	; (800a9f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800a9ac:	801a      	strh	r2, [r3, #0]
	sensGet();
 800a9ae:	f7fe fb77 	bl	80090a0 <sensGet>
	SpeedCtrl();
 800a9b2:	f7fe ffb9 	bl	8009928 <SpeedCtrl>
	sidemaker();
 800a9b6:	f7ff fd85 	bl	800a4c4 <sidemaker>
	ahs += calc_angle();
 800a9ba:	f7fe fe8d 	bl	80096d8 <calc_angle>
 800a9be:	eeb0 7a40 	vmov.f32	s14, s0
 800a9c2:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800a9c4:	edd3 7a00 	vldr	s15, [r3]
 800a9c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9cc:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800a9ce:	edc3 7a00 	vstr	s15, [r3]
	a++;
 800a9d2:	4b09      	ldr	r3, [pc, #36]	; (800a9f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800a9dc:	701a      	strb	r2, [r3, #0]
	driv_log();
 800a9de:	f7ff fdab 	bl	800a538 <driv_log>
	}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000004 	.word	0x20000004
 800a9f0:	20000008 	.word	0x20000008
 800a9f4:	20000484 	.word	0x20000484
 800a9f8:	20000237 	.word	0x20000237

0800a9fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aa00:	f001 fbf8 	bl	800c1f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aa04:	f000 f822 	bl	800aa4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aa08:	f000 fc26 	bl	800b258 <MX_GPIO_Init>
  MX_DMA_Init();
 800aa0c:	f000 fc04 	bl	800b218 <MX_DMA_Init>
  MX_ADC1_Init();
 800aa10:	f000 f886 	bl	800ab20 <MX_ADC1_Init>
  MX_I2C1_Init();
 800aa14:	f000 f97e 	bl	800ad14 <MX_I2C1_Init>
  MX_SPI3_Init();
 800aa18:	f000 f9aa 	bl	800ad70 <MX_SPI3_Init>
  MX_TIM1_Init();
 800aa1c:	f000 f9de 	bl	800addc <MX_TIM1_Init>
  MX_TIM3_Init();
 800aa20:	f000 fa34 	bl	800ae8c <MX_TIM3_Init>
  MX_TIM4_Init();
 800aa24:	f000 fa86 	bl	800af34 <MX_TIM4_Init>
  MX_TIM8_Init();
 800aa28:	f000 fb4a 	bl	800b0c0 <MX_TIM8_Init>
  MX_USART6_UART_Init();
 800aa2c:	f000 fbca 	bl	800b1c4 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800aa30:	f000 fada 	bl	800afe8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800aa34:	f000 fb0e 	bl	800b054 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  int g;
  init();
 800aa38:	f7ff fb2e 	bl	800a098 <init>



//  tuning();
  HAL_Delay(200);
 800aa3c:	20c8      	movs	r0, #200	; 0xc8
 800aa3e:	f001 fc4b 	bl	800c2d8 <HAL_Delay>
//
  IMU_init();
 800aa42:	f7fe fd5f 	bl	8009504 <IMU_init>

// off_angle();
//  ADCinit();


 mode();
 800aa46:	f7ff fe1b 	bl	800a680 <mode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1){
 800aa4a:	e7fe      	b.n	800aa4a <main+0x4e>

0800aa4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b094      	sub	sp, #80	; 0x50
 800aa50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aa52:	f107 0320 	add.w	r3, r7, #32
 800aa56:	2230      	movs	r2, #48	; 0x30
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f006 fd79 	bl	8011552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	609a      	str	r2, [r3, #8]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800aa70:	2300      	movs	r3, #0
 800aa72:	60bb      	str	r3, [r7, #8]
 800aa74:	4b28      	ldr	r3, [pc, #160]	; (800ab18 <SystemClock_Config+0xcc>)
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	4a27      	ldr	r2, [pc, #156]	; (800ab18 <SystemClock_Config+0xcc>)
 800aa7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa7e:	6413      	str	r3, [r2, #64]	; 0x40
 800aa80:	4b25      	ldr	r3, [pc, #148]	; (800ab18 <SystemClock_Config+0xcc>)
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa88:	60bb      	str	r3, [r7, #8]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	607b      	str	r3, [r7, #4]
 800aa90:	4b22      	ldr	r3, [pc, #136]	; (800ab1c <SystemClock_Config+0xd0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a21      	ldr	r2, [pc, #132]	; (800ab1c <SystemClock_Config+0xd0>)
 800aa96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	4b1f      	ldr	r3, [pc, #124]	; (800ab1c <SystemClock_Config+0xd0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800aaac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800aab2:	2302      	movs	r3, #2
 800aab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800aabc:	2306      	movs	r3, #6
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800aac0:	23a8      	movs	r3, #168	; 0xa8
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800aac4:	2302      	movs	r3, #2
 800aac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800aac8:	2304      	movs	r3, #4
 800aaca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aacc:	f107 0320 	add.w	r3, r7, #32
 800aad0:	4618      	mov	r0, r3
 800aad2:	f003 fd91 	bl	800e5f8 <HAL_RCC_OscConfig>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800aadc:	f000 fc80 	bl	800b3e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aae0:	230f      	movs	r3, #15
 800aae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aae4:	2302      	movs	r3, #2
 800aae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800aaec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800aaf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800aaf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800aaf8:	f107 030c 	add.w	r3, r7, #12
 800aafc:	2105      	movs	r1, #5
 800aafe:	4618      	mov	r0, r3
 800ab00:	f003 ffea 	bl	800ead8 <HAL_RCC_ClockConfig>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ab0a:	f000 fc69 	bl	800b3e0 <Error_Handler>
  }
}
 800ab0e:	bf00      	nop
 800ab10:	3750      	adds	r7, #80	; 0x50
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40023800 	.word	0x40023800
 800ab1c:	40007000 	.word	0x40007000

0800ab20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ab26:	463b      	mov	r3, r7
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ab32:	4b75      	ldr	r3, [pc, #468]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab34:	4a75      	ldr	r2, [pc, #468]	; (800ad0c <MX_ADC1_Init+0x1ec>)
 800ab36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ab38:	4b73      	ldr	r3, [pc, #460]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ab40:	4b71      	ldr	r3, [pc, #452]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ab46:	4b70      	ldr	r3, [pc, #448]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab48:	2201      	movs	r2, #1
 800ab4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ab4c:	4b6e      	ldr	r3, [pc, #440]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ab52:	4b6d      	ldr	r3, [pc, #436]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ab5a:	4b6b      	ldr	r3, [pc, #428]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ab60:	4b69      	ldr	r3, [pc, #420]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab62:	4a6b      	ldr	r2, [pc, #428]	; (800ad10 <MX_ADC1_Init+0x1f0>)
 800ab64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ab66:	4b68      	ldr	r3, [pc, #416]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 800ab6c:	4b66      	ldr	r3, [pc, #408]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab6e:	220d      	movs	r2, #13
 800ab70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800ab72:	4b65      	ldr	r3, [pc, #404]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ab7a:	4b63      	ldr	r3, [pc, #396]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ab80:	4861      	ldr	r0, [pc, #388]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ab82:	f001 fbcb 	bl	800c31c <HAL_ADC_Init>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ab8c:	f000 fc28 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800ab90:	2309      	movs	r3, #9
 800ab92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ab94:	2301      	movs	r3, #1
 800ab96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800ab98:	2307      	movs	r3, #7
 800ab9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ab9c:	463b      	mov	r3, r7
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4859      	ldr	r0, [pc, #356]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800aba2:	f001 fd05 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800abac:	f000 fc18 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800abb0:	2308      	movs	r3, #8
 800abb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800abb4:	2302      	movs	r3, #2
 800abb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800abb8:	463b      	mov	r3, r7
 800abba:	4619      	mov	r1, r3
 800abbc:	4852      	ldr	r0, [pc, #328]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800abbe:	f001 fcf7 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800abc8:	f000 fc0a 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800abcc:	230f      	movs	r3, #15
 800abce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800abd0:	2303      	movs	r3, #3
 800abd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800abd4:	463b      	mov	r3, r7
 800abd6:	4619      	mov	r1, r3
 800abd8:	484b      	ldr	r0, [pc, #300]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800abda:	f001 fce9 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800abe4:	f000 fbfc 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800abe8:	230e      	movs	r3, #14
 800abea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800abec:	2304      	movs	r3, #4
 800abee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800abf0:	463b      	mov	r3, r7
 800abf2:	4619      	mov	r1, r3
 800abf4:	4844      	ldr	r0, [pc, #272]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800abf6:	f001 fcdb 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800ac00:	f000 fbee 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800ac04:	2307      	movs	r3, #7
 800ac06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800ac08:	2305      	movs	r3, #5
 800ac0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4619      	mov	r1, r3
 800ac10:	483d      	ldr	r0, [pc, #244]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac12:	f001 fccd 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800ac1c:	f000 fbe0 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800ac20:	2306      	movs	r3, #6
 800ac22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800ac24:	2306      	movs	r3, #6
 800ac26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac28:	463b      	mov	r3, r7
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4836      	ldr	r0, [pc, #216]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac2e:	f001 fcbf 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800ac38:	f000 fbd2 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800ac3c:	2305      	movs	r3, #5
 800ac3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800ac40:	2307      	movs	r3, #7
 800ac42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac44:	463b      	mov	r3, r7
 800ac46:	4619      	mov	r1, r3
 800ac48:	482f      	ldr	r0, [pc, #188]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac4a:	f001 fcb1 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800ac54:	f000 fbc4 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ac58:	2304      	movs	r3, #4
 800ac5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac60:	463b      	mov	r3, r7
 800ac62:	4619      	mov	r1, r3
 800ac64:	4828      	ldr	r0, [pc, #160]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac66:	f001 fca3 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800ac70:	f000 fbb6 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800ac74:	2303      	movs	r3, #3
 800ac76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800ac78:	2309      	movs	r3, #9
 800ac7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac7c:	463b      	mov	r3, r7
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4821      	ldr	r0, [pc, #132]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac82:	f001 fc95 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800ac8c:	f000 fba8 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800ac90:	2302      	movs	r3, #2
 800ac92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800ac94:	230a      	movs	r3, #10
 800ac96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ac98:	463b      	mov	r3, r7
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	481a      	ldr	r0, [pc, #104]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800ac9e:	f001 fc87 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800aca8:	f000 fb9a 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800acac:	2301      	movs	r3, #1
 800acae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800acb0:	230b      	movs	r3, #11
 800acb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acb4:	463b      	mov	r3, r7
 800acb6:	4619      	mov	r1, r3
 800acb8:	4813      	ldr	r0, [pc, #76]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800acba:	f001 fc79 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800acc4:	f000 fb8c 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800acc8:	2300      	movs	r3, #0
 800acca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800accc:	230c      	movs	r3, #12
 800acce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acd0:	463b      	mov	r3, r7
 800acd2:	4619      	mov	r1, r3
 800acd4:	480c      	ldr	r0, [pc, #48]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800acd6:	f001 fc6b 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 800ace0:	f000 fb7e 	bl	800b3e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800ace4:	230d      	movs	r3, #13
 800ace6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800ace8:	230d      	movs	r3, #13
 800acea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800acec:	463b      	mov	r3, r7
 800acee:	4619      	mov	r1, r3
 800acf0:	4805      	ldr	r0, [pc, #20]	; (800ad08 <MX_ADC1_Init+0x1e8>)
 800acf2:	f001 fc5d 	bl	800c5b0 <HAL_ADC_ConfigChannel>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800acfc:	f000 fb70 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000318 	.word	0x20000318
 800ad0c:	40012000 	.word	0x40012000
 800ad10:	0f000001 	.word	0x0f000001

0800ad14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ad18:	4b12      	ldr	r3, [pc, #72]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad1a:	4a13      	ldr	r2, [pc, #76]	; (800ad68 <MX_I2C1_Init+0x54>)
 800ad1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800ad1e:	4b11      	ldr	r3, [pc, #68]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad20:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <MX_I2C1_Init+0x58>)
 800ad22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800ad24:	4b0f      	ldr	r3, [pc, #60]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ad2a:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ad30:	4b0c      	ldr	r3, [pc, #48]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ad36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ad3e:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ad44:	4b07      	ldr	r3, [pc, #28]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ad4a:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ad50:	4804      	ldr	r0, [pc, #16]	; (800ad64 <MX_I2C1_Init+0x50>)
 800ad52:	f003 f811 	bl	800dd78 <HAL_I2C_Init>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ad5c:	f000 fb40 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ad60:	bf00      	nop
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	2000048c 	.word	0x2000048c
 800ad68:	40005400 	.word	0x40005400
 800ad6c:	000186a0 	.word	0x000186a0

0800ad70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <MX_SPI3_Init+0x68>)
 800ad78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ad7a:	4b16      	ldr	r3, [pc, #88]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ad80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ad94:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <MX_SPI3_Init+0x64>)
 800ad9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ada2:	4b0c      	ldr	r3, [pc, #48]	; (800add4 <MX_SPI3_Init+0x64>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <MX_SPI3_Init+0x64>)
 800adaa:	2200      	movs	r2, #0
 800adac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <MX_SPI3_Init+0x64>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <MX_SPI3_Init+0x64>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800adba:	4b06      	ldr	r3, [pc, #24]	; (800add4 <MX_SPI3_Init+0x64>)
 800adbc:	220a      	movs	r2, #10
 800adbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800adc0:	4804      	ldr	r0, [pc, #16]	; (800add4 <MX_SPI3_Init+0x64>)
 800adc2:	f004 f855 	bl	800ee70 <HAL_SPI_Init>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800adcc:	f000 fb08 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800add0:	bf00      	nop
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200084e0 	.word	0x200084e0
 800add8:	40003c00 	.word	0x40003c00

0800addc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08c      	sub	sp, #48	; 0x30
 800ade0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ade2:	f107 030c 	add.w	r3, r7, #12
 800ade6:	2224      	movs	r2, #36	; 0x24
 800ade8:	2100      	movs	r1, #0
 800adea:	4618      	mov	r0, r3
 800adec:	f006 fbb1 	bl	8011552 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800adf0:	1d3b      	adds	r3, r7, #4
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800adf8:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800adfa:	4a23      	ldr	r2, [pc, #140]	; (800ae88 <MX_TIM1_Init+0xac>)
 800adfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800adfe:	4b21      	ldr	r3, [pc, #132]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800ae04:	4b1f      	ldr	r3, [pc, #124]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae06:	2210      	movs	r2, #16
 800ae08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800ae0a:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ae18:	4b1a      	ldr	r3, [pc, #104]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae1e:	4b19      	ldr	r3, [pc, #100]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800ae24:	2303      	movs	r3, #3
 800ae26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ae30:	2300      	movs	r3, #0
 800ae32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ae40:	2300      	movs	r3, #0
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	480d      	ldr	r0, [pc, #52]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae50:	f004 fe46 	bl	800fae0 <HAL_TIM_Encoder_Init>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800ae5a:	f000 fac1 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ae66:	1d3b      	adds	r3, r7, #4
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4806      	ldr	r0, [pc, #24]	; (800ae84 <MX_TIM1_Init+0xa8>)
 800ae6c:	f005 fb6e 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800ae76:	f000 fab3 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ae7a:	bf00      	nop
 800ae7c:	3730      	adds	r7, #48	; 0x30
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000400 	.word	0x20000400
 800ae88:	40010000 	.word	0x40010000

0800ae8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08c      	sub	sp, #48	; 0x30
 800ae90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ae92:	f107 030c 	add.w	r3, r7, #12
 800ae96:	2224      	movs	r2, #36	; 0x24
 800ae98:	2100      	movs	r1, #0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f006 fb59 	bl	8011552 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aea0:	1d3b      	adds	r3, r7, #4
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800aea8:	4b20      	ldr	r3, [pc, #128]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aeaa:	4a21      	ldr	r2, [pc, #132]	; (800af30 <MX_TIM3_Init+0xa4>)
 800aeac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800aeae:	4b1f      	ldr	r3, [pc, #124]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aeb4:	4b1d      	ldr	r3, [pc, #116]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800aeba:	4b1c      	ldr	r3, [pc, #112]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aec2:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aec8:	4b18      	ldr	r3, [pc, #96]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800aece:	2303      	movs	r3, #3
 800aed0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800aed6:	2301      	movs	r3, #1
 800aed8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aee2:	2300      	movs	r3, #0
 800aee4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aee6:	2301      	movs	r3, #1
 800aee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aeea:	2300      	movs	r3, #0
 800aeec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800aef2:	f107 030c 	add.w	r3, r7, #12
 800aef6:	4619      	mov	r1, r3
 800aef8:	480c      	ldr	r0, [pc, #48]	; (800af2c <MX_TIM3_Init+0xa0>)
 800aefa:	f004 fdf1 	bl	800fae0 <HAL_TIM_Encoder_Init>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800af04:	f000 fa6c 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af08:	2300      	movs	r3, #0
 800af0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800af10:	1d3b      	adds	r3, r7, #4
 800af12:	4619      	mov	r1, r3
 800af14:	4805      	ldr	r0, [pc, #20]	; (800af2c <MX_TIM3_Init+0xa0>)
 800af16:	f005 fb19 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800af20:	f000 fa5e 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800af24:	bf00      	nop
 800af26:	3730      	adds	r7, #48	; 0x30
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	200002d8 	.word	0x200002d8
 800af30:	40000400 	.word	0x40000400

0800af34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af3a:	f107 0320 	add.w	r3, r7, #32
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af44:	1d3b      	adds	r3, r7, #4
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	605a      	str	r2, [r3, #4]
 800af4c:	609a      	str	r2, [r3, #8]
 800af4e:	60da      	str	r2, [r3, #12]
 800af50:	611a      	str	r2, [r3, #16]
 800af52:	615a      	str	r2, [r3, #20]
 800af54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800af56:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af58:	4a22      	ldr	r2, [pc, #136]	; (800afe4 <MX_TIM4_Init+0xb0>)
 800af5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800af5c:	4b20      	ldr	r3, [pc, #128]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af5e:	2200      	movs	r2, #0
 800af60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af62:	4b1f      	ldr	r3, [pc, #124]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af64:	2200      	movs	r2, #0
 800af66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800af68:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af6a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800af6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af70:	4b1b      	ldr	r3, [pc, #108]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af72:	2200      	movs	r2, #0
 800af74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af76:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af78:	2200      	movs	r2, #0
 800af7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800af7c:	4818      	ldr	r0, [pc, #96]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af7e:	f004 fd45 	bl	800fa0c <HAL_TIM_PWM_Init>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800af88:	f000 fa2a 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af8c:	2300      	movs	r3, #0
 800af8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af90:	2300      	movs	r3, #0
 800af92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800af94:	f107 0320 	add.w	r3, r7, #32
 800af98:	4619      	mov	r1, r3
 800af9a:	4811      	ldr	r0, [pc, #68]	; (800afe0 <MX_TIM4_Init+0xac>)
 800af9c:	f005 fad6 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800afa6:	f000 fa1b 	bl	800b3e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afaa:	2360      	movs	r3, #96	; 0x60
 800afac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800afba:	1d3b      	adds	r3, r7, #4
 800afbc:	2204      	movs	r2, #4
 800afbe:	4619      	mov	r1, r3
 800afc0:	4807      	ldr	r0, [pc, #28]	; (800afe0 <MX_TIM4_Init+0xac>)
 800afc2:	f004 ff5f 	bl	800fe84 <HAL_TIM_PWM_ConfigChannel>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800afcc:	f000 fa08 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800afd0:	4803      	ldr	r0, [pc, #12]	; (800afe0 <MX_TIM4_Init+0xac>)
 800afd2:	f000 fc4f 	bl	800b874 <HAL_TIM_MspPostInit>

}
 800afd6:	bf00      	nop
 800afd8:	3728      	adds	r7, #40	; 0x28
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000298 	.word	0x20000298
 800afe4:	40000800 	.word	0x40000800

0800afe8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afee:	463b      	mov	r3, r7
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800aff6:	4b15      	ldr	r3, [pc, #84]	; (800b04c <MX_TIM6_Init+0x64>)
 800aff8:	4a15      	ldr	r2, [pc, #84]	; (800b050 <MX_TIM6_Init+0x68>)
 800affa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800affc:	4b13      	ldr	r3, [pc, #76]	; (800b04c <MX_TIM6_Init+0x64>)
 800affe:	2253      	movs	r2, #83	; 0x53
 800b000:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b002:	4b12      	ldr	r3, [pc, #72]	; (800b04c <MX_TIM6_Init+0x64>)
 800b004:	2200      	movs	r2, #0
 800b006:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800b008:	4b10      	ldr	r3, [pc, #64]	; (800b04c <MX_TIM6_Init+0x64>)
 800b00a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b00e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <MX_TIM6_Init+0x64>)
 800b012:	2200      	movs	r2, #0
 800b014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b016:	480d      	ldr	r0, [pc, #52]	; (800b04c <MX_TIM6_Init+0x64>)
 800b018:	f004 fc7e 	bl	800f918 <HAL_TIM_Base_Init>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800b022:	f000 f9dd 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b026:	2300      	movs	r3, #0
 800b028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b02e:	463b      	mov	r3, r7
 800b030:	4619      	mov	r1, r3
 800b032:	4806      	ldr	r0, [pc, #24]	; (800b04c <MX_TIM6_Init+0x64>)
 800b034:	f005 fa8a 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800b03e:	f000 f9cf 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200003c0 	.word	0x200003c0
 800b050:	40001000 	.word	0x40001000

0800b054 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b05a:	463b      	mov	r3, r7
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800b062:	4b15      	ldr	r3, [pc, #84]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b064:	4a15      	ldr	r2, [pc, #84]	; (800b0bc <MX_TIM7_Init+0x68>)
 800b066:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b06e:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b070:	2200      	movs	r2, #0
 800b072:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800b074:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b07e:	2200      	movs	r2, #0
 800b080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b082:	480d      	ldr	r0, [pc, #52]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b084:	f004 fc48 	bl	800f918 <HAL_TIM_Base_Init>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800b08e:	f000 f9a7 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b092:	2300      	movs	r3, #0
 800b094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b09a:	463b      	mov	r3, r7
 800b09c:	4619      	mov	r1, r3
 800b09e:	4806      	ldr	r0, [pc, #24]	; (800b0b8 <MX_TIM7_Init+0x64>)
 800b0a0:	f005 fa54 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800b0aa:	f000 f999 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200085e0 	.word	0x200085e0
 800b0bc:	40001400 	.word	0x40001400

0800b0c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b092      	sub	sp, #72	; 0x48
 800b0c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b0d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	609a      	str	r2, [r3, #8]
 800b0dc:	60da      	str	r2, [r3, #12]
 800b0de:	611a      	str	r2, [r3, #16]
 800b0e0:	615a      	str	r2, [r3, #20]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b0e4:	1d3b      	adds	r3, r7, #4
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f006 fa31 	bl	8011552 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b0f0:	4b32      	ldr	r3, [pc, #200]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b0f2:	4a33      	ldr	r2, [pc, #204]	; (800b1c0 <MX_TIM8_Init+0x100>)
 800b0f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800b0f6:	4b31      	ldr	r3, [pc, #196]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0fc:	4b2f      	ldr	r3, [pc, #188]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1800;
 800b102:	4b2e      	ldr	r3, [pc, #184]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b104:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800b108:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b10a:	4b2c      	ldr	r3, [pc, #176]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b110:	4b2a      	ldr	r3, [pc, #168]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b112:	2200      	movs	r2, #0
 800b114:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b116:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b118:	2200      	movs	r2, #0
 800b11a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800b11c:	4827      	ldr	r0, [pc, #156]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b11e:	f004 fc75 	bl	800fa0c <HAL_TIM_PWM_Init>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800b128:	f000 f95a 	bl	800b3e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b12c:	2300      	movs	r3, #0
 800b12e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b130:	2300      	movs	r3, #0
 800b132:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b138:	4619      	mov	r1, r3
 800b13a:	4820      	ldr	r0, [pc, #128]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b13c:	f005 fa06 	bl	801054c <HAL_TIMEx_MasterConfigSynchronization>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d001      	beq.n	800b14a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800b146:	f000 f94b 	bl	800b3e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b14a:	2360      	movs	r3, #96	; 0x60
 800b14c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b152:	2300      	movs	r3, #0
 800b154:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b156:	2300      	movs	r3, #0
 800b158:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b15a:	2300      	movs	r3, #0
 800b15c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b15e:	2300      	movs	r3, #0
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b166:	220c      	movs	r2, #12
 800b168:	4619      	mov	r1, r3
 800b16a:	4814      	ldr	r0, [pc, #80]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b16c:	f004 fe8a 	bl	800fe84 <HAL_TIM_PWM_ConfigChannel>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <MX_TIM8_Init+0xba>
  {
    Error_Handler();
 800b176:	f000 f933 	bl	800b3e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b17e:	2300      	movs	r3, #0
 800b180:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b18e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b192:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b194:	2300      	movs	r3, #0
 800b196:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800b198:	1d3b      	adds	r3, r7, #4
 800b19a:	4619      	mov	r1, r3
 800b19c:	4807      	ldr	r0, [pc, #28]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b19e:	f005 fa51 	bl	8010644 <HAL_TIMEx_ConfigBreakDeadTime>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 800b1a8:	f000 f91a 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800b1ac:	4803      	ldr	r0, [pc, #12]	; (800b1bc <MX_TIM8_Init+0xfc>)
 800b1ae:	f000 fb61 	bl	800b874 <HAL_TIM_MspPostInit>

}
 800b1b2:	bf00      	nop
 800b1b4:	3748      	adds	r7, #72	; 0x48
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000258 	.word	0x20000258
 800b1c0:	40010400 	.word	0x40010400

0800b1c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1ca:	4a12      	ldr	r2, [pc, #72]	; (800b214 <MX_USART6_UART_Init+0x50>)
 800b1cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800b1ce:	4b10      	ldr	r3, [pc, #64]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b1d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800b1d6:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800b1e2:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800b1e8:	4b09      	ldr	r3, [pc, #36]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1ea:	220c      	movs	r2, #12
 800b1ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1ee:	4b08      	ldr	r3, [pc, #32]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800b1fa:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_USART6_UART_Init+0x4c>)
 800b1fc:	f005 fa88 	bl	8010710 <HAL_UART_Init>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800b206:	f000 f8eb 	bl	800b3e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	2000859c 	.word	0x2000859c
 800b214:	40011400 	.word	0x40011400

0800b218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b21e:	2300      	movs	r3, #0
 800b220:	607b      	str	r3, [r7, #4]
 800b222:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <MX_DMA_Init+0x3c>)
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	4a0b      	ldr	r2, [pc, #44]	; (800b254 <MX_DMA_Init+0x3c>)
 800b228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b22c:	6313      	str	r3, [r2, #48]	; 0x30
 800b22e:	4b09      	ldr	r3, [pc, #36]	; (800b254 <MX_DMA_Init+0x3c>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800b23a:	2200      	movs	r2, #0
 800b23c:	2100      	movs	r1, #0
 800b23e:	2038      	movs	r0, #56	; 0x38
 800b240:	f001 fd31 	bl	800cca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b244:	2038      	movs	r0, #56	; 0x38
 800b246:	f001 fd4a 	bl	800ccde <HAL_NVIC_EnableIRQ>

}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	40023800 	.word	0x40023800

0800b258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	; 0x28
 800b25c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b25e:	f107 0314 	add.w	r3, r7, #20
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	605a      	str	r2, [r3, #4]
 800b268:	609a      	str	r2, [r3, #8]
 800b26a:	60da      	str	r2, [r3, #12]
 800b26c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b26e:	2300      	movs	r3, #0
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	4b56      	ldr	r3, [pc, #344]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b276:	4a55      	ldr	r2, [pc, #340]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b278:	f043 0304 	orr.w	r3, r3, #4
 800b27c:	6313      	str	r3, [r2, #48]	; 0x30
 800b27e:	4b53      	ldr	r3, [pc, #332]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	613b      	str	r3, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	4b4f      	ldr	r3, [pc, #316]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	4a4e      	ldr	r2, [pc, #312]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	6313      	str	r3, [r2, #48]	; 0x30
 800b29a:	4b4c      	ldr	r3, [pc, #304]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60bb      	str	r3, [r7, #8]
 800b2aa:	4b48      	ldr	r3, [pc, #288]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ae:	4a47      	ldr	r2, [pc, #284]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2b0:	f043 0301 	orr.w	r3, r3, #1
 800b2b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b6:	4b45      	ldr	r3, [pc, #276]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	60bb      	str	r3, [r7, #8]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	607b      	str	r3, [r7, #4]
 800b2c6:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ca:	4a40      	ldr	r2, [pc, #256]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2cc:	f043 0302 	orr.w	r3, r3, #2
 800b2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2d2:	4b3e      	ldr	r3, [pc, #248]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2de:	2300      	movs	r3, #0
 800b2e0:	603b      	str	r3, [r7, #0]
 800b2e2:	4b3a      	ldr	r3, [pc, #232]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e6:	4a39      	ldr	r2, [pc, #228]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2e8:	f043 0308 	orr.w	r3, r3, #8
 800b2ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ee:	4b37      	ldr	r3, [pc, #220]	; (800b3cc <MX_GPIO_Init+0x174>)
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f247 0140 	movw	r1, #28736	; 0x7040
 800b300:	4833      	ldr	r0, [pc, #204]	; (800b3d0 <MX_GPIO_Init+0x178>)
 800b302:	f002 fd1f 	bl	800dd44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800b306:	2200      	movs	r2, #0
 800b308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b30c:	4831      	ldr	r0, [pc, #196]	; (800b3d4 <MX_GPIO_Init+0x17c>)
 800b30e:	f002 fd19 	bl	800dd44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800b312:	2200      	movs	r2, #0
 800b314:	2104      	movs	r1, #4
 800b316:	4830      	ldr	r0, [pc, #192]	; (800b3d8 <MX_GPIO_Init+0x180>)
 800b318:	f002 fd14 	bl	800dd44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800b31c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b322:	2300      	movs	r3, #0
 800b324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b326:	2300      	movs	r3, #0
 800b328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b32a:	f107 0314 	add.w	r3, r7, #20
 800b32e:	4619      	mov	r1, r3
 800b330:	482a      	ldr	r0, [pc, #168]	; (800b3dc <MX_GPIO_Init+0x184>)
 800b332:	f002 fb55 	bl	800d9e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800b336:	f248 0307 	movw	r3, #32775	; 0x8007
 800b33a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b340:	2301      	movs	r3, #1
 800b342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b344:	f107 0314 	add.w	r3, r7, #20
 800b348:	4619      	mov	r1, r3
 800b34a:	4824      	ldr	r0, [pc, #144]	; (800b3dc <MX_GPIO_Init+0x184>)
 800b34c:	f002 fb48 	bl	800d9e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800b350:	f240 4304 	movw	r3, #1028	; 0x404
 800b354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b356:	2300      	movs	r3, #0
 800b358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b35e:	f107 0314 	add.w	r3, r7, #20
 800b362:	4619      	mov	r1, r3
 800b364:	481a      	ldr	r0, [pc, #104]	; (800b3d0 <MX_GPIO_Init+0x178>)
 800b366:	f002 fb3b 	bl	800d9e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6;
 800b36a:	f247 0340 	movw	r3, #28736	; 0x7040
 800b36e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b370:	2301      	movs	r3, #1
 800b372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b374:	2300      	movs	r3, #0
 800b376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b378:	2300      	movs	r3, #0
 800b37a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b37c:	f107 0314 	add.w	r3, r7, #20
 800b380:	4619      	mov	r1, r3
 800b382:	4813      	ldr	r0, [pc, #76]	; (800b3d0 <MX_GPIO_Init+0x178>)
 800b384:	f002 fb2c 	bl	800d9e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800b388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b38c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b38e:	2301      	movs	r3, #1
 800b390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b392:	2300      	movs	r3, #0
 800b394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b396:	2300      	movs	r3, #0
 800b398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b39a:	f107 0314 	add.w	r3, r7, #20
 800b39e:	4619      	mov	r1, r3
 800b3a0:	480c      	ldr	r0, [pc, #48]	; (800b3d4 <MX_GPIO_Init+0x17c>)
 800b3a2:	f002 fb1d 	bl	800d9e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b3a6:	2304      	movs	r3, #4
 800b3a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b3b6:	f107 0314 	add.w	r3, r7, #20
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4806      	ldr	r0, [pc, #24]	; (800b3d8 <MX_GPIO_Init+0x180>)
 800b3be:	f002 fb0f 	bl	800d9e0 <HAL_GPIO_Init>

}
 800b3c2:	bf00      	nop
 800b3c4:	3728      	adds	r7, #40	; 0x28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	40023800 	.word	0x40023800
 800b3d0:	40020400 	.word	0x40020400
 800b3d4:	40020000 	.word	0x40020000
 800b3d8:	40020c00 	.word	0x40020c00
 800b3dc:	40020800 	.word	0x40020800

0800b3e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b3e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b3e6:	e7fe      	b.n	800b3e6 <Error_Handler+0x6>

0800b3e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	607b      	str	r3, [r7, #4]
 800b3f2:	4b10      	ldr	r3, [pc, #64]	; (800b434 <HAL_MspInit+0x4c>)
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	4a0f      	ldr	r2, [pc, #60]	; (800b434 <HAL_MspInit+0x4c>)
 800b3f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3fc:	6453      	str	r3, [r2, #68]	; 0x44
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <HAL_MspInit+0x4c>)
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b406:	607b      	str	r3, [r7, #4]
 800b408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b40a:	2300      	movs	r3, #0
 800b40c:	603b      	str	r3, [r7, #0]
 800b40e:	4b09      	ldr	r3, [pc, #36]	; (800b434 <HAL_MspInit+0x4c>)
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	4a08      	ldr	r2, [pc, #32]	; (800b434 <HAL_MspInit+0x4c>)
 800b414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b418:	6413      	str	r3, [r2, #64]	; 0x40
 800b41a:	4b06      	ldr	r3, [pc, #24]	; (800b434 <HAL_MspInit+0x4c>)
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b422:	603b      	str	r3, [r7, #0]
 800b424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	40023800 	.word	0x40023800

0800b438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08c      	sub	sp, #48	; 0x30
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b440:	f107 031c 	add.w	r3, r7, #28
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	605a      	str	r2, [r3, #4]
 800b44a:	609a      	str	r2, [r3, #8]
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a49      	ldr	r2, [pc, #292]	; (800b57c <HAL_ADC_MspInit+0x144>)
 800b456:	4293      	cmp	r3, r2
 800b458:	f040 808c 	bne.w	800b574 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b45c:	2300      	movs	r3, #0
 800b45e:	61bb      	str	r3, [r7, #24]
 800b460:	4b47      	ldr	r3, [pc, #284]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b464:	4a46      	ldr	r2, [pc, #280]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46a:	6453      	str	r3, [r2, #68]	; 0x44
 800b46c:	4b44      	ldr	r3, [pc, #272]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	4b40      	ldr	r3, [pc, #256]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b480:	4a3f      	ldr	r2, [pc, #252]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b482:	f043 0304 	orr.w	r3, r3, #4
 800b486:	6313      	str	r3, [r2, #48]	; 0x30
 800b488:	4b3d      	ldr	r3, [pc, #244]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b494:	2300      	movs	r3, #0
 800b496:	613b      	str	r3, [r7, #16]
 800b498:	4b39      	ldr	r3, [pc, #228]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49c:	4a38      	ldr	r2, [pc, #224]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b49e:	f043 0301 	orr.w	r3, r3, #1
 800b4a2:	6313      	str	r3, [r2, #48]	; 0x30
 800b4a4:	4b36      	ldr	r3, [pc, #216]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	613b      	str	r3, [r7, #16]
 800b4ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	4b32      	ldr	r3, [pc, #200]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b8:	4a31      	ldr	r2, [pc, #196]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b4ba:	f043 0302 	orr.w	r3, r3, #2
 800b4be:	6313      	str	r3, [r2, #48]	; 0x30
 800b4c0:	4b2f      	ldr	r3, [pc, #188]	; (800b580 <HAL_ADC_MspInit+0x148>)
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800b4cc:	2338      	movs	r3, #56	; 0x38
 800b4ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4d8:	f107 031c 	add.w	r3, r7, #28
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4829      	ldr	r0, [pc, #164]	; (800b584 <HAL_ADC_MspInit+0x14c>)
 800b4e0:	f002 fa7e 	bl	800d9e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800b4e4:	23ff      	movs	r3, #255	; 0xff
 800b4e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4f0:	f107 031c 	add.w	r3, r7, #28
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4824      	ldr	r0, [pc, #144]	; (800b588 <HAL_ADC_MspInit+0x150>)
 800b4f8:	f002 fa72 	bl	800d9e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b500:	2303      	movs	r3, #3
 800b502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b504:	2300      	movs	r3, #0
 800b506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b508:	f107 031c 	add.w	r3, r7, #28
 800b50c:	4619      	mov	r1, r3
 800b50e:	481f      	ldr	r0, [pc, #124]	; (800b58c <HAL_ADC_MspInit+0x154>)
 800b510:	f002 fa66 	bl	800d9e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800b514:	4b1e      	ldr	r3, [pc, #120]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b516:	4a1f      	ldr	r2, [pc, #124]	; (800b594 <HAL_ADC_MspInit+0x15c>)
 800b518:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800b51a:	4b1d      	ldr	r3, [pc, #116]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b520:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b522:	2200      	movs	r2, #0
 800b524:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800b526:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b528:	2200      	movs	r2, #0
 800b52a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800b52c:	4b18      	ldr	r3, [pc, #96]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b52e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b532:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b534:	4b16      	ldr	r3, [pc, #88]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b53a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b53c:	4b14      	ldr	r3, [pc, #80]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b53e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b542:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800b544:	4b12      	ldr	r3, [pc, #72]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b54a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800b54c:	4b10      	ldr	r3, [pc, #64]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b54e:	2200      	movs	r2, #0
 800b550:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b554:	2200      	movs	r2, #0
 800b556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800b558:	480d      	ldr	r0, [pc, #52]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b55a:	f001 fbdb 	bl	800cd14 <HAL_DMA_Init>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800b564:	f7ff ff3c 	bl	800b3e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a09      	ldr	r2, [pc, #36]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b56c:	639a      	str	r2, [r3, #56]	; 0x38
 800b56e:	4a08      	ldr	r2, [pc, #32]	; (800b590 <HAL_ADC_MspInit+0x158>)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b574:	bf00      	nop
 800b576:	3730      	adds	r7, #48	; 0x30
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	40012000 	.word	0x40012000
 800b580:	40023800 	.word	0x40023800
 800b584:	40020800 	.word	0x40020800
 800b588:	40020000 	.word	0x40020000
 800b58c:	40020400 	.word	0x40020400
 800b590:	20000360 	.word	0x20000360
 800b594:	40026410 	.word	0x40026410

0800b598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08a      	sub	sp, #40	; 0x28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5a0:	f107 0314 	add.w	r3, r7, #20
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	605a      	str	r2, [r3, #4]
 800b5aa:	609a      	str	r2, [r3, #8]
 800b5ac:	60da      	str	r2, [r3, #12]
 800b5ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a19      	ldr	r2, [pc, #100]	; (800b61c <HAL_I2C_MspInit+0x84>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d12c      	bne.n	800b614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	4b18      	ldr	r3, [pc, #96]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c2:	4a17      	ldr	r2, [pc, #92]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b5c4:	f043 0302 	orr.w	r3, r3, #2
 800b5c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ca:	4b15      	ldr	r3, [pc, #84]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b5d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b5da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b5dc:	2312      	movs	r3, #18
 800b5de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5ec:	f107 0314 	add.w	r3, r7, #20
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	480c      	ldr	r0, [pc, #48]	; (800b624 <HAL_I2C_MspInit+0x8c>)
 800b5f4:	f002 f9f4 	bl	800d9e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	4b08      	ldr	r3, [pc, #32]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b600:	4a07      	ldr	r2, [pc, #28]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b606:	6413      	str	r3, [r2, #64]	; 0x40
 800b608:	4b05      	ldr	r3, [pc, #20]	; (800b620 <HAL_I2C_MspInit+0x88>)
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b614:	bf00      	nop
 800b616:	3728      	adds	r7, #40	; 0x28
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	40005400 	.word	0x40005400
 800b620:	40023800 	.word	0x40023800
 800b624:	40020400 	.word	0x40020400

0800b628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b08a      	sub	sp, #40	; 0x28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b630:	f107 0314 	add.w	r3, r7, #20
 800b634:	2200      	movs	r2, #0
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	605a      	str	r2, [r3, #4]
 800b63a:	609a      	str	r2, [r3, #8]
 800b63c:	60da      	str	r2, [r3, #12]
 800b63e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a19      	ldr	r2, [pc, #100]	; (800b6ac <HAL_SPI_MspInit+0x84>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d12c      	bne.n	800b6a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800b64a:	2300      	movs	r3, #0
 800b64c:	613b      	str	r3, [r7, #16]
 800b64e:	4b18      	ldr	r3, [pc, #96]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	4a17      	ldr	r2, [pc, #92]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b658:	6413      	str	r3, [r2, #64]	; 0x40
 800b65a:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b662:	613b      	str	r3, [r7, #16]
 800b664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b666:	2300      	movs	r3, #0
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	4b11      	ldr	r3, [pc, #68]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	4a10      	ldr	r2, [pc, #64]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b670:	f043 0304 	orr.w	r3, r3, #4
 800b674:	6313      	str	r3, [r2, #48]	; 0x30
 800b676:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <HAL_SPI_MspInit+0x88>)
 800b678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67a:	f003 0304 	and.w	r3, r3, #4
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b682:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b688:	2302      	movs	r3, #2
 800b68a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b690:	2303      	movs	r3, #3
 800b692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800b694:	2306      	movs	r3, #6
 800b696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b698:	f107 0314 	add.w	r3, r7, #20
 800b69c:	4619      	mov	r1, r3
 800b69e:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <HAL_SPI_MspInit+0x8c>)
 800b6a0:	f002 f99e 	bl	800d9e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800b6a4:	bf00      	nop
 800b6a6:	3728      	adds	r7, #40	; 0x28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	40003c00 	.word	0x40003c00
 800b6b0:	40023800 	.word	0x40023800
 800b6b4:	40020800 	.word	0x40020800

0800b6b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08c      	sub	sp, #48	; 0x30
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6c0:	f107 031c 	add.w	r3, r7, #28
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	605a      	str	r2, [r3, #4]
 800b6ca:	609a      	str	r2, [r3, #8]
 800b6cc:	60da      	str	r2, [r3, #12]
 800b6ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a32      	ldr	r2, [pc, #200]	; (800b7a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d12d      	bne.n	800b736 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61bb      	str	r3, [r7, #24]
 800b6de:	4b31      	ldr	r3, [pc, #196]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e2:	4a30      	ldr	r2, [pc, #192]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b6e4:	f043 0301 	orr.w	r3, r3, #1
 800b6e8:	6453      	str	r3, [r2, #68]	; 0x44
 800b6ea:	4b2e      	ldr	r3, [pc, #184]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	61bb      	str	r3, [r7, #24]
 800b6f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	4b2a      	ldr	r3, [pc, #168]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	4a29      	ldr	r2, [pc, #164]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b700:	f043 0301 	orr.w	r3, r3, #1
 800b704:	6313      	str	r3, [r2, #48]	; 0x30
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	617b      	str	r3, [r7, #20]
 800b710:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b712:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b718:	2302      	movs	r3, #2
 800b71a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b720:	2300      	movs	r3, #0
 800b722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b724:	2301      	movs	r3, #1
 800b726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b728:	f107 031c 	add.w	r3, r7, #28
 800b72c:	4619      	mov	r1, r3
 800b72e:	481e      	ldr	r0, [pc, #120]	; (800b7a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800b730:	f002 f956 	bl	800d9e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
 800b734:	e030      	b.n	800b798 <HAL_TIM_Encoder_MspInit+0xe0>

 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a1c      	ldr	r2, [pc, #112]	; (800b7ac <HAL_TIM_Encoder_MspInit+0xf4>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d12b      	bne.n	800b798 <HAL_TIM_Encoder_MspInit+0xe0>

 800b740:	2300      	movs	r3, #0
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b748:	4a16      	ldr	r2, [pc, #88]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b74a:	f043 0302 	orr.w	r3, r3, #2
 800b74e:	6413      	str	r3, [r2, #64]	; 0x40
 800b750:	4b14      	ldr	r3, [pc, #80]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	613b      	str	r3, [r7, #16]
 800b75a:	693b      	ldr	r3, [r7, #16]
    /* Peripheral clock enable */
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b764:	4a0f      	ldr	r2, [pc, #60]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b766:	f043 0302 	orr.w	r3, r3, #2
 800b76a:	6313      	str	r3, [r2, #48]	; 0x30
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <HAL_TIM_Encoder_MspInit+0xec>)
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	68fb      	ldr	r3, [r7, #12]
    PB4     ------> TIM3_CH1
 800b778:	2330      	movs	r3, #48	; 0x30
 800b77a:	61fb      	str	r3, [r7, #28]
    PB5     ------> TIM3_CH2
 800b77c:	2302      	movs	r3, #2
 800b77e:	623b      	str	r3, [r7, #32]
    */
 800b780:	2300      	movs	r3, #0
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b784:	2300      	movs	r3, #0
 800b786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b788:	2302      	movs	r3, #2
 800b78a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78c:	f107 031c 	add.w	r3, r7, #28
 800b790:	4619      	mov	r1, r3
 800b792:	4807      	ldr	r0, [pc, #28]	; (800b7b0 <HAL_TIM_Encoder_MspInit+0xf8>)
 800b794:	f002 f924 	bl	800d9e0 <HAL_GPIO_Init>
  /* USER CODE END TIM3_MspInit 1 */
 800b798:	bf00      	nop
 800b79a:	3730      	adds	r7, #48	; 0x30
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	40010000 	.word	0x40010000
 800b7a4:	40023800 	.word	0x40023800
 800b7a8:	40020000 	.word	0x40020000
 800b7ac:	40000400 	.word	0x40000400
 800b7b0:	40020400 	.word	0x40020400

0800b7b4 <HAL_TIM_PWM_MspInit>:

/**
* @brief TIM_PWM MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
*/
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a15      	ldr	r2, [pc, #84]	; (800b818 <HAL_TIM_PWM_MspInit+0x64>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d10e      	bne.n	800b7e4 <HAL_TIM_PWM_MspInit+0x30>
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	4b14      	ldr	r3, [pc, #80]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ce:	4a13      	ldr	r2, [pc, #76]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b7d0:	f043 0304 	orr.w	r3, r3, #4
 800b7d4:	6413      	str	r3, [r2, #64]	; 0x40
 800b7d6:	4b11      	ldr	r3, [pc, #68]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	f003 0304 	and.w	r3, r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
 800b7e2:	e012      	b.n	800b80a <HAL_TIM_PWM_MspInit+0x56>

 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a0d      	ldr	r2, [pc, #52]	; (800b820 <HAL_TIM_PWM_MspInit+0x6c>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d10d      	bne.n	800b80a <HAL_TIM_PWM_MspInit+0x56>

 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60bb      	str	r3, [r7, #8]
 800b7f2:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f6:	4a09      	ldr	r2, [pc, #36]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b7f8:	f043 0302 	orr.w	r3, r3, #2
 800b7fc:	6453      	str	r3, [r2, #68]	; 0x44
 800b7fe:	4b07      	ldr	r3, [pc, #28]	; (800b81c <HAL_TIM_PWM_MspInit+0x68>)
 800b800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b802:	f003 0302 	and.w	r3, r3, #2
 800b806:	60bb      	str	r3, [r7, #8]
 800b808:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END TIM8_MspInit 1 */
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	40000800 	.word	0x40000800
 800b81c:	40023800 	.word	0x40023800
 800b820:	40010400 	.word	0x40010400

0800b824 <HAL_TIM_Base_MspInit>:

/**
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
*/
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0e      	ldr	r2, [pc, #56]	; (800b86c <HAL_TIM_Base_MspInit+0x48>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d115      	bne.n	800b862 <HAL_TIM_Base_MspInit+0x3e>
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
 800b83a:	4b0d      	ldr	r3, [pc, #52]	; (800b870 <HAL_TIM_Base_MspInit+0x4c>)
 800b83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83e:	4a0c      	ldr	r2, [pc, #48]	; (800b870 <HAL_TIM_Base_MspInit+0x4c>)
 800b840:	f043 0310 	orr.w	r3, r3, #16
 800b844:	6413      	str	r3, [r2, #64]	; 0x40
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <HAL_TIM_Base_MspInit+0x4c>)
 800b848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b84a:	f003 0310 	and.w	r3, r3, #16
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	2036      	movs	r0, #54	; 0x36
 800b858:	f001 fa25 	bl	800cca6 <HAL_NVIC_SetPriority>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b85c:	2036      	movs	r0, #54	; 0x36
 800b85e:	f001 fa3e 	bl	800ccde <HAL_NVIC_EnableIRQ>
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
 800b862:	bf00      	nop
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	40001000 	.word	0x40001000
 800b870:	40023800 	.word	0x40023800

0800b874 <HAL_TIM_MspPostInit>:
  }
  else if(htim_base->Instance==TIM7)
  {
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIM7_MspInit 0 */
 800b87c:	f107 0314 	add.w	r3, r7, #20
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	605a      	str	r2, [r3, #4]
 800b886:	609a      	str	r2, [r3, #8]
 800b888:	60da      	str	r2, [r3, #12]
 800b88a:	611a      	str	r2, [r3, #16]

 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a24      	ldr	r2, [pc, #144]	; (800b924 <HAL_TIM_MspPostInit+0xb0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d11e      	bne.n	800b8d4 <HAL_TIM_MspPostInit+0x60>
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b896:	2300      	movs	r3, #0
 800b898:	613b      	str	r3, [r7, #16]
 800b89a:	4b23      	ldr	r3, [pc, #140]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89e:	4a22      	ldr	r2, [pc, #136]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b8a0:	f043 0302 	orr.w	r3, r3, #2
 800b8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8a6:	4b20      	ldr	r3, [pc, #128]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
 800b8b2:	2380      	movs	r3, #128	; 0x80
 800b8b4:	617b      	str	r3, [r7, #20]
  }
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	61bb      	str	r3, [r7, #24]

 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61fb      	str	r3, [r7, #28]
}
 800b8be:	2300      	movs	r3, #0
 800b8c0:	623b      	str	r3, [r7, #32]

 800b8c2:	2302      	movs	r3, #2
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
 800b8c6:	f107 0314 	add.w	r3, r7, #20
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4817      	ldr	r0, [pc, #92]	; (800b92c <HAL_TIM_MspPostInit+0xb8>)
 800b8ce:	f002 f887 	bl	800d9e0 <HAL_GPIO_Init>
  else if(htim->Instance==TIM8)
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

 800b8d2:	e023      	b.n	800b91c <HAL_TIM_MspPostInit+0xa8>

 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a15      	ldr	r2, [pc, #84]	; (800b930 <HAL_TIM_MspPostInit+0xbc>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d11e      	bne.n	800b91c <HAL_TIM_MspPostInit+0xa8>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	4b11      	ldr	r3, [pc, #68]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	4a10      	ldr	r2, [pc, #64]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b8e8:	f043 0304 	orr.w	r3, r3, #4
 800b8ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <HAL_TIM_MspPostInit+0xb4>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b8fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b900:	2302      	movs	r3, #2
 800b902:	61bb      	str	r3, [r7, #24]

 800b904:	2300      	movs	r3, #0
 800b906:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */
 800b908:	2300      	movs	r3, #0
 800b90a:	623b      	str	r3, [r7, #32]

 800b90c:	2303      	movs	r3, #3
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END TIM4_MspPostInit 1 */
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4619      	mov	r1, r3
 800b916:	4807      	ldr	r0, [pc, #28]	; (800b934 <HAL_TIM_MspPostInit+0xc0>)
 800b918:	f002 f862 	bl	800d9e0 <HAL_GPIO_Init>

 800b91c:	bf00      	nop
 800b91e:	3728      	adds	r7, #40	; 0x28
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	40000800 	.word	0x40000800
 800b928:	40023800 	.word	0x40023800
 800b92c:	40020400 	.word	0x40020400
 800b930:	40010400 	.word	0x40010400
 800b934:	40020800 	.word	0x40020800

0800b938 <HAL_UART_MspInit>:
  if(htim_base->Instance==TIM6)
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08a      	sub	sp, #40	; 0x28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
    __HAL_RCC_TIM6_CLK_DISABLE();
 800b940:	f107 0314 	add.w	r3, r7, #20
 800b944:	2200      	movs	r2, #0
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	605a      	str	r2, [r3, #4]
 800b94a:	609a      	str	r2, [r3, #8]
 800b94c:	60da      	str	r2, [r3, #12]
 800b94e:	611a      	str	r2, [r3, #16]

 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a1d      	ldr	r2, [pc, #116]	; (800b9cc <HAL_UART_MspInit+0x94>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d133      	bne.n	800b9c2 <HAL_UART_MspInit+0x8a>
    /* TIM6 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
 800b95a:	2300      	movs	r3, #0
 800b95c:	613b      	str	r3, [r7, #16]
 800b95e:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	4a1b      	ldr	r2, [pc, #108]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b964:	f043 0320 	orr.w	r3, r3, #32
 800b968:	6453      	str	r3, [r2, #68]	; 0x44
 800b96a:	4b19      	ldr	r3, [pc, #100]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96e:	f003 0320 	and.w	r3, r3, #32
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	693b      	ldr	r3, [r7, #16]
  else if(htim_base->Instance==TIM7)
  {
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	4b15      	ldr	r3, [pc, #84]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97e:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b980:	f043 0304 	orr.w	r3, r3, #4
 800b984:	6313      	str	r3, [r2, #48]	; 0x30
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <HAL_UART_MspInit+0x98>)
 800b988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspDeInit 0 */

  /* USER CODE END TIM7_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM7_CLK_DISABLE();
 800b992:	23c0      	movs	r3, #192	; 0xc0
 800b994:	617b      	str	r3, [r7, #20]

 800b996:	2302      	movs	r3, #2
 800b998:	61bb      	str	r3, [r7, #24]
    /* TIM7 interrupt DeInit */
 800b99a:	2300      	movs	r3, #0
 800b99c:	61fb      	str	r3, [r7, #28]
    HAL_NVIC_DisableIRQ(TIM7_IRQn);
 800b99e:	2303      	movs	r3, #3
 800b9a0:	623b      	str	r3, [r7, #32]
  /* USER CODE BEGIN TIM7_MspDeInit 1 */
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24

 800b9a6:	f107 0314 	add.w	r3, r7, #20
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4809      	ldr	r0, [pc, #36]	; (800b9d4 <HAL_UART_MspInit+0x9c>)
 800b9ae:	f002 f817 	bl	800d9e0 <HAL_GPIO_Init>
  /* USER CODE END TIM7_MspDeInit 1 */
  }

 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	2047      	movs	r0, #71	; 0x47
 800b9b8:	f001 f975 	bl	800cca6 <HAL_NVIC_SetPriority>
}
 800b9bc:	2047      	movs	r0, #71	; 0x47
 800b9be:	f001 f98e 	bl	800ccde <HAL_NVIC_EnableIRQ>

/**
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
 800b9c2:	bf00      	nop
 800b9c4:	3728      	adds	r7, #40	; 0x28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	40011400 	.word	0x40011400
 800b9d0:	40023800 	.word	0x40023800
 800b9d4:	40020800 	.word	0x40020800

0800b9d8 <NMI_Handler>:
/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
 800b9dc:	e7fe      	b.n	800b9dc <NMI_Handler+0x4>

0800b9de <HardFault_Handler>:
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
 800b9de:	b480      	push	{r7}
 800b9e0:	af00      	add	r7, sp, #0
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

 800b9e2:	e7fe      	b.n	800b9e2 <HardFault_Handler+0x4>

0800b9e4 <MemManage_Handler>:
  }
}

/**
  * @brief This function handles Memory management fault.
  */
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

 800b9e8:	e7fe      	b.n	800b9e8 <MemManage_Handler+0x4>

0800b9ea <BusFault_Handler>:
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
 800b9ea:	b480      	push	{r7}
 800b9ec:	af00      	add	r7, sp, #0
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

 800b9ee:	e7fe      	b.n	800b9ee <BusFault_Handler+0x4>

0800b9f0 <UsageFault_Handler>:
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

 800b9f4:	e7fe      	b.n	800b9f4 <UsageFault_Handler+0x4>

0800b9f6 <SVC_Handler>:
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
 800b9f6:	b480      	push	{r7}
 800b9f8:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <DebugMon_Handler>:
  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
 800ba04:	b480      	push	{r7}
 800ba06:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

 800ba08:	bf00      	nop
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <PendSV_Handler>:
  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
 800ba12:	b480      	push	{r7}
 800ba14:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

 800ba16:	bf00      	nop
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <SysTick_Handler>:
  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

 800ba24:	f000 fc38 	bl	800c298 <HAL_IncTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <TIM6_DAC_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

 800ba30:	4802      	ldr	r0, [pc, #8]	; (800ba3c <TIM6_DAC_IRQHandler+0x10>)
 800ba32:	f004 f91e 	bl	800fc72 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

 800ba36:	bf00      	nop
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	200003c0 	.word	0x200003c0

0800ba40 <DMA2_Stream0_IRQHandler>:
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

 800ba44:	4802      	ldr	r0, [pc, #8]	; (800ba50 <DMA2_Stream0_IRQHandler+0x10>)
 800ba46:	f001 fa8d 	bl	800cf64 <HAL_DMA_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

 800ba4a:	bf00      	nop
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000360 	.word	0x20000360

0800ba54 <USART6_IRQHandler>:
  /* USER CODE END TIM6_DAC_IRQn 1 */
}

/**
  * @brief This function handles TIM7 global interrupt.
  */
 800ba54:	b580      	push	{r7, lr}
 800ba56:	af00      	add	r7, sp, #0
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

 800ba58:	4802      	ldr	r0, [pc, #8]	; (800ba64 <USART6_IRQHandler+0x10>)
 800ba5a:	f004 ff3f 	bl	80108dc <HAL_UART_IRQHandler>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

 800ba5e:	bf00      	nop
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	2000859c 	.word	0x2000859c

0800ba68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba74:	2300      	movs	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	e00a      	b.n	800ba90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba7a:	f3af 8000 	nop.w
 800ba7e:	4601      	mov	r1, r0
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	60ba      	str	r2, [r7, #8]
 800ba86:	b2ca      	uxtb	r2, r1
 800ba88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	617b      	str	r3, [r7, #20]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	dbf0      	blt.n	800ba7a <_read+0x12>
	}

return len;
 800ba98:	687b      	ldr	r3, [r7, #4]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b086      	sub	sp, #24
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800baae:	2300      	movs	r3, #0
 800bab0:	617b      	str	r3, [r7, #20]
 800bab2:	e009      	b.n	800bac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	60ba      	str	r2, [r7, #8]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe facd 	bl	800a05c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	3301      	adds	r3, #1
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	429a      	cmp	r2, r3
 800bace:	dbf1      	blt.n	800bab4 <_write+0x12>
	}
	return len;
 800bad0:	687b      	ldr	r3, [r7, #4]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <_close>:

int _close(int file)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
	return -1;
 800bae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb02:	605a      	str	r2, [r3, #4]
	return 0;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <_isatty>:

int _isatty(int file)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
	return 1;
 800bb1a:	2301      	movs	r3, #1
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
	return 0;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bb4c:	4a14      	ldr	r2, [pc, #80]	; (800bba0 <_sbrk+0x5c>)
 800bb4e:	4b15      	ldr	r3, [pc, #84]	; (800bba4 <_sbrk+0x60>)
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bb58:	4b13      	ldr	r3, [pc, #76]	; (800bba8 <_sbrk+0x64>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bb60:	4b11      	ldr	r3, [pc, #68]	; (800bba8 <_sbrk+0x64>)
 800bb62:	4a12      	ldr	r2, [pc, #72]	; (800bbac <_sbrk+0x68>)
 800bb64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bb66:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <_sbrk+0x64>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d207      	bcs.n	800bb84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bb74:	f005 fcb8 	bl	80114e8 <__errno>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800bb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb82:	e009      	b.n	800bb98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bb84:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <_sbrk+0x64>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bb8a:	4b07      	ldr	r3, [pc, #28]	; (800bba8 <_sbrk+0x64>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4413      	add	r3, r2
 800bb92:	4a05      	ldr	r2, [pc, #20]	; (800bba8 <_sbrk+0x64>)
 800bb94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bb96:	68fb      	ldr	r3, [r7, #12]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20020000 	.word	0x20020000
 800bba4:	00000400 	.word	0x00000400
 800bba8:	2000024c 	.word	0x2000024c
 800bbac:	20018648 	.word	0x20018648

0800bbb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bbb4:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <SystemInit+0x28>)
 800bbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbba:	4a07      	ldr	r2, [pc, #28]	; (800bbd8 <SystemInit+0x28>)
 800bbbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bbc4:	4b04      	ldr	r3, [pc, #16]	; (800bbd8 <SystemInit+0x28>)
 800bbc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bbca:	609a      	str	r2, [r3, #8]
#endif
}
 800bbcc:	bf00      	nop
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	e000ed00 	.word	0xe000ed00
 800bbdc:	00000000 	.word	0x00000000

0800bbe0 <tuning>:
char _backup_flash_start;

 float Driving_log[BACKUP_FLASH_SECTOR_SIZE2] __attribute__ ((aligned(4)));
char _backup_flash_start2;

void tuning(){
 800bbe0:	b598      	push	{r3, r4, r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
	Flash_load();
 800bbe4:	f7fe f850 	bl	8009c88 <Flash_load>
	Kp = work_ram[0];
 800bbe8:	4baf      	ldr	r3, [pc, #700]	; (800bea8 <tuning+0x2c8>)
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fc fbc1 	bl	8008374 <__aeabi_ui2d>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	4aad      	ldr	r2, [pc, #692]	; (800beac <tuning+0x2cc>)
 800bbf8:	e9c2 3400 	strd	r3, r4, [r2]
	Ki = work_ram[1];
 800bbfc:	4baa      	ldr	r3, [pc, #680]	; (800bea8 <tuning+0x2c8>)
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7fc fbb7 	bl	8008374 <__aeabi_ui2d>
 800bc06:	4603      	mov	r3, r0
 800bc08:	460c      	mov	r4, r1
 800bc0a:	4aa9      	ldr	r2, [pc, #676]	; (800beb0 <tuning+0x2d0>)
 800bc0c:	e9c2 3400 	strd	r3, r4, [r2]
	Kd = work_ram[2];
 800bc10:	4ba5      	ldr	r3, [pc, #660]	; (800bea8 <tuning+0x2c8>)
 800bc12:	889b      	ldrh	r3, [r3, #4]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fc fbad 	bl	8008374 <__aeabi_ui2d>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4aa5      	ldr	r2, [pc, #660]	; (800beb4 <tuning+0x2d4>)
 800bc20:	e9c2 3400 	strd	r3, r4, [r2]

while(1){
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800bc24:	e088      	b.n	800bd38 <tuning+0x158>
			lcd_init();
 800bc26:	f7fd fb77 	bl	8009318 <lcd_init>
			lcd_clear();
 800bc2a:	f7fd fbb9 	bl	80093a0 <lcd_clear>
			lcd_locate(0,0);
 800bc2e:	2100      	movs	r1, #0
 800bc30:	2000      	movs	r0, #0
 800bc32:	f7fd fbc5 	bl	80093c0 <lcd_locate>
			lcd_printf("speed");
 800bc36:	48a0      	ldr	r0, [pc, #640]	; (800beb8 <tuning+0x2d8>)
 800bc38:	f7fd fbec 	bl	8009414 <lcd_printf>
			lcd_locate(0,1);
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f7fd fbbe 	bl	80093c0 <lcd_locate>
			lcd_printf("%d",Speedbuff);
 800bc44:	4b9d      	ldr	r3, [pc, #628]	; (800bebc <tuning+0x2dc>)
 800bc46:	881b      	ldrh	r3, [r3, #0]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	489d      	ldr	r0, [pc, #628]	; (800bec0 <tuning+0x2e0>)
 800bc4c:	f7fd fbe2 	bl	8009414 <lcd_printf>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0){
 800bc50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc54:	489b      	ldr	r0, [pc, #620]	; (800bec4 <tuning+0x2e4>)
 800bc56:	f002 f85d 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d107      	bne.n	800bc70 <tuning+0x90>
				lcd_clear();
 800bc60:	f7fd fb9e 	bl	80093a0 <lcd_clear>
				Speedbuff = Speedbuff+100;
 800bc64:	4b95      	ldr	r3, [pc, #596]	; (800bebc <tuning+0x2dc>)
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	3364      	adds	r3, #100	; 0x64
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	4b93      	ldr	r3, [pc, #588]	; (800bebc <tuning+0x2dc>)
 800bc6e:	801a      	strh	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bc70:	2104      	movs	r1, #4
 800bc72:	4894      	ldr	r0, [pc, #592]	; (800bec4 <tuning+0x2e4>)
 800bc74:	f002 f84e 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d107      	bne.n	800bc8e <tuning+0xae>
				lcd_clear();
 800bc7e:	f7fd fb8f 	bl	80093a0 <lcd_clear>
				Speedbuff = Speedbuff-100;
 800bc82:	4b8e      	ldr	r3, [pc, #568]	; (800bebc <tuning+0x2dc>)
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	3b64      	subs	r3, #100	; 0x64
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	4b8c      	ldr	r3, [pc, #560]	; (800bebc <tuning+0x2dc>)
 800bc8c:	801a      	strh	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==0){
 800bc8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc92:	488c      	ldr	r0, [pc, #560]	; (800bec4 <tuning+0x2e4>)
 800bc94:	f002 f83e 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d14c      	bne.n	800bd38 <tuning+0x158>
				lcd_clear();
 800bc9e:	f7fd fb7f 	bl	80093a0 <lcd_clear>
				work_ram[0] = Kp;
 800bca2:	4b82      	ldr	r3, [pc, #520]	; (800beac <tuning+0x2cc>)
 800bca4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	4621      	mov	r1, r4
 800bcac:	f7fc feb4 	bl	8008a18 <__aeabi_d2uiz>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	4b7c      	ldr	r3, [pc, #496]	; (800bea8 <tuning+0x2c8>)
 800bcb6:	801a      	strh	r2, [r3, #0]
				work_ram[1] = Ki;
 800bcb8:	4b7d      	ldr	r3, [pc, #500]	; (800beb0 <tuning+0x2d0>)
 800bcba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f7fc fea9 	bl	8008a18 <__aeabi_d2uiz>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	4b77      	ldr	r3, [pc, #476]	; (800bea8 <tuning+0x2c8>)
 800bccc:	805a      	strh	r2, [r3, #2]
				work_ram[2] = Kd;
 800bcce:	4b79      	ldr	r3, [pc, #484]	; (800beb4 <tuning+0x2d4>)
 800bcd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	f7fc fe9e 	bl	8008a18 <__aeabi_d2uiz>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	4b71      	ldr	r3, [pc, #452]	; (800bea8 <tuning+0x2c8>)
 800bce2:	809a      	strh	r2, [r3, #4]
				Kp = (double)Kp/100;
 800bce4:	4b71      	ldr	r3, [pc, #452]	; (800beac <tuning+0x2cc>)
 800bce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcea:	f04f 0200 	mov.w	r2, #0
 800bcee:	4b76      	ldr	r3, [pc, #472]	; (800bec8 <tuning+0x2e8>)
 800bcf0:	f7fc fce4 	bl	80086bc <__aeabi_ddiv>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4a6c      	ldr	r2, [pc, #432]	; (800beac <tuning+0x2cc>)
 800bcfa:	e9c2 3400 	strd	r3, r4, [r2]
				Ki = (double)Ki/1000000;
 800bcfe:	4b6c      	ldr	r3, [pc, #432]	; (800beb0 <tuning+0x2d0>)
 800bd00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd04:	a366      	add	r3, pc, #408	; (adr r3, 800bea0 <tuning+0x2c0>)
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f7fc fcd7 	bl	80086bc <__aeabi_ddiv>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	460c      	mov	r4, r1
 800bd12:	4a67      	ldr	r2, [pc, #412]	; (800beb0 <tuning+0x2d0>)
 800bd14:	e9c2 3400 	strd	r3, r4, [r2]
				Kd = (double)Kd/100;
 800bd18:	4b66      	ldr	r3, [pc, #408]	; (800beb4 <tuning+0x2d4>)
 800bd1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	4b69      	ldr	r3, [pc, #420]	; (800bec8 <tuning+0x2e8>)
 800bd24:	f7fc fcca 	bl	80086bc <__aeabi_ddiv>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	4a61      	ldr	r2, [pc, #388]	; (800beb4 <tuning+0x2d4>)
 800bd2e:	e9c2 3400 	strd	r3, r4, [r2]
				Flash_store();
 800bd32:	f7fd ffc9 	bl	8009cc8 <Flash_store>
				return ;
 800bd36:	e219      	b.n	800c16c <tuning+0x58c>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800bd38:	2101      	movs	r1, #1
 800bd3a:	4862      	ldr	r0, [pc, #392]	; (800bec4 <tuning+0x2e4>)
 800bd3c:	f001 ffea 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f47f af6f 	bne.w	800bc26 <tuning+0x46>
			}
		}
		HAL_Delay(100);
 800bd48:	2064      	movs	r0, #100	; 0x64
 800bd4a:	f000 fac5 	bl	800c2d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800bd4e:	e098      	b.n	800be82 <tuning+0x2a2>
		lcd_init();
 800bd50:	f7fd fae2 	bl	8009318 <lcd_init>
		lcd_clear();
 800bd54:	f7fd fb24 	bl	80093a0 <lcd_clear>
		lcd_locate(0,0);
 800bd58:	2100      	movs	r1, #0
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f7fd fb30 	bl	80093c0 <lcd_locate>
		lcd_printf("Kp");
 800bd60:	485a      	ldr	r0, [pc, #360]	; (800becc <tuning+0x2ec>)
 800bd62:	f7fd fb57 	bl	8009414 <lcd_printf>
		lcd_locate(0,1);
 800bd66:	2101      	movs	r1, #1
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f7fd fb29 	bl	80093c0 <lcd_locate>
		lcd_printf("%f",Kp);
 800bd6e:	4b4f      	ldr	r3, [pc, #316]	; (800beac <tuning+0x2cc>)
 800bd70:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd74:	461a      	mov	r2, r3
 800bd76:	4623      	mov	r3, r4
 800bd78:	4855      	ldr	r0, [pc, #340]	; (800bed0 <tuning+0x2f0>)
 800bd7a:	f7fd fb4b 	bl	8009414 <lcd_printf>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0){
 800bd7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd82:	4850      	ldr	r0, [pc, #320]	; (800bec4 <tuning+0x2e4>)
 800bd84:	f001 ffc6 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10e      	bne.n	800bdac <tuning+0x1cc>
			lcd_clear();
 800bd8e:	f7fd fb07 	bl	80093a0 <lcd_clear>
			Kp=Kp+1;
 800bd92:	4b46      	ldr	r3, [pc, #280]	; (800beac <tuning+0x2cc>)
 800bd94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd98:	f04f 0200 	mov.w	r2, #0
 800bd9c:	4b4d      	ldr	r3, [pc, #308]	; (800bed4 <tuning+0x2f4>)
 800bd9e:	f7fc f9ad 	bl	80080fc <__adddf3>
 800bda2:	4603      	mov	r3, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	4a41      	ldr	r2, [pc, #260]	; (800beac <tuning+0x2cc>)
 800bda8:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bdac:	2104      	movs	r1, #4
 800bdae:	4845      	ldr	r0, [pc, #276]	; (800bec4 <tuning+0x2e4>)
 800bdb0:	f001 ffb0 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10e      	bne.n	800bdd8 <tuning+0x1f8>
			lcd_clear();
 800bdba:	f7fd faf1 	bl	80093a0 <lcd_clear>
			Kp=Kp-1;
 800bdbe:	4b3b      	ldr	r3, [pc, #236]	; (800beac <tuning+0x2cc>)
 800bdc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	4b42      	ldr	r3, [pc, #264]	; (800bed4 <tuning+0x2f4>)
 800bdca:	f7fc f995 	bl	80080f8 <__aeabi_dsub>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	4a36      	ldr	r2, [pc, #216]	; (800beac <tuning+0x2cc>)
 800bdd4:	e9c2 3400 	strd	r3, r4, [r2]
		}
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==0){
 800bdd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bddc:	4839      	ldr	r0, [pc, #228]	; (800bec4 <tuning+0x2e4>)
 800bdde:	f001 ff99 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d14c      	bne.n	800be82 <tuning+0x2a2>
			lcd_clear();
 800bde8:	f7fd fada 	bl	80093a0 <lcd_clear>
			work_ram[0] = Kp;
 800bdec:	4b2f      	ldr	r3, [pc, #188]	; (800beac <tuning+0x2cc>)
 800bdee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	f7fc fe0f 	bl	8008a18 <__aeabi_d2uiz>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	4b2a      	ldr	r3, [pc, #168]	; (800bea8 <tuning+0x2c8>)
 800be00:	801a      	strh	r2, [r3, #0]
			work_ram[1] = Ki;
 800be02:	4b2b      	ldr	r3, [pc, #172]	; (800beb0 <tuning+0x2d0>)
 800be04:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be08:	4618      	mov	r0, r3
 800be0a:	4621      	mov	r1, r4
 800be0c:	f7fc fe04 	bl	8008a18 <__aeabi_d2uiz>
 800be10:	4603      	mov	r3, r0
 800be12:	b29a      	uxth	r2, r3
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <tuning+0x2c8>)
 800be16:	805a      	strh	r2, [r3, #2]
			work_ram[2] = Kd;
 800be18:	4b26      	ldr	r3, [pc, #152]	; (800beb4 <tuning+0x2d4>)
 800be1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be1e:	4618      	mov	r0, r3
 800be20:	4621      	mov	r1, r4
 800be22:	f7fc fdf9 	bl	8008a18 <__aeabi_d2uiz>
 800be26:	4603      	mov	r3, r0
 800be28:	b29a      	uxth	r2, r3
 800be2a:	4b1f      	ldr	r3, [pc, #124]	; (800bea8 <tuning+0x2c8>)
 800be2c:	809a      	strh	r2, [r3, #4]
			Kp = (double)Kp/100;
 800be2e:	4b1f      	ldr	r3, [pc, #124]	; (800beac <tuning+0x2cc>)
 800be30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be34:	f04f 0200 	mov.w	r2, #0
 800be38:	4b23      	ldr	r3, [pc, #140]	; (800bec8 <tuning+0x2e8>)
 800be3a:	f7fc fc3f 	bl	80086bc <__aeabi_ddiv>
 800be3e:	4603      	mov	r3, r0
 800be40:	460c      	mov	r4, r1
 800be42:	4a1a      	ldr	r2, [pc, #104]	; (800beac <tuning+0x2cc>)
 800be44:	e9c2 3400 	strd	r3, r4, [r2]
			Ki = (double)Ki/1000000;
 800be48:	4b19      	ldr	r3, [pc, #100]	; (800beb0 <tuning+0x2d0>)
 800be4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be4e:	a314      	add	r3, pc, #80	; (adr r3, 800bea0 <tuning+0x2c0>)
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f7fc fc32 	bl	80086bc <__aeabi_ddiv>
 800be58:	4603      	mov	r3, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	4a14      	ldr	r2, [pc, #80]	; (800beb0 <tuning+0x2d0>)
 800be5e:	e9c2 3400 	strd	r3, r4, [r2]
			Kd = (double)Kd/100;
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <tuning+0x2d4>)
 800be64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <tuning+0x2e8>)
 800be6e:	f7fc fc25 	bl	80086bc <__aeabi_ddiv>
 800be72:	4603      	mov	r3, r0
 800be74:	460c      	mov	r4, r1
 800be76:	4a0f      	ldr	r2, [pc, #60]	; (800beb4 <tuning+0x2d4>)
 800be78:	e9c2 3400 	strd	r3, r4, [r2]
			Flash_store();
 800be7c:	f7fd ff24 	bl	8009cc8 <Flash_store>
			return ;
 800be80:	e174      	b.n	800c16c <tuning+0x58c>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800be82:	2101      	movs	r1, #1
 800be84:	480f      	ldr	r0, [pc, #60]	; (800bec4 <tuning+0x2e4>)
 800be86:	f001 ff45 	bl	800dd14 <HAL_GPIO_ReadPin>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f47f af5f 	bne.w	800bd50 <tuning+0x170>
		}
	}
	HAL_Delay(100);
 800be92:	2064      	movs	r0, #100	; 0x64
 800be94:	f000 fa20 	bl	800c2d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800be98:	e0b7      	b.n	800c00a <tuning+0x42a>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	00000000 	.word	0x00000000
 800bea4:	412e8480 	.word	0x412e8480
 800bea8:	200004e0 	.word	0x200004e0
 800beac:	20000218 	.word	0x20000218
 800beb0:	20000220 	.word	0x20000220
 800beb4:	20000228 	.word	0x20000228
 800beb8:	08015b4c 	.word	0x08015b4c
 800bebc:	200085dc 	.word	0x200085dc
 800bec0:	08015b54 	.word	0x08015b54
 800bec4:	40020800 	.word	0x40020800
 800bec8:	40590000 	.word	0x40590000
 800becc:	08015b58 	.word	0x08015b58
 800bed0:	08015b5c 	.word	0x08015b5c
 800bed4:	3ff00000 	.word	0x3ff00000
			lcd_init();
 800bed8:	f7fd fa1e 	bl	8009318 <lcd_init>
			lcd_clear();
 800bedc:	f7fd fa60 	bl	80093a0 <lcd_clear>
			lcd_locate(0,0);
 800bee0:	2100      	movs	r1, #0
 800bee2:	2000      	movs	r0, #0
 800bee4:	f7fd fa6c 	bl	80093c0 <lcd_locate>
			lcd_printf("Ki");
 800bee8:	48a3      	ldr	r0, [pc, #652]	; (800c178 <tuning+0x598>)
 800beea:	f7fd fa93 	bl	8009414 <lcd_printf>
			lcd_locate(0,1);
 800beee:	2101      	movs	r1, #1
 800bef0:	2000      	movs	r0, #0
 800bef2:	f7fd fa65 	bl	80093c0 <lcd_locate>
			lcd_printf("%f",Ki);
 800bef6:	4ba1      	ldr	r3, [pc, #644]	; (800c17c <tuning+0x59c>)
 800bef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800befc:	461a      	mov	r2, r3
 800befe:	4623      	mov	r3, r4
 800bf00:	489f      	ldr	r0, [pc, #636]	; (800c180 <tuning+0x5a0>)
 800bf02:	f7fd fa87 	bl	8009414 <lcd_printf>
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0){
 800bf06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf0a:	489e      	ldr	r0, [pc, #632]	; (800c184 <tuning+0x5a4>)
 800bf0c:	f001 ff02 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10e      	bne.n	800bf34 <tuning+0x354>
				lcd_clear();
 800bf16:	f7fd fa43 	bl	80093a0 <lcd_clear>
				Ki=Ki+1;
 800bf1a:	4b98      	ldr	r3, [pc, #608]	; (800c17c <tuning+0x59c>)
 800bf1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf20:	f04f 0200 	mov.w	r2, #0
 800bf24:	4b98      	ldr	r3, [pc, #608]	; (800c188 <tuning+0x5a8>)
 800bf26:	f7fc f8e9 	bl	80080fc <__adddf3>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	4a93      	ldr	r2, [pc, #588]	; (800c17c <tuning+0x59c>)
 800bf30:	e9c2 3400 	strd	r3, r4, [r2]
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800bf34:	2104      	movs	r1, #4
 800bf36:	4893      	ldr	r0, [pc, #588]	; (800c184 <tuning+0x5a4>)
 800bf38:	f001 feec 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10e      	bne.n	800bf60 <tuning+0x380>
				lcd_clear();
 800bf42:	f7fd fa2d 	bl	80093a0 <lcd_clear>
				Ki=Ki-1;
 800bf46:	4b8d      	ldr	r3, [pc, #564]	; (800c17c <tuning+0x59c>)
 800bf48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf4c:	f04f 0200 	mov.w	r2, #0
 800bf50:	4b8d      	ldr	r3, [pc, #564]	; (800c188 <tuning+0x5a8>)
 800bf52:	f7fc f8d1 	bl	80080f8 <__aeabi_dsub>
 800bf56:	4603      	mov	r3, r0
 800bf58:	460c      	mov	r4, r1
 800bf5a:	4a88      	ldr	r2, [pc, #544]	; (800c17c <tuning+0x59c>)
 800bf5c:	e9c2 3400 	strd	r3, r4, [r2]
			}
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==0){
 800bf60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf64:	4887      	ldr	r0, [pc, #540]	; (800c184 <tuning+0x5a4>)
 800bf66:	f001 fed5 	bl	800dd14 <HAL_GPIO_ReadPin>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d14c      	bne.n	800c00a <tuning+0x42a>
				lcd_clear();
 800bf70:	f7fd fa16 	bl	80093a0 <lcd_clear>
				work_ram[0] = Kp;
 800bf74:	4b85      	ldr	r3, [pc, #532]	; (800c18c <tuning+0x5ac>)
 800bf76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f7fc fd4b 	bl	8008a18 <__aeabi_d2uiz>
 800bf82:	4603      	mov	r3, r0
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	4b82      	ldr	r3, [pc, #520]	; (800c190 <tuning+0x5b0>)
 800bf88:	801a      	strh	r2, [r3, #0]
				work_ram[1] = Ki;
 800bf8a:	4b7c      	ldr	r3, [pc, #496]	; (800c17c <tuning+0x59c>)
 800bf8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf90:	4618      	mov	r0, r3
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7fc fd40 	bl	8008a18 <__aeabi_d2uiz>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	4b7c      	ldr	r3, [pc, #496]	; (800c190 <tuning+0x5b0>)
 800bf9e:	805a      	strh	r2, [r3, #2]
				work_ram[2] = Kd;
 800bfa0:	4b7c      	ldr	r3, [pc, #496]	; (800c194 <tuning+0x5b4>)
 800bfa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f7fc fd35 	bl	8008a18 <__aeabi_d2uiz>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	4b77      	ldr	r3, [pc, #476]	; (800c190 <tuning+0x5b0>)
 800bfb4:	809a      	strh	r2, [r3, #4]
				Kp = (double)Kp/100;
 800bfb6:	4b75      	ldr	r3, [pc, #468]	; (800c18c <tuning+0x5ac>)
 800bfb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfbc:	f04f 0200 	mov.w	r2, #0
 800bfc0:	4b75      	ldr	r3, [pc, #468]	; (800c198 <tuning+0x5b8>)
 800bfc2:	f7fc fb7b 	bl	80086bc <__aeabi_ddiv>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	460c      	mov	r4, r1
 800bfca:	4a70      	ldr	r2, [pc, #448]	; (800c18c <tuning+0x5ac>)
 800bfcc:	e9c2 3400 	strd	r3, r4, [r2]
				Ki = (double)Ki/1000000;
 800bfd0:	4b6a      	ldr	r3, [pc, #424]	; (800c17c <tuning+0x59c>)
 800bfd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfd6:	a366      	add	r3, pc, #408	; (adr r3, 800c170 <tuning+0x590>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7fc fb6e 	bl	80086bc <__aeabi_ddiv>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	4a65      	ldr	r2, [pc, #404]	; (800c17c <tuning+0x59c>)
 800bfe6:	e9c2 3400 	strd	r3, r4, [r2]
				Kd = (double)Kd/100;
 800bfea:	4b6a      	ldr	r3, [pc, #424]	; (800c194 <tuning+0x5b4>)
 800bfec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bff0:	f04f 0200 	mov.w	r2, #0
 800bff4:	4b68      	ldr	r3, [pc, #416]	; (800c198 <tuning+0x5b8>)
 800bff6:	f7fc fb61 	bl	80086bc <__aeabi_ddiv>
 800bffa:	4603      	mov	r3, r0
 800bffc:	460c      	mov	r4, r1
 800bffe:	4a65      	ldr	r2, [pc, #404]	; (800c194 <tuning+0x5b4>)
 800c000:	e9c2 3400 	strd	r3, r4, [r2]
				Flash_store();
 800c004:	f7fd fe60 	bl	8009cc8 <Flash_store>
				return ;
 800c008:	e0b0      	b.n	800c16c <tuning+0x58c>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800c00a:	2101      	movs	r1, #1
 800c00c:	485d      	ldr	r0, [pc, #372]	; (800c184 <tuning+0x5a4>)
 800c00e:	f001 fe81 	bl	800dd14 <HAL_GPIO_ReadPin>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	f47f af5f 	bne.w	800bed8 <tuning+0x2f8>
			}
	}
	HAL_Delay(100);
 800c01a:	2064      	movs	r0, #100	; 0x64
 800c01c:	f000 f95c 	bl	800c2d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800c020:	e098      	b.n	800c154 <tuning+0x574>
				lcd_init();
 800c022:	f7fd f979 	bl	8009318 <lcd_init>
				lcd_clear();
 800c026:	f7fd f9bb 	bl	80093a0 <lcd_clear>
				lcd_locate(0,0);
 800c02a:	2100      	movs	r1, #0
 800c02c:	2000      	movs	r0, #0
 800c02e:	f7fd f9c7 	bl	80093c0 <lcd_locate>
				lcd_printf("Kd");
 800c032:	485a      	ldr	r0, [pc, #360]	; (800c19c <tuning+0x5bc>)
 800c034:	f7fd f9ee 	bl	8009414 <lcd_printf>
				lcd_locate(0,1);
 800c038:	2101      	movs	r1, #1
 800c03a:	2000      	movs	r0, #0
 800c03c:	f7fd f9c0 	bl	80093c0 <lcd_locate>
				lcd_printf("%f",Kd);
 800c040:	4b54      	ldr	r3, [pc, #336]	; (800c194 <tuning+0x5b4>)
 800c042:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c046:	461a      	mov	r2, r3
 800c048:	4623      	mov	r3, r4
 800c04a:	484d      	ldr	r0, [pc, #308]	; (800c180 <tuning+0x5a0>)
 800c04c:	f7fd f9e2 	bl	8009414 <lcd_printf>
				if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)==0){
 800c050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c054:	484b      	ldr	r0, [pc, #300]	; (800c184 <tuning+0x5a4>)
 800c056:	f001 fe5d 	bl	800dd14 <HAL_GPIO_ReadPin>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10e      	bne.n	800c07e <tuning+0x49e>
					lcd_clear();
 800c060:	f7fd f99e 	bl	80093a0 <lcd_clear>
					Kd=Kd+1;
 800c064:	4b4b      	ldr	r3, [pc, #300]	; (800c194 <tuning+0x5b4>)
 800c066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c06a:	f04f 0200 	mov.w	r2, #0
 800c06e:	4b46      	ldr	r3, [pc, #280]	; (800c188 <tuning+0x5a8>)
 800c070:	f7fc f844 	bl	80080fc <__adddf3>
 800c074:	4603      	mov	r3, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4a46      	ldr	r2, [pc, #280]	; (800c194 <tuning+0x5b4>)
 800c07a:	e9c2 3400 	strd	r3, r4, [r2]
				}
				if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)==0){
 800c07e:	2104      	movs	r1, #4
 800c080:	4840      	ldr	r0, [pc, #256]	; (800c184 <tuning+0x5a4>)
 800c082:	f001 fe47 	bl	800dd14 <HAL_GPIO_ReadPin>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10e      	bne.n	800c0aa <tuning+0x4ca>
					lcd_clear();
 800c08c:	f7fd f988 	bl	80093a0 <lcd_clear>
					Kd=Kd-1;
 800c090:	4b40      	ldr	r3, [pc, #256]	; (800c194 <tuning+0x5b4>)
 800c092:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	4b3b      	ldr	r3, [pc, #236]	; (800c188 <tuning+0x5a8>)
 800c09c:	f7fc f82c 	bl	80080f8 <__aeabi_dsub>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	4a3b      	ldr	r2, [pc, #236]	; (800c194 <tuning+0x5b4>)
 800c0a6:	e9c2 3400 	strd	r3, r4, [r2]
				}
				if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)==0){
 800c0aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c0ae:	4835      	ldr	r0, [pc, #212]	; (800c184 <tuning+0x5a4>)
 800c0b0:	f001 fe30 	bl	800dd14 <HAL_GPIO_ReadPin>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d14c      	bne.n	800c154 <tuning+0x574>
					lcd_clear();
 800c0ba:	f7fd f971 	bl	80093a0 <lcd_clear>
					work_ram[0] = Kp;
 800c0be:	4b33      	ldr	r3, [pc, #204]	; (800c18c <tuning+0x5ac>)
 800c0c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	f7fc fca6 	bl	8008a18 <__aeabi_d2uiz>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	4b2f      	ldr	r3, [pc, #188]	; (800c190 <tuning+0x5b0>)
 800c0d2:	801a      	strh	r2, [r3, #0]
					work_ram[1] = Ki;
 800c0d4:	4b29      	ldr	r3, [pc, #164]	; (800c17c <tuning+0x59c>)
 800c0d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	4621      	mov	r1, r4
 800c0de:	f7fc fc9b 	bl	8008a18 <__aeabi_d2uiz>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <tuning+0x5b0>)
 800c0e8:	805a      	strh	r2, [r3, #2]
					work_ram[2] = Kd;
 800c0ea:	4b2a      	ldr	r3, [pc, #168]	; (800c194 <tuning+0x5b4>)
 800c0ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	f7fc fc90 	bl	8008a18 <__aeabi_d2uiz>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	4b24      	ldr	r3, [pc, #144]	; (800c190 <tuning+0x5b0>)
 800c0fe:	809a      	strh	r2, [r3, #4]
					Kp = (double)Kp/100;
 800c100:	4b22      	ldr	r3, [pc, #136]	; (800c18c <tuning+0x5ac>)
 800c102:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	4b23      	ldr	r3, [pc, #140]	; (800c198 <tuning+0x5b8>)
 800c10c:	f7fc fad6 	bl	80086bc <__aeabi_ddiv>
 800c110:	4603      	mov	r3, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4a1d      	ldr	r2, [pc, #116]	; (800c18c <tuning+0x5ac>)
 800c116:	e9c2 3400 	strd	r3, r4, [r2]
					Ki = (double)Ki/1000000;
 800c11a:	4b18      	ldr	r3, [pc, #96]	; (800c17c <tuning+0x59c>)
 800c11c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c120:	a313      	add	r3, pc, #76	; (adr r3, 800c170 <tuning+0x590>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7fc fac9 	bl	80086bc <__aeabi_ddiv>
 800c12a:	4603      	mov	r3, r0
 800c12c:	460c      	mov	r4, r1
 800c12e:	4a13      	ldr	r2, [pc, #76]	; (800c17c <tuning+0x59c>)
 800c130:	e9c2 3400 	strd	r3, r4, [r2]
					Kd = (double)Kd/100;
 800c134:	4b17      	ldr	r3, [pc, #92]	; (800c194 <tuning+0x5b4>)
 800c136:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c13a:	f04f 0200 	mov.w	r2, #0
 800c13e:	4b16      	ldr	r3, [pc, #88]	; (800c198 <tuning+0x5b8>)
 800c140:	f7fc fabc 	bl	80086bc <__aeabi_ddiv>
 800c144:	4603      	mov	r3, r0
 800c146:	460c      	mov	r4, r1
 800c148:	4a12      	ldr	r2, [pc, #72]	; (800c194 <tuning+0x5b4>)
 800c14a:	e9c2 3400 	strd	r3, r4, [r2]
					Flash_store();
 800c14e:	f7fd fdbb 	bl	8009cc8 <Flash_store>
					return ;
 800c152:	e00b      	b.n	800c16c <tuning+0x58c>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800c154:	2101      	movs	r1, #1
 800c156:	480b      	ldr	r0, [pc, #44]	; (800c184 <tuning+0x5a4>)
 800c158:	f001 fddc 	bl	800dd14 <HAL_GPIO_ReadPin>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f47f af5f 	bne.w	800c022 <tuning+0x442>
				}
	}
	HAL_Delay(100);
 800c164:	2064      	movs	r0, #100	; 0x64
 800c166:	f000 f8b7 	bl	800c2d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_0)){
 800c16a:	e5e5      	b.n	800bd38 <tuning+0x158>
	work_ram[2] = Kd;
	Kp = (double)Kp/100;
	Ki = (double)Ki/1000000;
	Kd = (double)Kd/100;
	Flash_store();
}
 800c16c:	bd98      	pop	{r3, r4, r7, pc}
 800c16e:	bf00      	nop
 800c170:	00000000 	.word	0x00000000
 800c174:	412e8480 	.word	0x412e8480
 800c178:	08015b60 	.word	0x08015b60
 800c17c:	20000220 	.word	0x20000220
 800c180:	08015b5c 	.word	0x08015b5c
 800c184:	40020800 	.word	0x40020800
 800c188:	3ff00000 	.word	0x3ff00000
 800c18c:	20000218 	.word	0x20000218
 800c190:	200004e0 	.word	0x200004e0
 800c194:	20000228 	.word	0x20000228
 800c198:	40590000 	.word	0x40590000
 800c19c:	08015b64 	.word	0x08015b64

0800c1a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c1a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c1d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c1a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c1a6:	e003      	b.n	800c1b0 <LoopCopyDataInit>

0800c1a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c1aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c1ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c1ae:	3104      	adds	r1, #4

0800c1b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c1b0:	480b      	ldr	r0, [pc, #44]	; (800c1e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c1b2:	4b0c      	ldr	r3, [pc, #48]	; (800c1e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c1b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c1b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c1b8:	d3f6      	bcc.n	800c1a8 <CopyDataInit>
  ldr  r2, =_sbss
 800c1ba:	4a0b      	ldr	r2, [pc, #44]	; (800c1e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c1bc:	e002      	b.n	800c1c4 <LoopFillZerobss>

0800c1be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c1be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c1c0:	f842 3b04 	str.w	r3, [r2], #4

0800c1c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c1c4:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c1c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c1c8:	d3f9      	bcc.n	800c1be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c1ca:	f7ff fcf1 	bl	800bbb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c1ce:	f005 f991 	bl	80114f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c1d2:	f7fe fc13 	bl	800a9fc <main>
  bx  lr    
 800c1d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c1d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c1dc:	08015eb8 	.word	0x08015eb8
  ldr  r0, =_sdata
 800c1e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c1e4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800c1e8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800c1ec:	20018648 	.word	0x20018648

0800c1f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c1f0:	e7fe      	b.n	800c1f0 <ADC_IRQHandler>
	...

0800c1f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c1f8:	4b0e      	ldr	r3, [pc, #56]	; (800c234 <HAL_Init+0x40>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a0d      	ldr	r2, [pc, #52]	; (800c234 <HAL_Init+0x40>)
 800c1fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c204:	4b0b      	ldr	r3, [pc, #44]	; (800c234 <HAL_Init+0x40>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a0a      	ldr	r2, [pc, #40]	; (800c234 <HAL_Init+0x40>)
 800c20a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c20e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c210:	4b08      	ldr	r3, [pc, #32]	; (800c234 <HAL_Init+0x40>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a07      	ldr	r2, [pc, #28]	; (800c234 <HAL_Init+0x40>)
 800c216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c21a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c21c:	2003      	movs	r0, #3
 800c21e:	f000 fd37 	bl	800cc90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c222:	2000      	movs	r0, #0
 800c224:	f000 f808 	bl	800c238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c228:	f7ff f8de 	bl	800b3e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	40023c00 	.word	0x40023c00

0800c238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c240:	4b12      	ldr	r3, [pc, #72]	; (800c28c <HAL_InitTick+0x54>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b12      	ldr	r3, [pc, #72]	; (800c290 <HAL_InitTick+0x58>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	4619      	mov	r1, r3
 800c24a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c24e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c252:	fbb2 f3f3 	udiv	r3, r2, r3
 800c256:	4618      	mov	r0, r3
 800c258:	f000 fd4f 	bl	800ccfa <HAL_SYSTICK_Config>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d001      	beq.n	800c266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e00e      	b.n	800c284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b0f      	cmp	r3, #15
 800c26a:	d80a      	bhi.n	800c282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c26c:	2200      	movs	r2, #0
 800c26e:	6879      	ldr	r1, [r7, #4]
 800c270:	f04f 30ff 	mov.w	r0, #4294967295
 800c274:	f000 fd17 	bl	800cca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c278:	4a06      	ldr	r2, [pc, #24]	; (800c294 <HAL_InitTick+0x5c>)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	e000      	b.n	800c284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	2000000c 	.word	0x2000000c
 800c290:	20000014 	.word	0x20000014
 800c294:	20000010 	.word	0x20000010

0800c298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c298:	b480      	push	{r7}
 800c29a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <HAL_IncTick+0x20>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <HAL_IncTick+0x24>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	4a04      	ldr	r2, [pc, #16]	; (800c2bc <HAL_IncTick+0x24>)
 800c2aa:	6013      	str	r3, [r2, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	20000014 	.word	0x20000014
 800c2bc:	20018620 	.word	0x20018620

0800c2c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	af00      	add	r7, sp, #0
  return uwTick;
 800c2c4:	4b03      	ldr	r3, [pc, #12]	; (800c2d4 <HAL_GetTick+0x14>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	20018620 	.word	0x20018620

0800c2d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c2e0:	f7ff ffee 	bl	800c2c0 <HAL_GetTick>
 800c2e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f0:	d005      	beq.n	800c2fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c2f2:	4b09      	ldr	r3, [pc, #36]	; (800c318 <HAL_Delay+0x40>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c2fe:	bf00      	nop
 800c300:	f7ff ffde 	bl	800c2c0 <HAL_GetTick>
 800c304:	4602      	mov	r2, r0
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d8f7      	bhi.n	800c300 <HAL_Delay+0x28>
  {
  }
}
 800c310:	bf00      	nop
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20000014 	.word	0x20000014

0800c31c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e033      	b.n	800c39a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d109      	bne.n	800c34e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff f87c 	bl	800b438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c352:	f003 0310 	and.w	r3, r3, #16
 800c356:	2b00      	cmp	r3, #0
 800c358:	d118      	bne.n	800c38c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800c362:	f023 0302 	bic.w	r3, r3, #2
 800c366:	f043 0202 	orr.w	r2, r3, #2
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa40 	bl	800c7f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37e:	f023 0303 	bic.w	r3, r3, #3
 800c382:	f043 0201 	orr.w	r2, r3, #1
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	641a      	str	r2, [r3, #64]	; 0x40
 800c38a:	e001      	b.n	800c390 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d101      	bne.n	800c3c2 <HAL_ADC_Start_DMA+0x1e>
 800c3be:	2302      	movs	r3, #2
 800c3c0:	e0cc      	b.n	800c55c <HAL_ADC_Start_DMA+0x1b8>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d018      	beq.n	800c40a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689a      	ldr	r2, [r3, #8]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 0201 	orr.w	r2, r2, #1
 800c3e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c3e8:	4b5e      	ldr	r3, [pc, #376]	; (800c564 <HAL_ADC_Start_DMA+0x1c0>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a5e      	ldr	r2, [pc, #376]	; (800c568 <HAL_ADC_Start_DMA+0x1c4>)
 800c3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f2:	0c9a      	lsrs	r2, r3, #18
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	4413      	add	r3, r2
 800c3fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c3fc:	e002      	b.n	800c404 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	3b01      	subs	r3, #1
 800c402:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1f9      	bne.n	800c3fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b01      	cmp	r3, #1
 800c416:	f040 80a0 	bne.w	800c55a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c440:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c444:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c458:	d106      	bne.n	800c468 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	f023 0206 	bic.w	r2, r3, #6
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	645a      	str	r2, [r3, #68]	; 0x44
 800c466:	e002      	b.n	800c46e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c476:	4b3d      	ldr	r3, [pc, #244]	; (800c56c <HAL_ADC_Start_DMA+0x1c8>)
 800c478:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	4a3c      	ldr	r2, [pc, #240]	; (800c570 <HAL_ADC_Start_DMA+0x1cc>)
 800c480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c486:	4a3b      	ldr	r2, [pc, #236]	; (800c574 <HAL_ADC_Start_DMA+0x1d0>)
 800c488:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	4a3a      	ldr	r2, [pc, #232]	; (800c578 <HAL_ADC_Start_DMA+0x1d4>)
 800c490:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800c49a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c4aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689a      	ldr	r2, [r3, #8]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	334c      	adds	r3, #76	; 0x4c
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f000 fcd0 	bl	800ce70 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f003 031f 	and.w	r3, r3, #31
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d12a      	bne.n	800c532 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a26      	ldr	r2, [pc, #152]	; (800c57c <HAL_ADC_Start_DMA+0x1d8>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d015      	beq.n	800c512 <HAL_ADC_Start_DMA+0x16e>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a25      	ldr	r2, [pc, #148]	; (800c580 <HAL_ADC_Start_DMA+0x1dc>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d105      	bne.n	800c4fc <HAL_ADC_Start_DMA+0x158>
 800c4f0:	4b1e      	ldr	r3, [pc, #120]	; (800c56c <HAL_ADC_Start_DMA+0x1c8>)
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f003 031f 	and.w	r3, r3, #31
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a20      	ldr	r2, [pc, #128]	; (800c584 <HAL_ADC_Start_DMA+0x1e0>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d129      	bne.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
 800c506:	4b19      	ldr	r3, [pc, #100]	; (800c56c <HAL_ADC_Start_DMA+0x1c8>)
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f003 031f 	and.w	r3, r3, #31
 800c50e:	2b0f      	cmp	r3, #15
 800c510:	d823      	bhi.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d11c      	bne.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	689a      	ldr	r2, [r3, #8]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c52e:	609a      	str	r2, [r3, #8]
 800c530:	e013      	b.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a11      	ldr	r2, [pc, #68]	; (800c57c <HAL_ADC_Start_DMA+0x1d8>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d10e      	bne.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d107      	bne.n	800c55a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800c558:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	2000000c 	.word	0x2000000c
 800c568:	431bde83 	.word	0x431bde83
 800c56c:	40012300 	.word	0x40012300
 800c570:	0800c9ed 	.word	0x0800c9ed
 800c574:	0800caa7 	.word	0x0800caa7
 800c578:	0800cac3 	.word	0x0800cac3
 800c57c:	40012000 	.word	0x40012000
 800c580:	40012100 	.word	0x40012100
 800c584:	40012200 	.word	0x40012200

0800c588 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d101      	bne.n	800c5cc <HAL_ADC_ConfigChannel+0x1c>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e105      	b.n	800c7d8 <HAL_ADC_ConfigChannel+0x228>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b09      	cmp	r3, #9
 800c5da:	d925      	bls.n	800c628 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68d9      	ldr	r1, [r3, #12]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	3b1e      	subs	r3, #30
 800c5f2:	2207      	movs	r2, #7
 800c5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f8:	43da      	mvns	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	400a      	ands	r2, r1
 800c600:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68d9      	ldr	r1, [r3, #12]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	b29b      	uxth	r3, r3
 800c612:	4618      	mov	r0, r3
 800c614:	4603      	mov	r3, r0
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	4403      	add	r3, r0
 800c61a:	3b1e      	subs	r3, #30
 800c61c:	409a      	lsls	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	430a      	orrs	r2, r1
 800c624:	60da      	str	r2, [r3, #12]
 800c626:	e022      	b.n	800c66e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6919      	ldr	r1, [r3, #16]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	b29b      	uxth	r3, r3
 800c634:	461a      	mov	r2, r3
 800c636:	4613      	mov	r3, r2
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	4413      	add	r3, r2
 800c63c:	2207      	movs	r2, #7
 800c63e:	fa02 f303 	lsl.w	r3, r2, r3
 800c642:	43da      	mvns	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	400a      	ands	r2, r1
 800c64a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6919      	ldr	r1, [r3, #16]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	689a      	ldr	r2, [r3, #8]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	4618      	mov	r0, r3
 800c65e:	4603      	mov	r3, r0
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4403      	add	r3, r0
 800c664:	409a      	lsls	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	430a      	orrs	r2, r1
 800c66c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	2b06      	cmp	r3, #6
 800c674:	d824      	bhi.n	800c6c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	4613      	mov	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	3b05      	subs	r3, #5
 800c688:	221f      	movs	r2, #31
 800c68a:	fa02 f303 	lsl.w	r3, r2, r3
 800c68e:	43da      	mvns	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	400a      	ands	r2, r1
 800c696:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3b05      	subs	r3, #5
 800c6b2:	fa00 f203 	lsl.w	r2, r0, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	635a      	str	r2, [r3, #52]	; 0x34
 800c6be:	e04c      	b.n	800c75a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	2b0c      	cmp	r3, #12
 800c6c6:	d824      	bhi.n	800c712 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	3b23      	subs	r3, #35	; 0x23
 800c6da:	221f      	movs	r2, #31
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	43da      	mvns	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	400a      	ands	r2, r1
 800c6e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	3b23      	subs	r3, #35	; 0x23
 800c704:	fa00 f203 	lsl.w	r2, r0, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	430a      	orrs	r2, r1
 800c70e:	631a      	str	r2, [r3, #48]	; 0x30
 800c710:	e023      	b.n	800c75a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	4613      	mov	r3, r2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4413      	add	r3, r2
 800c722:	3b41      	subs	r3, #65	; 0x41
 800c724:	221f      	movs	r2, #31
 800c726:	fa02 f303 	lsl.w	r3, r2, r3
 800c72a:	43da      	mvns	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	400a      	ands	r2, r1
 800c732:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4618      	mov	r0, r3
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	3b41      	subs	r3, #65	; 0x41
 800c74e:	fa00 f203 	lsl.w	r2, r0, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	430a      	orrs	r2, r1
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c75a:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <HAL_ADC_ConfigChannel+0x234>)
 800c75c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a21      	ldr	r2, [pc, #132]	; (800c7e8 <HAL_ADC_ConfigChannel+0x238>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d109      	bne.n	800c77c <HAL_ADC_ConfigChannel+0x1cc>
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b12      	cmp	r3, #18
 800c76e:	d105      	bne.n	800c77c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a19      	ldr	r2, [pc, #100]	; (800c7e8 <HAL_ADC_ConfigChannel+0x238>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d123      	bne.n	800c7ce <HAL_ADC_ConfigChannel+0x21e>
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b10      	cmp	r3, #16
 800c78c:	d003      	beq.n	800c796 <HAL_ADC_ConfigChannel+0x1e6>
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b11      	cmp	r3, #17
 800c794:	d11b      	bne.n	800c7ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b10      	cmp	r3, #16
 800c7a8:	d111      	bne.n	800c7ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <HAL_ADC_ConfigChannel+0x23c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a10      	ldr	r2, [pc, #64]	; (800c7f0 <HAL_ADC_ConfigChannel+0x240>)
 800c7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b4:	0c9a      	lsrs	r2, r3, #18
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	4413      	add	r3, r2
 800c7bc:	005b      	lsls	r3, r3, #1
 800c7be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c7c0:	e002      	b.n	800c7c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1f9      	bne.n	800c7c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	40012300 	.word	0x40012300
 800c7e8:	40012000 	.word	0x40012000
 800c7ec:	2000000c 	.word	0x2000000c
 800c7f0:	431bde83 	.word	0x431bde83

0800c7f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c7fc:	4b79      	ldr	r3, [pc, #484]	; (800c9e4 <ADC_Init+0x1f0>)
 800c7fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	431a      	orrs	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c828:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	6859      	ldr	r1, [r3, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	021a      	lsls	r2, r3, #8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	430a      	orrs	r2, r1
 800c83c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c84c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6859      	ldr	r1, [r3, #4]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	430a      	orrs	r2, r1
 800c85e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689a      	ldr	r2, [r3, #8]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c86e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6899      	ldr	r1, [r3, #8]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68da      	ldr	r2, [r3, #12]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	430a      	orrs	r2, r1
 800c880:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	4a58      	ldr	r2, [pc, #352]	; (800c9e8 <ADC_Init+0x1f4>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d022      	beq.n	800c8d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c89a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6899      	ldr	r1, [r3, #8]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c8bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6899      	ldr	r1, [r3, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	609a      	str	r2, [r3, #8]
 800c8d0:	e00f      	b.n	800c8f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689a      	ldr	r2, [r3, #8]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c8e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c8f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	689a      	ldr	r2, [r3, #8]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f022 0202 	bic.w	r2, r2, #2
 800c900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6899      	ldr	r1, [r3, #8]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7e1b      	ldrb	r3, [r3, #24]
 800c90c:	005a      	lsls	r2, r3, #1
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d01b      	beq.n	800c958 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c92e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c93e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6859      	ldr	r1, [r3, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	3b01      	subs	r3, #1
 800c94c:	035a      	lsls	r2, r3, #13
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	430a      	orrs	r2, r1
 800c954:	605a      	str	r2, [r3, #4]
 800c956:	e007      	b.n	800c968 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c966:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	3b01      	subs	r3, #1
 800c984:	051a      	lsls	r2, r3, #20
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	430a      	orrs	r2, r1
 800c98c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	689a      	ldr	r2, [r3, #8]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c99c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6899      	ldr	r1, [r3, #8]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9aa:	025a      	lsls	r2, r3, #9
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	689a      	ldr	r2, [r3, #8]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6899      	ldr	r1, [r3, #8]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	029a      	lsls	r2, r3, #10
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]
}
 800c9d8:	bf00      	nop
 800c9da:	3714      	adds	r7, #20
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	40012300 	.word	0x40012300
 800c9e8:	0f000001 	.word	0x0f000001

0800c9ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d13c      	bne.n	800ca80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d12b      	bne.n	800ca78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d127      	bne.n	800ca78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d006      	beq.n	800ca44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d119      	bne.n	800ca78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0220 	bic.w	r2, r2, #32
 800ca52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d105      	bne.n	800ca78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	f043 0201 	orr.w	r2, r3, #1
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f7fd fb01 	bl	800a080 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ca7e:	e00e      	b.n	800ca9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff fd85 	bl	800c59c <HAL_ADC_ErrorCallback>
}
 800ca92:	e004      	b.n	800ca9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	4798      	blx	r3
}
 800ca9e:	bf00      	nop
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff fd67 	bl	800c588 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2240      	movs	r2, #64	; 0x40
 800cad4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cada:	f043 0204 	orr.w	r2, r3, #4
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f7ff fd5a 	bl	800c59c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cae8:	bf00      	nop
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f003 0307 	and.w	r3, r3, #7
 800cafe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cb00:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <__NVIC_SetPriorityGrouping+0x44>)
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cb18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800cb1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cb22:	4a04      	ldr	r2, [pc, #16]	; (800cb34 <__NVIC_SetPriorityGrouping+0x44>)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	60d3      	str	r3, [r2, #12]
}
 800cb28:	bf00      	nop
 800cb2a:	3714      	adds	r7, #20
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	e000ed00 	.word	0xe000ed00

0800cb38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cb3c:	4b04      	ldr	r3, [pc, #16]	; (800cb50 <__NVIC_GetPriorityGrouping+0x18>)
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	0a1b      	lsrs	r3, r3, #8
 800cb42:	f003 0307 	and.w	r3, r3, #7
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	e000ed00 	.word	0xe000ed00

0800cb54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	db0b      	blt.n	800cb7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	f003 021f 	and.w	r2, r3, #31
 800cb6c:	4907      	ldr	r1, [pc, #28]	; (800cb8c <__NVIC_EnableIRQ+0x38>)
 800cb6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb72:	095b      	lsrs	r3, r3, #5
 800cb74:	2001      	movs	r0, #1
 800cb76:	fa00 f202 	lsl.w	r2, r0, r2
 800cb7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800cb7e:	bf00      	nop
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	e000e100 	.word	0xe000e100

0800cb90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	db0a      	blt.n	800cbba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	490c      	ldr	r1, [pc, #48]	; (800cbdc <__NVIC_SetPriority+0x4c>)
 800cbaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbae:	0112      	lsls	r2, r2, #4
 800cbb0:	b2d2      	uxtb	r2, r2
 800cbb2:	440b      	add	r3, r1
 800cbb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cbb8:	e00a      	b.n	800cbd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	4908      	ldr	r1, [pc, #32]	; (800cbe0 <__NVIC_SetPriority+0x50>)
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	3b04      	subs	r3, #4
 800cbc8:	0112      	lsls	r2, r2, #4
 800cbca:	b2d2      	uxtb	r2, r2
 800cbcc:	440b      	add	r3, r1
 800cbce:	761a      	strb	r2, [r3, #24]
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	e000e100 	.word	0xe000e100
 800cbe0:	e000ed00 	.word	0xe000ed00

0800cbe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b089      	sub	sp, #36	; 0x24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f003 0307 	and.w	r3, r3, #7
 800cbf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	f1c3 0307 	rsb	r3, r3, #7
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	bf28      	it	cs
 800cc02:	2304      	movcs	r3, #4
 800cc04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	3304      	adds	r3, #4
 800cc0a:	2b06      	cmp	r3, #6
 800cc0c:	d902      	bls.n	800cc14 <NVIC_EncodePriority+0x30>
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	3b03      	subs	r3, #3
 800cc12:	e000      	b.n	800cc16 <NVIC_EncodePriority+0x32>
 800cc14:	2300      	movs	r3, #0
 800cc16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc18:	f04f 32ff 	mov.w	r2, #4294967295
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc22:	43da      	mvns	r2, r3
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	401a      	ands	r2, r3
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cc2c:	f04f 31ff 	mov.w	r1, #4294967295
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	fa01 f303 	lsl.w	r3, r1, r3
 800cc36:	43d9      	mvns	r1, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc3c:	4313      	orrs	r3, r2
         );
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3724      	adds	r7, #36	; 0x24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr
	...

0800cc4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc5c:	d301      	bcc.n	800cc62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e00f      	b.n	800cc82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cc62:	4a0a      	ldr	r2, [pc, #40]	; (800cc8c <SysTick_Config+0x40>)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cc6a:	210f      	movs	r1, #15
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	f7ff ff8e 	bl	800cb90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800cc74:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <SysTick_Config+0x40>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800cc7a:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <SysTick_Config+0x40>)
 800cc7c:	2207      	movs	r2, #7
 800cc7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	e000e010 	.word	0xe000e010

0800cc90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff ff29 	bl	800caf0 <__NVIC_SetPriorityGrouping>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b086      	sub	sp, #24
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	4603      	mov	r3, r0
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	607a      	str	r2, [r7, #4]
 800ccb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ccb8:	f7ff ff3e 	bl	800cb38 <__NVIC_GetPriorityGrouping>
 800ccbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	6978      	ldr	r0, [r7, #20]
 800ccc4:	f7ff ff8e 	bl	800cbe4 <NVIC_EncodePriority>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff ff5d 	bl	800cb90 <__NVIC_SetPriority>
}
 800ccd6:	bf00      	nop
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	4603      	mov	r3, r0
 800cce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff ff31 	bl	800cb54 <__NVIC_EnableIRQ>
}
 800ccf2:	bf00      	nop
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff ffa2 	bl	800cc4c <SysTick_Config>
 800cd08:	4603      	mov	r3, r0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800cd20:	f7ff face 	bl	800c2c0 <HAL_GetTick>
 800cd24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e099      	b.n	800ce64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 0201 	bic.w	r2, r2, #1
 800cd4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cd50:	e00f      	b.n	800cd72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800cd52:	f7ff fab5 	bl	800c2c0 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b05      	cmp	r3, #5
 800cd5e:	d908      	bls.n	800cd72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2220      	movs	r2, #32
 800cd64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2203      	movs	r2, #3
 800cd6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800cd6e:	2303      	movs	r3, #3
 800cd70:	e078      	b.n	800ce64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1e8      	bne.n	800cd52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	4b38      	ldr	r3, [pc, #224]	; (800ce6c <HAL_DMA_Init+0x158>)
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cd9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cdaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cdb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d107      	bne.n	800cddc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	695b      	ldr	r3, [r3, #20]
 800cdea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f023 0307 	bic.w	r3, r3, #7
 800cdf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d117      	bne.n	800ce36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fa91 	bl	800d340 <DMA_CheckFifoParam>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d008      	beq.n	800ce36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2240      	movs	r2, #64	; 0x40
 800ce28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ce32:	2301      	movs	r3, #1
 800ce34:	e016      	b.n	800ce64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fa48 	bl	800d2d4 <DMA_CalcBaseAndBitshift>
 800ce44:	4603      	mov	r3, r0
 800ce46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce4c:	223f      	movs	r2, #63	; 0x3f
 800ce4e:	409a      	lsls	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	f010803f 	.word	0xf010803f

0800ce70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_DMA_Start_IT+0x26>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e040      	b.n	800cf18 <HAL_DMA_Start_IT+0xa8>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d12f      	bne.n	800cf0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2202      	movs	r2, #2
 800ceae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 f9da 	bl	800d278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec8:	223f      	movs	r2, #63	; 0x3f
 800ceca:	409a      	lsls	r2, r3
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f042 0216 	orr.w	r2, r2, #22
 800cede:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d007      	beq.n	800cef8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0208 	orr.w	r2, r2, #8
 800cef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f042 0201 	orr.w	r2, r2, #1
 800cf06:	601a      	str	r2, [r3, #0]
 800cf08:	e005      	b.n	800cf16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800cf12:	2302      	movs	r3, #2
 800cf14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d004      	beq.n	800cf3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2280      	movs	r2, #128	; 0x80
 800cf38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e00c      	b.n	800cf58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2205      	movs	r2, #5
 800cf42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0201 	bic.w	r2, r2, #1
 800cf54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cf70:	4b92      	ldr	r3, [pc, #584]	; (800d1bc <HAL_DMA_IRQHandler+0x258>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a92      	ldr	r2, [pc, #584]	; (800d1c0 <HAL_DMA_IRQHandler+0x25c>)
 800cf76:	fba2 2303 	umull	r2, r3, r2, r3
 800cf7a:	0a9b      	lsrs	r3, r3, #10
 800cf7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf8e:	2208      	movs	r2, #8
 800cf90:	409a      	lsls	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4013      	ands	r3, r2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d01a      	beq.n	800cfd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d013      	beq.n	800cfd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f022 0204 	bic.w	r2, r2, #4
 800cfb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	409a      	lsls	r2, r3
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfc8:	f043 0201 	orr.w	r2, r3, #1
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	409a      	lsls	r2, r3
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4013      	ands	r3, r2
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d012      	beq.n	800d006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cff2:	2201      	movs	r2, #1
 800cff4:	409a      	lsls	r2, r3
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffe:	f043 0202 	orr.w	r2, r3, #2
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d00a:	2204      	movs	r2, #4
 800d00c:	409a      	lsls	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	4013      	ands	r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d012      	beq.n	800d03c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 0302 	and.w	r3, r3, #2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00b      	beq.n	800d03c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d028:	2204      	movs	r2, #4
 800d02a:	409a      	lsls	r2, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d034:	f043 0204 	orr.w	r2, r3, #4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d040:	2210      	movs	r2, #16
 800d042:	409a      	lsls	r2, r3
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4013      	ands	r3, r2
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d043      	beq.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 0308 	and.w	r3, r3, #8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d03c      	beq.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d05e:	2210      	movs	r2, #16
 800d060:	409a      	lsls	r2, r3
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d018      	beq.n	800d0a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d108      	bne.n	800d094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d024      	beq.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	4798      	blx	r3
 800d092:	e01f      	b.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d01b      	beq.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	4798      	blx	r3
 800d0a4:	e016      	b.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d107      	bne.n	800d0c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f022 0208 	bic.w	r2, r2, #8
 800d0c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d003      	beq.n	800d0d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0d8:	2220      	movs	r2, #32
 800d0da:	409a      	lsls	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	4013      	ands	r3, r2
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 808e 	beq.w	800d202 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f003 0310 	and.w	r3, r3, #16
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 8086 	beq.w	800d202 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	409a      	lsls	r2, r3
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	2b05      	cmp	r3, #5
 800d10c:	d136      	bne.n	800d17c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0216 	bic.w	r2, r2, #22
 800d11c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	695a      	ldr	r2, [r3, #20]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d12c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <HAL_DMA_IRQHandler+0x1da>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f022 0208 	bic.w	r2, r2, #8
 800d14c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d152:	223f      	movs	r2, #63	; 0x3f
 800d154:	409a      	lsls	r2, r3
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d07d      	beq.n	800d26e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	4798      	blx	r3
        }
        return;
 800d17a:	e078      	b.n	800d26e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d01c      	beq.n	800d1c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d194:	2b00      	cmp	r3, #0
 800d196:	d108      	bne.n	800d1aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d030      	beq.n	800d202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	4798      	blx	r3
 800d1a8:	e02b      	b.n	800d202 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d027      	beq.n	800d202 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	4798      	blx	r3
 800d1ba:	e022      	b.n	800d202 <HAL_DMA_IRQHandler+0x29e>
 800d1bc:	2000000c 	.word	0x2000000c
 800d1c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10f      	bne.n	800d1f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f022 0210 	bic.w	r2, r2, #16
 800d1e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d206:	2b00      	cmp	r3, #0
 800d208:	d032      	beq.n	800d270 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d022      	beq.n	800d25c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2205      	movs	r2, #5
 800d21a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f022 0201 	bic.w	r2, r2, #1
 800d22c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	3301      	adds	r3, #1
 800d232:	60bb      	str	r3, [r7, #8]
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	429a      	cmp	r2, r3
 800d238:	d307      	bcc.n	800d24a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1f2      	bne.n	800d22e <HAL_DMA_IRQHandler+0x2ca>
 800d248:	e000      	b.n	800d24c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800d24a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	4798      	blx	r3
 800d26c:	e000      	b.n	800d270 <HAL_DMA_IRQHandler+0x30c>
        return;
 800d26e:	bf00      	nop
    }
  }
}
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop

0800d278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	2b40      	cmp	r3, #64	; 0x40
 800d2a4:	d108      	bne.n	800d2b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d2b6:	e007      	b.n	800d2c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68ba      	ldr	r2, [r7, #8]
 800d2be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	60da      	str	r2, [r3, #12]
}
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	3b10      	subs	r3, #16
 800d2e4:	4a14      	ldr	r2, [pc, #80]	; (800d338 <DMA_CalcBaseAndBitshift+0x64>)
 800d2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ea:	091b      	lsrs	r3, r3, #4
 800d2ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d2ee:	4a13      	ldr	r2, [pc, #76]	; (800d33c <DMA_CalcBaseAndBitshift+0x68>)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d909      	bls.n	800d316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d30a:	f023 0303 	bic.w	r3, r3, #3
 800d30e:	1d1a      	adds	r2, r3, #4
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	659a      	str	r2, [r3, #88]	; 0x58
 800d314:	e007      	b.n	800d326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d31e:	f023 0303 	bic.w	r3, r3, #3
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	aaaaaaab 	.word	0xaaaaaaab
 800d33c:	08015b80 	.word	0x08015b80

0800d340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d11f      	bne.n	800d39a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d855      	bhi.n	800d40c <DMA_CheckFifoParam+0xcc>
 800d360:	a201      	add	r2, pc, #4	; (adr r2, 800d368 <DMA_CheckFifoParam+0x28>)
 800d362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d366:	bf00      	nop
 800d368:	0800d379 	.word	0x0800d379
 800d36c:	0800d38b 	.word	0x0800d38b
 800d370:	0800d379 	.word	0x0800d379
 800d374:	0800d40d 	.word	0x0800d40d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d380:	2b00      	cmp	r3, #0
 800d382:	d045      	beq.n	800d410 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d388:	e042      	b.n	800d410 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d392:	d13f      	bne.n	800d414 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d398:	e03c      	b.n	800d414 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3a2:	d121      	bne.n	800d3e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d836      	bhi.n	800d418 <DMA_CheckFifoParam+0xd8>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <DMA_CheckFifoParam+0x70>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3c1 	.word	0x0800d3c1
 800d3b4:	0800d3c7 	.word	0x0800d3c7
 800d3b8:	0800d3c1 	.word	0x0800d3c1
 800d3bc:	0800d3d9 	.word	0x0800d3d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3c4:	e02f      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d024      	beq.n	800d41c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d3d6:	e021      	b.n	800d41c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800d3e0:	d11e      	bne.n	800d420 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d3e6:	e01b      	b.n	800d420 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d902      	bls.n	800d3f4 <DMA_CheckFifoParam+0xb4>
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d003      	beq.n	800d3fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d3f2:	e018      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f8:	e015      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00e      	beq.n	800d424 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	73fb      	strb	r3, [r7, #15]
      break;
 800d40a:	e00b      	b.n	800d424 <DMA_CheckFifoParam+0xe4>
      break;
 800d40c:	bf00      	nop
 800d40e:	e00a      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;
 800d410:	bf00      	nop
 800d412:	e008      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;
 800d414:	bf00      	nop
 800d416:	e006      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;
 800d418:	bf00      	nop
 800d41a:	e004      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;
 800d41c:	bf00      	nop
 800d41e:	e002      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;   
 800d420:	bf00      	nop
 800d422:	e000      	b.n	800d426 <DMA_CheckFifoParam+0xe6>
      break;
 800d424:	bf00      	nop
    }
  } 
  
  return status; 
 800d426:	7bfb      	ldrb	r3, [r7, #15]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d446:	4b23      	ldr	r3, [pc, #140]	; (800d4d4 <HAL_FLASH_Program+0xa0>)
 800d448:	7e1b      	ldrb	r3, [r3, #24]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d101      	bne.n	800d452 <HAL_FLASH_Program+0x1e>
 800d44e:	2302      	movs	r3, #2
 800d450:	e03b      	b.n	800d4ca <HAL_FLASH_Program+0x96>
 800d452:	4b20      	ldr	r3, [pc, #128]	; (800d4d4 <HAL_FLASH_Program+0xa0>)
 800d454:	2201      	movs	r2, #1
 800d456:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d458:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d45c:	f000 f870 	bl	800d540 <FLASH_WaitForLastOperation>
 800d460:	4603      	mov	r3, r0
 800d462:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d12b      	bne.n	800d4c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d105      	bne.n	800d47c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800d470:	783b      	ldrb	r3, [r7, #0]
 800d472:	4619      	mov	r1, r3
 800d474:	68b8      	ldr	r0, [r7, #8]
 800d476:	f000 f919 	bl	800d6ac <FLASH_Program_Byte>
 800d47a:	e016      	b.n	800d4aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d105      	bne.n	800d48e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800d482:	883b      	ldrh	r3, [r7, #0]
 800d484:	4619      	mov	r1, r3
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f000 f8ec 	bl	800d664 <FLASH_Program_HalfWord>
 800d48c:	e00d      	b.n	800d4aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b02      	cmp	r3, #2
 800d492:	d105      	bne.n	800d4a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	4619      	mov	r1, r3
 800d498:	68b8      	ldr	r0, [r7, #8]
 800d49a:	f000 f8c1 	bl	800d620 <FLASH_Program_Word>
 800d49e:	e004      	b.n	800d4aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800d4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4a4:	68b8      	ldr	r0, [r7, #8]
 800d4a6:	f000 f88b 	bl	800d5c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d4aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d4ae:	f000 f847 	bl	800d540 <FLASH_WaitForLastOperation>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800d4b6:	4b08      	ldr	r3, [pc, #32]	; (800d4d8 <HAL_FLASH_Program+0xa4>)
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <HAL_FLASH_Program+0xa4>)
 800d4bc:	f023 0301 	bic.w	r3, r3, #1
 800d4c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d4c2:	4b04      	ldr	r3, [pc, #16]	; (800d4d4 <HAL_FLASH_Program+0xa0>)
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20018624 	.word	0x20018624
 800d4d8:	40023c00 	.word	0x40023c00

0800d4dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <HAL_FLASH_Unlock+0x38>)
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da0b      	bge.n	800d506 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d4ee:	4b09      	ldr	r3, [pc, #36]	; (800d514 <HAL_FLASH_Unlock+0x38>)
 800d4f0:	4a09      	ldr	r2, [pc, #36]	; (800d518 <HAL_FLASH_Unlock+0x3c>)
 800d4f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d4f4:	4b07      	ldr	r3, [pc, #28]	; (800d514 <HAL_FLASH_Unlock+0x38>)
 800d4f6:	4a09      	ldr	r2, [pc, #36]	; (800d51c <HAL_FLASH_Unlock+0x40>)
 800d4f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800d4fa:	4b06      	ldr	r3, [pc, #24]	; (800d514 <HAL_FLASH_Unlock+0x38>)
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da01      	bge.n	800d506 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d506:	79fb      	ldrb	r3, [r7, #7]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	40023c00 	.word	0x40023c00
 800d518:	45670123 	.word	0x45670123
 800d51c:	cdef89ab 	.word	0xcdef89ab

0800d520 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d520:	b480      	push	{r7}
 800d522:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800d524:	4b05      	ldr	r3, [pc, #20]	; (800d53c <HAL_FLASH_Lock+0x1c>)
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	4a04      	ldr	r2, [pc, #16]	; (800d53c <HAL_FLASH_Lock+0x1c>)
 800d52a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d52e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	40023c00 	.word	0x40023c00

0800d540 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d54c:	4b1a      	ldr	r3, [pc, #104]	; (800d5b8 <FLASH_WaitForLastOperation+0x78>)
 800d54e:	2200      	movs	r2, #0
 800d550:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800d552:	f7fe feb5 	bl	800c2c0 <HAL_GetTick>
 800d556:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800d558:	e010      	b.n	800d57c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d00c      	beq.n	800d57c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d007      	beq.n	800d578 <FLASH_WaitForLastOperation+0x38>
 800d568:	f7fe feaa 	bl	800c2c0 <HAL_GetTick>
 800d56c:	4602      	mov	r2, r0
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	429a      	cmp	r2, r3
 800d576:	d201      	bcs.n	800d57c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800d578:	2303      	movs	r3, #3
 800d57a:	e019      	b.n	800d5b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800d57c:	4b0f      	ldr	r3, [pc, #60]	; (800d5bc <FLASH_WaitForLastOperation+0x7c>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d1e8      	bne.n	800d55a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800d588:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <FLASH_WaitForLastOperation+0x7c>)
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d002      	beq.n	800d59a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d594:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <FLASH_WaitForLastOperation+0x7c>)
 800d596:	2201      	movs	r2, #1
 800d598:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800d59a:	4b08      	ldr	r3, [pc, #32]	; (800d5bc <FLASH_WaitForLastOperation+0x7c>)
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d5a6:	f000 f8a3 	bl	800d6f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
  
}  
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20018624 	.word	0x20018624
 800d5bc:	40023c00 	.word	0x40023c00

0800d5c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d5c0:	b490      	push	{r4, r7}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d5cc:	4b13      	ldr	r3, [pc, #76]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	4a12      	ldr	r2, [pc, #72]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d5d8:	4b10      	ldr	r3, [pc, #64]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	4a0f      	ldr	r2, [pc, #60]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d5e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d5e4:	4b0d      	ldr	r3, [pc, #52]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	4a0c      	ldr	r2, [pc, #48]	; (800d61c <FLASH_Program_DoubleWord+0x5c>)
 800d5ea:	f043 0301 	orr.w	r3, r3, #1
 800d5ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800d5f6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800d5fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5fe:	f04f 0300 	mov.w	r3, #0
 800d602:	f04f 0400 	mov.w	r4, #0
 800d606:	0013      	movs	r3, r2
 800d608:	2400      	movs	r4, #0
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	3204      	adds	r2, #4
 800d60e:	6013      	str	r3, [r2, #0]
}
 800d610:	bf00      	nop
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bc90      	pop	{r4, r7}
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	40023c00 	.word	0x40023c00

0800d620 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d62a:	4b0d      	ldr	r3, [pc, #52]	; (800d660 <FLASH_Program_Word+0x40>)
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	4a0c      	ldr	r2, [pc, #48]	; (800d660 <FLASH_Program_Word+0x40>)
 800d630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d634:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <FLASH_Program_Word+0x40>)
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	4a09      	ldr	r2, [pc, #36]	; (800d660 <FLASH_Program_Word+0x40>)
 800d63c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d640:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d642:	4b07      	ldr	r3, [pc, #28]	; (800d660 <FLASH_Program_Word+0x40>)
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	4a06      	ldr	r2, [pc, #24]	; (800d660 <FLASH_Program_Word+0x40>)
 800d648:	f043 0301 	orr.w	r3, r3, #1
 800d64c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	601a      	str	r2, [r3, #0]
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	40023c00 	.word	0x40023c00

0800d664 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d670:	4b0d      	ldr	r3, [pc, #52]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4a0c      	ldr	r2, [pc, #48]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d67a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4a09      	ldr	r2, [pc, #36]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d688:	4b07      	ldr	r3, [pc, #28]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	4a06      	ldr	r2, [pc, #24]	; (800d6a8 <FLASH_Program_HalfWord+0x44>)
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	887a      	ldrh	r2, [r7, #2]
 800d698:	801a      	strh	r2, [r3, #0]
}
 800d69a:	bf00      	nop
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	40023c00 	.word	0x40023c00

0800d6ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d6b8:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	4a0b      	ldr	r2, [pc, #44]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800d6c4:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6c6:	4a09      	ldr	r2, [pc, #36]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d6cc:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	4a06      	ldr	r2, [pc, #24]	; (800d6ec <FLASH_Program_Byte+0x40>)
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	78fa      	ldrb	r2, [r7, #3]
 800d6dc:	701a      	strb	r2, [r3, #0]
}
 800d6de:	bf00      	nop
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	40023c00 	.word	0x40023c00

0800d6f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800d6f0:	b480      	push	{r7}
 800d6f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d6f4:	4b27      	ldr	r3, [pc, #156]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	f003 0310 	and.w	r3, r3, #16
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d008      	beq.n	800d712 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d700:	4b25      	ldr	r3, [pc, #148]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d702:	69db      	ldr	r3, [r3, #28]
 800d704:	f043 0310 	orr.w	r3, r3, #16
 800d708:	4a23      	ldr	r2, [pc, #140]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d70a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800d70c:	4b21      	ldr	r3, [pc, #132]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d70e:	2210      	movs	r2, #16
 800d710:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800d712:	4b20      	ldr	r3, [pc, #128]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d008      	beq.n	800d730 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d71e:	4b1e      	ldr	r3, [pc, #120]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	f043 0308 	orr.w	r3, r3, #8
 800d726:	4a1c      	ldr	r2, [pc, #112]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d728:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800d72a:	4b1a      	ldr	r3, [pc, #104]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d72c:	2220      	movs	r2, #32
 800d72e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800d730:	4b18      	ldr	r3, [pc, #96]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d008      	beq.n	800d74e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800d73c:	4b16      	ldr	r3, [pc, #88]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d73e:	69db      	ldr	r3, [r3, #28]
 800d740:	f043 0304 	orr.w	r3, r3, #4
 800d744:	4a14      	ldr	r2, [pc, #80]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d746:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800d748:	4b12      	ldr	r3, [pc, #72]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d74a:	2240      	movs	r2, #64	; 0x40
 800d74c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800d74e:	4b11      	ldr	r3, [pc, #68]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d756:	2b00      	cmp	r3, #0
 800d758:	d008      	beq.n	800d76c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800d75a:	4b0f      	ldr	r3, [pc, #60]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d75c:	69db      	ldr	r3, [r3, #28]
 800d75e:	f043 0302 	orr.w	r3, r3, #2
 800d762:	4a0d      	ldr	r2, [pc, #52]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d764:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d768:	2280      	movs	r2, #128	; 0x80
 800d76a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800d76c:	4b09      	ldr	r3, [pc, #36]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f003 0302 	and.w	r3, r3, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d008      	beq.n	800d78a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800d778:	4b07      	ldr	r3, [pc, #28]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d77a:	69db      	ldr	r3, [r3, #28]
 800d77c:	f043 0320 	orr.w	r3, r3, #32
 800d780:	4a05      	ldr	r2, [pc, #20]	; (800d798 <FLASH_SetErrorCode+0xa8>)
 800d782:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800d784:	4b03      	ldr	r3, [pc, #12]	; (800d794 <FLASH_SetErrorCode+0xa4>)
 800d786:	2202      	movs	r2, #2
 800d788:	60da      	str	r2, [r3, #12]
  }
}
 800d78a:	bf00      	nop
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr
 800d794:	40023c00 	.word	0x40023c00
 800d798:	20018624 	.word	0x20018624

0800d79c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d7ae:	4b31      	ldr	r3, [pc, #196]	; (800d874 <HAL_FLASHEx_Erase+0xd8>)
 800d7b0:	7e1b      	ldrb	r3, [r3, #24]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d101      	bne.n	800d7ba <HAL_FLASHEx_Erase+0x1e>
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	e058      	b.n	800d86c <HAL_FLASHEx_Erase+0xd0>
 800d7ba:	4b2e      	ldr	r3, [pc, #184]	; (800d874 <HAL_FLASHEx_Erase+0xd8>)
 800d7bc:	2201      	movs	r2, #1
 800d7be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d7c4:	f7ff febc 	bl	800d540 <FLASH_WaitForLastOperation>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d148      	bne.n	800d864 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d115      	bne.n	800d80e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f000 f844 	bl	800d87c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d7f8:	f7ff fea2 	bl	800d540 <FLASH_WaitForLastOperation>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800d800:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <HAL_FLASHEx_Erase+0xdc>)
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	4a1c      	ldr	r2, [pc, #112]	; (800d878 <HAL_FLASHEx_Erase+0xdc>)
 800d806:	f023 0304 	bic.w	r3, r3, #4
 800d80a:	6113      	str	r3, [r2, #16]
 800d80c:	e028      	b.n	800d860 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	60bb      	str	r3, [r7, #8]
 800d814:	e01c      	b.n	800d850 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	4619      	mov	r1, r3
 800d81e:	68b8      	ldr	r0, [r7, #8]
 800d820:	f000 f850 	bl	800d8c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d824:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d828:	f7ff fe8a 	bl	800d540 <FLASH_WaitForLastOperation>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800d830:	4b11      	ldr	r3, [pc, #68]	; (800d878 <HAL_FLASHEx_Erase+0xdc>)
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	4a10      	ldr	r2, [pc, #64]	; (800d878 <HAL_FLASHEx_Erase+0xdc>)
 800d836:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800d83a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	601a      	str	r2, [r3, #0]
          break;
 800d848:	e00a      	b.n	800d860 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	3301      	adds	r3, #1
 800d84e:	60bb      	str	r3, [r7, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	4413      	add	r3, r2
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d3da      	bcc.n	800d816 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800d860:	f000 f878 	bl	800d954 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d864:	4b03      	ldr	r3, [pc, #12]	; (800d874 <HAL_FLASHEx_Erase+0xd8>)
 800d866:	2200      	movs	r2, #0
 800d868:	761a      	strb	r2, [r3, #24]

  return status;
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20018624 	.word	0x20018624
 800d878:	40023c00 	.word	0x40023c00

0800d87c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b083      	sub	sp, #12
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	6039      	str	r1, [r7, #0]
 800d886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d888:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	4a0c      	ldr	r2, [pc, #48]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d88e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800d894:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d89a:	f043 0304 	orr.w	r3, r3, #4
 800d89e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800d8a0:	4b07      	ldr	r3, [pc, #28]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d8a2:	691a      	ldr	r2, [r3, #16]
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	021b      	lsls	r3, r3, #8
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	4a05      	ldr	r2, [pc, #20]	; (800d8c0 <FLASH_MassErase+0x44>)
 800d8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8b0:	6113      	str	r3, [r2, #16]
}
 800d8b2:	bf00      	nop
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	40023c00 	.word	0x40023c00

0800d8c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800d8d4:	78fb      	ldrb	r3, [r7, #3]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d102      	bne.n	800d8e0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	60fb      	str	r3, [r7, #12]
 800d8de:	e010      	b.n	800d902 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d103      	bne.n	800d8ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800d8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8ea:	60fb      	str	r3, [r7, #12]
 800d8ec:	e009      	b.n	800d902 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800d8ee:	78fb      	ldrb	r3, [r7, #3]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d103      	bne.n	800d8fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800d8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8f8:	60fb      	str	r3, [r7, #12]
 800d8fa:	e002      	b.n	800d902 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800d8fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d900:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d902:	4b13      	ldr	r3, [pc, #76]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d904:	691b      	ldr	r3, [r3, #16]
 800d906:	4a12      	ldr	r2, [pc, #72]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d90c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800d90e:	4b10      	ldr	r3, [pc, #64]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d910:	691a      	ldr	r2, [r3, #16]
 800d912:	490f      	ldr	r1, [pc, #60]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4313      	orrs	r3, r2
 800d918:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800d91a:	4b0d      	ldr	r3, [pc, #52]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	4a0c      	ldr	r2, [pc, #48]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d920:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d924:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800d926:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d928:	691a      	ldr	r2, [r3, #16]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	00db      	lsls	r3, r3, #3
 800d92e:	4313      	orrs	r3, r2
 800d930:	4a07      	ldr	r2, [pc, #28]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d932:	f043 0302 	orr.w	r3, r3, #2
 800d936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800d938:	4b05      	ldr	r3, [pc, #20]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	4a04      	ldr	r2, [pc, #16]	; (800d950 <FLASH_Erase_Sector+0x8c>)
 800d93e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d942:	6113      	str	r3, [r2, #16]
}
 800d944:	bf00      	nop
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	40023c00 	.word	0x40023c00

0800d954 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d954:	b480      	push	{r7}
 800d956:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800d958:	4b20      	ldr	r3, [pc, #128]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d960:	2b00      	cmp	r3, #0
 800d962:	d017      	beq.n	800d994 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d964:	4b1d      	ldr	r3, [pc, #116]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a1c      	ldr	r2, [pc, #112]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d96a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d96e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d970:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a19      	ldr	r2, [pc, #100]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d976:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	4b17      	ldr	r3, [pc, #92]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a16      	ldr	r2, [pc, #88]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d986:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d988:	4b14      	ldr	r3, [pc, #80]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a13      	ldr	r2, [pc, #76]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d98e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d992:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800d994:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d017      	beq.n	800d9d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d9a0:	4b0e      	ldr	r3, [pc, #56]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a0d      	ldr	r2, [pc, #52]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d9ac:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	4b08      	ldr	r3, [pc, #32]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a07      	ldr	r2, [pc, #28]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d9c4:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a04      	ldr	r2, [pc, #16]	; (800d9dc <FLASH_FlushCaches+0x88>)
 800d9ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d9ce:	6013      	str	r3, [r2, #0]
  }
}
 800d9d0:	bf00      	nop
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	40023c00 	.word	0x40023c00

0800d9e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b089      	sub	sp, #36	; 0x24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	61fb      	str	r3, [r7, #28]
 800d9fa:	e16b      	b.n	800dcd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	fa02 f303 	lsl.w	r3, r2, r3
 800da04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	4013      	ands	r3, r2
 800da0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800da10:	693a      	ldr	r2, [r7, #16]
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	f040 815a 	bne.w	800dcce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d00b      	beq.n	800da3a <HAL_GPIO_Init+0x5a>
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	2b02      	cmp	r3, #2
 800da28:	d007      	beq.n	800da3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800da2e:	2b11      	cmp	r3, #17
 800da30:	d003      	beq.n	800da3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	2b12      	cmp	r3, #18
 800da38:	d130      	bne.n	800da9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	2203      	movs	r2, #3
 800da46:	fa02 f303 	lsl.w	r3, r2, r3
 800da4a:	43db      	mvns	r3, r3
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	4013      	ands	r3, r2
 800da50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	68da      	ldr	r2, [r3, #12]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	fa02 f303 	lsl.w	r3, r2, r3
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	4313      	orrs	r3, r2
 800da62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800da70:	2201      	movs	r2, #1
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	fa02 f303 	lsl.w	r3, r2, r3
 800da78:	43db      	mvns	r3, r3
 800da7a:	69ba      	ldr	r2, [r7, #24]
 800da7c:	4013      	ands	r3, r2
 800da7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	091b      	lsrs	r3, r3, #4
 800da86:	f003 0201 	and.w	r2, r3, #1
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	fa02 f303 	lsl.w	r3, r2, r3
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	4313      	orrs	r3, r2
 800da94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	69ba      	ldr	r2, [r7, #24]
 800da9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	2203      	movs	r2, #3
 800daa8:	fa02 f303 	lsl.w	r3, r2, r3
 800daac:	43db      	mvns	r3, r3
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	4013      	ands	r3, r2
 800dab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	fa02 f303 	lsl.w	r3, r2, r3
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	69ba      	ldr	r2, [r7, #24]
 800daca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	d003      	beq.n	800dadc <HAL_GPIO_Init+0xfc>
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	2b12      	cmp	r3, #18
 800dada:	d123      	bne.n	800db24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	08da      	lsrs	r2, r3, #3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3208      	adds	r2, #8
 800dae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	f003 0307 	and.w	r3, r3, #7
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	220f      	movs	r2, #15
 800daf4:	fa02 f303 	lsl.w	r3, r2, r3
 800daf8:	43db      	mvns	r3, r3
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	4013      	ands	r3, r2
 800dafe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	691a      	ldr	r2, [r3, #16]
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	f003 0307 	and.w	r3, r3, #7
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	fa02 f303 	lsl.w	r3, r2, r3
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	4313      	orrs	r3, r2
 800db14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	08da      	lsrs	r2, r3, #3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	3208      	adds	r2, #8
 800db1e:	69b9      	ldr	r1, [r7, #24]
 800db20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	2203      	movs	r2, #3
 800db30:	fa02 f303 	lsl.w	r3, r2, r3
 800db34:	43db      	mvns	r3, r3
 800db36:	69ba      	ldr	r2, [r7, #24]
 800db38:	4013      	ands	r3, r2
 800db3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	f003 0203 	and.w	r2, r3, #3
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	fa02 f303 	lsl.w	r3, r2, r3
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	4313      	orrs	r3, r2
 800db50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 80b4 	beq.w	800dcce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db66:	2300      	movs	r3, #0
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	4b5f      	ldr	r3, [pc, #380]	; (800dce8 <HAL_GPIO_Init+0x308>)
 800db6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db6e:	4a5e      	ldr	r2, [pc, #376]	; (800dce8 <HAL_GPIO_Init+0x308>)
 800db70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db74:	6453      	str	r3, [r2, #68]	; 0x44
 800db76:	4b5c      	ldr	r3, [pc, #368]	; (800dce8 <HAL_GPIO_Init+0x308>)
 800db78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800db82:	4a5a      	ldr	r2, [pc, #360]	; (800dcec <HAL_GPIO_Init+0x30c>)
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	089b      	lsrs	r3, r3, #2
 800db88:	3302      	adds	r3, #2
 800db8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	f003 0303 	and.w	r3, r3, #3
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	220f      	movs	r2, #15
 800db9a:	fa02 f303 	lsl.w	r3, r2, r3
 800db9e:	43db      	mvns	r3, r3
 800dba0:	69ba      	ldr	r2, [r7, #24]
 800dba2:	4013      	ands	r3, r2
 800dba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4a51      	ldr	r2, [pc, #324]	; (800dcf0 <HAL_GPIO_Init+0x310>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d02b      	beq.n	800dc06 <HAL_GPIO_Init+0x226>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a50      	ldr	r2, [pc, #320]	; (800dcf4 <HAL_GPIO_Init+0x314>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d025      	beq.n	800dc02 <HAL_GPIO_Init+0x222>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a4f      	ldr	r2, [pc, #316]	; (800dcf8 <HAL_GPIO_Init+0x318>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d01f      	beq.n	800dbfe <HAL_GPIO_Init+0x21e>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a4e      	ldr	r2, [pc, #312]	; (800dcfc <HAL_GPIO_Init+0x31c>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d019      	beq.n	800dbfa <HAL_GPIO_Init+0x21a>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a4d      	ldr	r2, [pc, #308]	; (800dd00 <HAL_GPIO_Init+0x320>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d013      	beq.n	800dbf6 <HAL_GPIO_Init+0x216>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a4c      	ldr	r2, [pc, #304]	; (800dd04 <HAL_GPIO_Init+0x324>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d00d      	beq.n	800dbf2 <HAL_GPIO_Init+0x212>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a4b      	ldr	r2, [pc, #300]	; (800dd08 <HAL_GPIO_Init+0x328>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d007      	beq.n	800dbee <HAL_GPIO_Init+0x20e>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a4a      	ldr	r2, [pc, #296]	; (800dd0c <HAL_GPIO_Init+0x32c>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d101      	bne.n	800dbea <HAL_GPIO_Init+0x20a>
 800dbe6:	2307      	movs	r3, #7
 800dbe8:	e00e      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbea:	2308      	movs	r3, #8
 800dbec:	e00c      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbee:	2306      	movs	r3, #6
 800dbf0:	e00a      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbf2:	2305      	movs	r3, #5
 800dbf4:	e008      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbf6:	2304      	movs	r3, #4
 800dbf8:	e006      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e004      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e002      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dc02:	2301      	movs	r3, #1
 800dc04:	e000      	b.n	800dc08 <HAL_GPIO_Init+0x228>
 800dc06:	2300      	movs	r3, #0
 800dc08:	69fa      	ldr	r2, [r7, #28]
 800dc0a:	f002 0203 	and.w	r2, r2, #3
 800dc0e:	0092      	lsls	r2, r2, #2
 800dc10:	4093      	lsls	r3, r2
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800dc18:	4934      	ldr	r1, [pc, #208]	; (800dcec <HAL_GPIO_Init+0x30c>)
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	089b      	lsrs	r3, r3, #2
 800dc1e:	3302      	adds	r3, #2
 800dc20:	69ba      	ldr	r2, [r7, #24]
 800dc22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dc26:	4b3a      	ldr	r3, [pc, #232]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	43db      	mvns	r3, r3
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	4013      	ands	r3, r2
 800dc34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800dc42:	69ba      	ldr	r2, [r7, #24]
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800dc4a:	4a31      	ldr	r2, [pc, #196]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800dc50:	4b2f      	ldr	r3, [pc, #188]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	43db      	mvns	r3, r3
 800dc5a:	69ba      	ldr	r2, [r7, #24]
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800dc74:	4a26      	ldr	r2, [pc, #152]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dc7a:	4b25      	ldr	r3, [pc, #148]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	43db      	mvns	r3, r3
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	4013      	ands	r3, r2
 800dc88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800dc9e:	4a1c      	ldr	r2, [pc, #112]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800dca4:	4b1a      	ldr	r3, [pc, #104]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	43db      	mvns	r3, r3
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d003      	beq.n	800dcc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800dcc0:	69ba      	ldr	r2, [r7, #24]
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800dcc8:	4a11      	ldr	r2, [pc, #68]	; (800dd10 <HAL_GPIO_Init+0x330>)
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	61fb      	str	r3, [r7, #28]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	2b0f      	cmp	r3, #15
 800dcd8:	f67f ae90 	bls.w	800d9fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dcdc:	bf00      	nop
 800dcde:	3724      	adds	r7, #36	; 0x24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	40023800 	.word	0x40023800
 800dcec:	40013800 	.word	0x40013800
 800dcf0:	40020000 	.word	0x40020000
 800dcf4:	40020400 	.word	0x40020400
 800dcf8:	40020800 	.word	0x40020800
 800dcfc:	40020c00 	.word	0x40020c00
 800dd00:	40021000 	.word	0x40021000
 800dd04:	40021400 	.word	0x40021400
 800dd08:	40021800 	.word	0x40021800
 800dd0c:	40021c00 	.word	0x40021c00
 800dd10:	40013c00 	.word	0x40013c00

0800dd14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	691a      	ldr	r2, [r3, #16]
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	4013      	ands	r3, r2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	73fb      	strb	r3, [r7, #15]
 800dd30:	e001      	b.n	800dd36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	807b      	strh	r3, [r7, #2]
 800dd50:	4613      	mov	r3, r2
 800dd52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dd54:	787b      	ldrb	r3, [r7, #1]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dd5a:	887a      	ldrh	r2, [r7, #2]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800dd60:	e003      	b.n	800dd6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800dd62:	887b      	ldrh	r3, [r7, #2]
 800dd64:	041a      	lsls	r2, r3, #16
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	619a      	str	r2, [r3, #24]
}
 800dd6a:	bf00      	nop
 800dd6c:	370c      	adds	r7, #12
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr
	...

0800dd78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e11f      	b.n	800dfca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fd fbfa 	bl	800b598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2224      	movs	r2, #36	; 0x24
 800dda8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f022 0201 	bic.w	r2, r2, #1
 800ddba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ddca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ddda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800dddc:	f001 f820 	bl	800ee20 <HAL_RCC_GetPCLK1Freq>
 800dde0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	4a7b      	ldr	r2, [pc, #492]	; (800dfd4 <HAL_I2C_Init+0x25c>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d807      	bhi.n	800ddfc <HAL_I2C_Init+0x84>
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	4a7a      	ldr	r2, [pc, #488]	; (800dfd8 <HAL_I2C_Init+0x260>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	bf94      	ite	ls
 800ddf4:	2301      	movls	r3, #1
 800ddf6:	2300      	movhi	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	e006      	b.n	800de0a <HAL_I2C_Init+0x92>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	4a77      	ldr	r2, [pc, #476]	; (800dfdc <HAL_I2C_Init+0x264>)
 800de00:	4293      	cmp	r3, r2
 800de02:	bf94      	ite	ls
 800de04:	2301      	movls	r3, #1
 800de06:	2300      	movhi	r3, #0
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800de0e:	2301      	movs	r3, #1
 800de10:	e0db      	b.n	800dfca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	4a72      	ldr	r2, [pc, #456]	; (800dfe0 <HAL_I2C_Init+0x268>)
 800de16:	fba2 2303 	umull	r2, r3, r2, r3
 800de1a:	0c9b      	lsrs	r3, r3, #18
 800de1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	430a      	orrs	r2, r1
 800de30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6a1b      	ldr	r3, [r3, #32]
 800de38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	4a64      	ldr	r2, [pc, #400]	; (800dfd4 <HAL_I2C_Init+0x25c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d802      	bhi.n	800de4c <HAL_I2C_Init+0xd4>
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	3301      	adds	r3, #1
 800de4a:	e009      	b.n	800de60 <HAL_I2C_Init+0xe8>
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800de52:	fb02 f303 	mul.w	r3, r2, r3
 800de56:	4a63      	ldr	r2, [pc, #396]	; (800dfe4 <HAL_I2C_Init+0x26c>)
 800de58:	fba2 2303 	umull	r2, r3, r2, r3
 800de5c:	099b      	lsrs	r3, r3, #6
 800de5e:	3301      	adds	r3, #1
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	6812      	ldr	r2, [r2, #0]
 800de64:	430b      	orrs	r3, r1
 800de66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800de72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	4956      	ldr	r1, [pc, #344]	; (800dfd4 <HAL_I2C_Init+0x25c>)
 800de7c:	428b      	cmp	r3, r1
 800de7e:	d80d      	bhi.n	800de9c <HAL_I2C_Init+0x124>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	1e59      	subs	r1, r3, #1
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	fbb1 f3f3 	udiv	r3, r1, r3
 800de8e:	3301      	adds	r3, #1
 800de90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800de94:	2b04      	cmp	r3, #4
 800de96:	bf38      	it	cc
 800de98:	2304      	movcc	r3, #4
 800de9a:	e04f      	b.n	800df3c <HAL_I2C_Init+0x1c4>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d111      	bne.n	800dec8 <HAL_I2C_Init+0x150>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	1e58      	subs	r0, r3, #1
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6859      	ldr	r1, [r3, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	440b      	add	r3, r1
 800deb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800deb6:	3301      	adds	r3, #1
 800deb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf0c      	ite	eq
 800dec0:	2301      	moveq	r3, #1
 800dec2:	2300      	movne	r3, #0
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	e012      	b.n	800deee <HAL_I2C_Init+0x176>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	1e58      	subs	r0, r3, #1
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6859      	ldr	r1, [r3, #4]
 800ded0:	460b      	mov	r3, r1
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	440b      	add	r3, r1
 800ded6:	0099      	lsls	r1, r3, #2
 800ded8:	440b      	add	r3, r1
 800deda:	fbb0 f3f3 	udiv	r3, r0, r3
 800dede:	3301      	adds	r3, #1
 800dee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	bf0c      	ite	eq
 800dee8:	2301      	moveq	r3, #1
 800deea:	2300      	movne	r3, #0
 800deec:	b2db      	uxtb	r3, r3
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <HAL_I2C_Init+0x17e>
 800def2:	2301      	movs	r3, #1
 800def4:	e022      	b.n	800df3c <HAL_I2C_Init+0x1c4>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10e      	bne.n	800df1c <HAL_I2C_Init+0x1a4>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	1e58      	subs	r0, r3, #1
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6859      	ldr	r1, [r3, #4]
 800df06:	460b      	mov	r3, r1
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	440b      	add	r3, r1
 800df0c:	fbb0 f3f3 	udiv	r3, r0, r3
 800df10:	3301      	adds	r3, #1
 800df12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df1a:	e00f      	b.n	800df3c <HAL_I2C_Init+0x1c4>
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	1e58      	subs	r0, r3, #1
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6859      	ldr	r1, [r3, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	440b      	add	r3, r1
 800df2a:	0099      	lsls	r1, r3, #2
 800df2c:	440b      	add	r3, r1
 800df2e:	fbb0 f3f3 	udiv	r3, r0, r3
 800df32:	3301      	adds	r3, #1
 800df34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df3c:	6879      	ldr	r1, [r7, #4]
 800df3e:	6809      	ldr	r1, [r1, #0]
 800df40:	4313      	orrs	r3, r2
 800df42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	69da      	ldr	r2, [r3, #28]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	431a      	orrs	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	430a      	orrs	r2, r1
 800df5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800df6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	6911      	ldr	r1, [r2, #16]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	68d2      	ldr	r2, [r2, #12]
 800df76:	4311      	orrs	r1, r2
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	6812      	ldr	r2, [r2, #0]
 800df7c:	430b      	orrs	r3, r1
 800df7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	695a      	ldr	r2, [r3, #20]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	431a      	orrs	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	430a      	orrs	r2, r1
 800df9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f042 0201 	orr.w	r2, r2, #1
 800dfaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2220      	movs	r2, #32
 800dfb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	000186a0 	.word	0x000186a0
 800dfd8:	001e847f 	.word	0x001e847f
 800dfdc:	003d08ff 	.word	0x003d08ff
 800dfe0:	431bde83 	.word	0x431bde83
 800dfe4:	10624dd3 	.word	0x10624dd3

0800dfe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b088      	sub	sp, #32
 800dfec:	af02      	add	r7, sp, #8
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	607a      	str	r2, [r7, #4]
 800dff2:	461a      	mov	r2, r3
 800dff4:	460b      	mov	r3, r1
 800dff6:	817b      	strh	r3, [r7, #10]
 800dff8:	4613      	mov	r3, r2
 800dffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dffc:	f7fe f960 	bl	800c2c0 <HAL_GetTick>
 800e000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	f040 80e0 	bne.w	800e1d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	2319      	movs	r3, #25
 800e016:	2201      	movs	r2, #1
 800e018:	4970      	ldr	r1, [pc, #448]	; (800e1dc <HAL_I2C_Master_Transmit+0x1f4>)
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f000 f964 	bl	800e2e8 <I2C_WaitOnFlagUntilTimeout>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800e026:	2302      	movs	r3, #2
 800e028:	e0d3      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e030:	2b01      	cmp	r3, #1
 800e032:	d101      	bne.n	800e038 <HAL_I2C_Master_Transmit+0x50>
 800e034:	2302      	movs	r3, #2
 800e036:	e0cc      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f003 0301 	and.w	r3, r3, #1
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d007      	beq.n	800e05e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f042 0201 	orr.w	r2, r2, #1
 800e05c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e06c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2221      	movs	r2, #33	; 0x21
 800e072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2210      	movs	r2, #16
 800e07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	893a      	ldrh	r2, [r7, #8]
 800e08e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e094:	b29a      	uxth	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	4a50      	ldr	r2, [pc, #320]	; (800e1e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800e09e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800e0a0:	8979      	ldrh	r1, [r7, #10]
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	6a3a      	ldr	r2, [r7, #32]
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 f89c 	bl	800e1e4 <I2C_MasterRequestWrite>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e08d      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	613b      	str	r3, [r7, #16]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	699b      	ldr	r3, [r3, #24]
 800e0c8:	613b      	str	r3, [r7, #16]
 800e0ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800e0cc:	e066      	b.n	800e19c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	6a39      	ldr	r1, [r7, #32]
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f000 f9de 	bl	800e494 <I2C_WaitOnTXEFlagUntilTimeout>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00d      	beq.n	800e0fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e2:	2b04      	cmp	r3, #4
 800e0e4:	d107      	bne.n	800e0f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e0f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	e06b      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	781a      	ldrb	r2, [r3, #0]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10a:	1c5a      	adds	r2, r3, #1
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e114:	b29b      	uxth	r3, r3
 800e116:	3b01      	subs	r3, #1
 800e118:	b29a      	uxth	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e122:	3b01      	subs	r3, #1
 800e124:	b29a      	uxth	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b04      	cmp	r3, #4
 800e136:	d11b      	bne.n	800e170 <HAL_I2C_Master_Transmit+0x188>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d017      	beq.n	800e170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	3b01      	subs	r3, #1
 800e15e:	b29a      	uxth	r2, r3
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e168:	3b01      	subs	r3, #1
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	6a39      	ldr	r1, [r7, #32]
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f000 f9ce 	bl	800e516 <I2C_WaitOnBTFFlagUntilTimeout>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00d      	beq.n	800e19c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e184:	2b04      	cmp	r3, #4
 800e186:	d107      	bne.n	800e198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	e01a      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d194      	bne.n	800e0ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2220      	movs	r2, #32
 800e1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e000      	b.n	800e1d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800e1d0:	2302      	movs	r3, #2
  }
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	00100002 	.word	0x00100002
 800e1e0:	ffff0000 	.word	0xffff0000

0800e1e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af02      	add	r7, sp, #8
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	607a      	str	r2, [r7, #4]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	d006      	beq.n	800e20e <I2C_MasterRequestWrite+0x2a>
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d003      	beq.n	800e20e <I2C_MasterRequestWrite+0x2a>
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e20c:	d108      	bne.n	800e220 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	e00b      	b.n	800e238 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e224:	2b12      	cmp	r3, #18
 800e226:	d107      	bne.n	800e238 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 f84f 	bl	800e2e8 <I2C_WaitOnFlagUntilTimeout>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00d      	beq.n	800e26c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e25e:	d103      	bne.n	800e268 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e268:	2303      	movs	r3, #3
 800e26a:	e035      	b.n	800e2d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e274:	d108      	bne.n	800e288 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e276:	897b      	ldrh	r3, [r7, #10]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	461a      	mov	r2, r3
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e284:	611a      	str	r2, [r3, #16]
 800e286:	e01b      	b.n	800e2c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e288:	897b      	ldrh	r3, [r7, #10]
 800e28a:	11db      	asrs	r3, r3, #7
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 0306 	and.w	r3, r3, #6
 800e292:	b2db      	uxtb	r3, r3
 800e294:	f063 030f 	orn	r3, r3, #15
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	490e      	ldr	r1, [pc, #56]	; (800e2e0 <I2C_MasterRequestWrite+0xfc>)
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 f875 	bl	800e396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e010      	b.n	800e2d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e2b6:	897b      	ldrh	r3, [r7, #10]
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	4907      	ldr	r1, [pc, #28]	; (800e2e4 <I2C_MasterRequestWrite+0x100>)
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f000 f865 	bl	800e396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e000      	b.n	800e2d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	00010008 	.word	0x00010008
 800e2e4:	00010002 	.word	0x00010002

0800e2e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e2f8:	e025      	b.n	800e346 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e300:	d021      	beq.n	800e346 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e302:	f7fd ffdd 	bl	800c2c0 <HAL_GetTick>
 800e306:	4602      	mov	r2, r0
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d302      	bcc.n	800e318 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d116      	bne.n	800e346 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e332:	f043 0220 	orr.w	r2, r3, #32
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e023      	b.n	800e38e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	0c1b      	lsrs	r3, r3, #16
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d10d      	bne.n	800e36c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	43da      	mvns	r2, r3
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	4013      	ands	r3, r2
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	bf0c      	ite	eq
 800e362:	2301      	moveq	r3, #1
 800e364:	2300      	movne	r3, #0
 800e366:	b2db      	uxtb	r3, r3
 800e368:	461a      	mov	r2, r3
 800e36a:	e00c      	b.n	800e386 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	699b      	ldr	r3, [r3, #24]
 800e372:	43da      	mvns	r2, r3
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	4013      	ands	r3, r2
 800e378:	b29b      	uxth	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	bf0c      	ite	eq
 800e37e:	2301      	moveq	r3, #1
 800e380:	2300      	movne	r3, #0
 800e382:	b2db      	uxtb	r3, r3
 800e384:	461a      	mov	r2, r3
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d0b6      	beq.n	800e2fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]
 800e3a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e3a4:	e051      	b.n	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	695b      	ldr	r3, [r3, #20]
 800e3ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3b4:	d123      	bne.n	800e3fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2220      	movs	r2, #32
 800e3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3ea:	f043 0204 	orr.w	r2, r3, #4
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e046      	b.n	800e48c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e404:	d021      	beq.n	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e406:	f7fd ff5b 	bl	800c2c0 <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	429a      	cmp	r2, r3
 800e414:	d302      	bcc.n	800e41c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d116      	bne.n	800e44a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2200      	movs	r2, #0
 800e420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2220      	movs	r2, #32
 800e426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e436:	f043 0220 	orr.w	r2, r3, #32
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e020      	b.n	800e48c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	0c1b      	lsrs	r3, r3, #16
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	2b01      	cmp	r3, #1
 800e452:	d10c      	bne.n	800e46e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	43da      	mvns	r2, r3
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	4013      	ands	r3, r2
 800e460:	b29b      	uxth	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	bf14      	ite	ne
 800e466:	2301      	movne	r3, #1
 800e468:	2300      	moveq	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	e00b      	b.n	800e486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	43da      	mvns	r2, r3
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	4013      	ands	r3, r2
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	bf14      	ite	ne
 800e480:	2301      	movne	r3, #1
 800e482:	2300      	moveq	r3, #0
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d18d      	bne.n	800e3a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4a0:	e02d      	b.n	800e4fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 f878 	bl	800e598 <I2C_IsAcknowledgeFailed>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e02d      	b.n	800e50e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b8:	d021      	beq.n	800e4fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4ba:	f7fd ff01 	bl	800c2c0 <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d302      	bcc.n	800e4d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d116      	bne.n	800e4fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2220      	movs	r2, #32
 800e4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ea:	f043 0220 	orr.w	r2, r3, #32
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e007      	b.n	800e50e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e508:	2b80      	cmp	r3, #128	; 0x80
 800e50a:	d1ca      	bne.n	800e4a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	60f8      	str	r0, [r7, #12]
 800e51e:	60b9      	str	r1, [r7, #8]
 800e520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e522:	e02d      	b.n	800e580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f000 f837 	bl	800e598 <I2C_IsAcknowledgeFailed>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d001      	beq.n	800e534 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e530:	2301      	movs	r3, #1
 800e532:	e02d      	b.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e53a:	d021      	beq.n	800e580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e53c:	f7fd fec0 	bl	800c2c0 <HAL_GetTick>
 800e540:	4602      	mov	r2, r0
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	1ad3      	subs	r3, r2, r3
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d302      	bcc.n	800e552 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d116      	bne.n	800e580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2220      	movs	r2, #32
 800e55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e56c:	f043 0220 	orr.w	r2, r3, #32
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	e007      	b.n	800e590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	f003 0304 	and.w	r3, r3, #4
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	d1ca      	bne.n	800e524 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5ae:	d11b      	bne.n	800e5e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e5b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2220      	movs	r2, #32
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d4:	f043 0204 	orr.w	r2, r3, #4
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e000      	b.n	800e5ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
	...

0800e5f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b086      	sub	sp, #24
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	e25b      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	2b00      	cmp	r3, #0
 800e614:	d075      	beq.n	800e702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e616:	4ba3      	ldr	r3, [pc, #652]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	f003 030c 	and.w	r3, r3, #12
 800e61e:	2b04      	cmp	r3, #4
 800e620:	d00c      	beq.n	800e63c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e622:	4ba0      	ldr	r3, [pc, #640]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e62a:	2b08      	cmp	r3, #8
 800e62c:	d112      	bne.n	800e654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e62e:	4b9d      	ldr	r3, [pc, #628]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e63a:	d10b      	bne.n	800e654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e63c:	4b99      	ldr	r3, [pc, #612]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d05b      	beq.n	800e700 <HAL_RCC_OscConfig+0x108>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d157      	bne.n	800e700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	e236      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e65c:	d106      	bne.n	800e66c <HAL_RCC_OscConfig+0x74>
 800e65e:	4b91      	ldr	r3, [pc, #580]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a90      	ldr	r2, [pc, #576]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	e01d      	b.n	800e6a8 <HAL_RCC_OscConfig+0xb0>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e674:	d10c      	bne.n	800e690 <HAL_RCC_OscConfig+0x98>
 800e676:	4b8b      	ldr	r3, [pc, #556]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a8a      	ldr	r2, [pc, #552]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e67c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e680:	6013      	str	r3, [r2, #0]
 800e682:	4b88      	ldr	r3, [pc, #544]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a87      	ldr	r2, [pc, #540]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	e00b      	b.n	800e6a8 <HAL_RCC_OscConfig+0xb0>
 800e690:	4b84      	ldr	r3, [pc, #528]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a83      	ldr	r2, [pc, #524]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e69a:	6013      	str	r3, [r2, #0]
 800e69c:	4b81      	ldr	r3, [pc, #516]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a80      	ldr	r2, [pc, #512]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e6a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e6a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d013      	beq.n	800e6d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6b0:	f7fd fe06 	bl	800c2c0 <HAL_GetTick>
 800e6b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6b6:	e008      	b.n	800e6ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6b8:	f7fd fe02 	bl	800c2c0 <HAL_GetTick>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	2b64      	cmp	r3, #100	; 0x64
 800e6c4:	d901      	bls.n	800e6ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e6c6:	2303      	movs	r3, #3
 800e6c8:	e1fb      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6ca:	4b76      	ldr	r3, [pc, #472]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0f0      	beq.n	800e6b8 <HAL_RCC_OscConfig+0xc0>
 800e6d6:	e014      	b.n	800e702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6d8:	f7fd fdf2 	bl	800c2c0 <HAL_GetTick>
 800e6dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6de:	e008      	b.n	800e6f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e6e0:	f7fd fdee 	bl	800c2c0 <HAL_GetTick>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	2b64      	cmp	r3, #100	; 0x64
 800e6ec:	d901      	bls.n	800e6f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e1e7      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6f2:	4b6c      	ldr	r3, [pc, #432]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1f0      	bne.n	800e6e0 <HAL_RCC_OscConfig+0xe8>
 800e6fe:	e000      	b.n	800e702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f003 0302 	and.w	r3, r3, #2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d063      	beq.n	800e7d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e70e:	4b65      	ldr	r3, [pc, #404]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	f003 030c 	and.w	r3, r3, #12
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00b      	beq.n	800e732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e71a:	4b62      	ldr	r3, [pc, #392]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e722:	2b08      	cmp	r3, #8
 800e724:	d11c      	bne.n	800e760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e726:	4b5f      	ldr	r3, [pc, #380]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d116      	bne.n	800e760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e732:	4b5c      	ldr	r3, [pc, #368]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0302 	and.w	r3, r3, #2
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d005      	beq.n	800e74a <HAL_RCC_OscConfig+0x152>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d001      	beq.n	800e74a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e1bb      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e74a:	4b56      	ldr	r3, [pc, #344]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	4952      	ldr	r1, [pc, #328]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e75a:	4313      	orrs	r3, r2
 800e75c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e75e:	e03a      	b.n	800e7d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d020      	beq.n	800e7aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e768:	4b4f      	ldr	r3, [pc, #316]	; (800e8a8 <HAL_RCC_OscConfig+0x2b0>)
 800e76a:	2201      	movs	r2, #1
 800e76c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e76e:	f7fd fda7 	bl	800c2c0 <HAL_GetTick>
 800e772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e774:	e008      	b.n	800e788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e776:	f7fd fda3 	bl	800c2c0 <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	2b02      	cmp	r3, #2
 800e782:	d901      	bls.n	800e788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e784:	2303      	movs	r3, #3
 800e786:	e19c      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e788:	4b46      	ldr	r3, [pc, #280]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 0302 	and.w	r3, r3, #2
 800e790:	2b00      	cmp	r3, #0
 800e792:	d0f0      	beq.n	800e776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e794:	4b43      	ldr	r3, [pc, #268]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	4940      	ldr	r1, [pc, #256]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	600b      	str	r3, [r1, #0]
 800e7a8:	e015      	b.n	800e7d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7aa:	4b3f      	ldr	r3, [pc, #252]	; (800e8a8 <HAL_RCC_OscConfig+0x2b0>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7b0:	f7fd fd86 	bl	800c2c0 <HAL_GetTick>
 800e7b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7b6:	e008      	b.n	800e7ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e7b8:	f7fd fd82 	bl	800c2c0 <HAL_GetTick>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d901      	bls.n	800e7ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e17b      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7ca:	4b36      	ldr	r3, [pc, #216]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1f0      	bne.n	800e7b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0308 	and.w	r3, r3, #8
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d030      	beq.n	800e844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d016      	beq.n	800e818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e7ea:	4b30      	ldr	r3, [pc, #192]	; (800e8ac <HAL_RCC_OscConfig+0x2b4>)
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7f0:	f7fd fd66 	bl	800c2c0 <HAL_GetTick>
 800e7f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e7f6:	e008      	b.n	800e80a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e7f8:	f7fd fd62 	bl	800c2c0 <HAL_GetTick>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	2b02      	cmp	r3, #2
 800e804:	d901      	bls.n	800e80a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e806:	2303      	movs	r3, #3
 800e808:	e15b      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e80a:	4b26      	ldr	r3, [pc, #152]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80e:	f003 0302 	and.w	r3, r3, #2
 800e812:	2b00      	cmp	r3, #0
 800e814:	d0f0      	beq.n	800e7f8 <HAL_RCC_OscConfig+0x200>
 800e816:	e015      	b.n	800e844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e818:	4b24      	ldr	r3, [pc, #144]	; (800e8ac <HAL_RCC_OscConfig+0x2b4>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e81e:	f7fd fd4f 	bl	800c2c0 <HAL_GetTick>
 800e822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e824:	e008      	b.n	800e838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e826:	f7fd fd4b 	bl	800c2c0 <HAL_GetTick>
 800e82a:	4602      	mov	r2, r0
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	2b02      	cmp	r3, #2
 800e832:	d901      	bls.n	800e838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e834:	2303      	movs	r3, #3
 800e836:	e144      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e838:	4b1a      	ldr	r3, [pc, #104]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83c:	f003 0302 	and.w	r3, r3, #2
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1f0      	bne.n	800e826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80a0 	beq.w	800e992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e852:	2300      	movs	r3, #0
 800e854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e856:	4b13      	ldr	r3, [pc, #76]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e85a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10f      	bne.n	800e882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e862:	2300      	movs	r3, #0
 800e864:	60bb      	str	r3, [r7, #8]
 800e866:	4b0f      	ldr	r3, [pc, #60]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86a:	4a0e      	ldr	r2, [pc, #56]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e86c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e870:	6413      	str	r3, [r2, #64]	; 0x40
 800e872:	4b0c      	ldr	r3, [pc, #48]	; (800e8a4 <HAL_RCC_OscConfig+0x2ac>)
 800e874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e87a:	60bb      	str	r3, [r7, #8]
 800e87c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e87e:	2301      	movs	r3, #1
 800e880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e882:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <HAL_RCC_OscConfig+0x2b8>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d121      	bne.n	800e8d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e88e:	4b08      	ldr	r3, [pc, #32]	; (800e8b0 <HAL_RCC_OscConfig+0x2b8>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a07      	ldr	r2, [pc, #28]	; (800e8b0 <HAL_RCC_OscConfig+0x2b8>)
 800e894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e89a:	f7fd fd11 	bl	800c2c0 <HAL_GetTick>
 800e89e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8a0:	e011      	b.n	800e8c6 <HAL_RCC_OscConfig+0x2ce>
 800e8a2:	bf00      	nop
 800e8a4:	40023800 	.word	0x40023800
 800e8a8:	42470000 	.word	0x42470000
 800e8ac:	42470e80 	.word	0x42470e80
 800e8b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8b4:	f7fd fd04 	bl	800c2c0 <HAL_GetTick>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d901      	bls.n	800e8c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	e0fd      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8c6:	4b81      	ldr	r3, [pc, #516]	; (800eacc <HAL_RCC_OscConfig+0x4d4>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d0f0      	beq.n	800e8b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d106      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x2f0>
 800e8da:	4b7d      	ldr	r3, [pc, #500]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8de:	4a7c      	ldr	r2, [pc, #496]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e8e0:	f043 0301 	orr.w	r3, r3, #1
 800e8e4:	6713      	str	r3, [r2, #112]	; 0x70
 800e8e6:	e01c      	b.n	800e922 <HAL_RCC_OscConfig+0x32a>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	2b05      	cmp	r3, #5
 800e8ee:	d10c      	bne.n	800e90a <HAL_RCC_OscConfig+0x312>
 800e8f0:	4b77      	ldr	r3, [pc, #476]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8f4:	4a76      	ldr	r2, [pc, #472]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e8f6:	f043 0304 	orr.w	r3, r3, #4
 800e8fa:	6713      	str	r3, [r2, #112]	; 0x70
 800e8fc:	4b74      	ldr	r3, [pc, #464]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e900:	4a73      	ldr	r2, [pc, #460]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e902:	f043 0301 	orr.w	r3, r3, #1
 800e906:	6713      	str	r3, [r2, #112]	; 0x70
 800e908:	e00b      	b.n	800e922 <HAL_RCC_OscConfig+0x32a>
 800e90a:	4b71      	ldr	r3, [pc, #452]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90e:	4a70      	ldr	r2, [pc, #448]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e910:	f023 0301 	bic.w	r3, r3, #1
 800e914:	6713      	str	r3, [r2, #112]	; 0x70
 800e916:	4b6e      	ldr	r3, [pc, #440]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91a:	4a6d      	ldr	r2, [pc, #436]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e91c:	f023 0304 	bic.w	r3, r3, #4
 800e920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d015      	beq.n	800e956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e92a:	f7fd fcc9 	bl	800c2c0 <HAL_GetTick>
 800e92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e930:	e00a      	b.n	800e948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e932:	f7fd fcc5 	bl	800c2c0 <HAL_GetTick>
 800e936:	4602      	mov	r2, r0
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e940:	4293      	cmp	r3, r2
 800e942:	d901      	bls.n	800e948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800e944:	2303      	movs	r3, #3
 800e946:	e0bc      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e948:	4b61      	ldr	r3, [pc, #388]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94c:	f003 0302 	and.w	r3, r3, #2
 800e950:	2b00      	cmp	r3, #0
 800e952:	d0ee      	beq.n	800e932 <HAL_RCC_OscConfig+0x33a>
 800e954:	e014      	b.n	800e980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e956:	f7fd fcb3 	bl	800c2c0 <HAL_GetTick>
 800e95a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e95c:	e00a      	b.n	800e974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e95e:	f7fd fcaf 	bl	800c2c0 <HAL_GetTick>
 800e962:	4602      	mov	r2, r0
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	f241 3288 	movw	r2, #5000	; 0x1388
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d901      	bls.n	800e974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800e970:	2303      	movs	r3, #3
 800e972:	e0a6      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e974:	4b56      	ldr	r3, [pc, #344]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e978:	f003 0302 	and.w	r3, r3, #2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1ee      	bne.n	800e95e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e980:	7dfb      	ldrb	r3, [r7, #23]
 800e982:	2b01      	cmp	r3, #1
 800e984:	d105      	bne.n	800e992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e986:	4b52      	ldr	r3, [pc, #328]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e98a:	4a51      	ldr	r2, [pc, #324]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e98c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 8092 	beq.w	800eac0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e99c:	4b4c      	ldr	r3, [pc, #304]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	f003 030c 	and.w	r3, r3, #12
 800e9a4:	2b08      	cmp	r3, #8
 800e9a6:	d05c      	beq.n	800ea62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d141      	bne.n	800ea34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9b0:	4b48      	ldr	r3, [pc, #288]	; (800ead4 <HAL_RCC_OscConfig+0x4dc>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9b6:	f7fd fc83 	bl	800c2c0 <HAL_GetTick>
 800e9ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9bc:	e008      	b.n	800e9d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e9be:	f7fd fc7f 	bl	800c2c0 <HAL_GetTick>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d901      	bls.n	800e9d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800e9cc:	2303      	movs	r3, #3
 800e9ce:	e078      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9d0:	4b3f      	ldr	r3, [pc, #252]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1f0      	bne.n	800e9be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	431a      	orrs	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ea:	019b      	lsls	r3, r3, #6
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	085b      	lsrs	r3, r3, #1
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	041b      	lsls	r3, r3, #16
 800e9f8:	431a      	orrs	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fe:	061b      	lsls	r3, r3, #24
 800ea00:	4933      	ldr	r1, [pc, #204]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800ea02:	4313      	orrs	r3, r2
 800ea04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea06:	4b33      	ldr	r3, [pc, #204]	; (800ead4 <HAL_RCC_OscConfig+0x4dc>)
 800ea08:	2201      	movs	r2, #1
 800ea0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea0c:	f7fd fc58 	bl	800c2c0 <HAL_GetTick>
 800ea10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea12:	e008      	b.n	800ea26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea14:	f7fd fc54 	bl	800c2c0 <HAL_GetTick>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d901      	bls.n	800ea26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ea22:	2303      	movs	r3, #3
 800ea24:	e04d      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea26:	4b2a      	ldr	r3, [pc, #168]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0f0      	beq.n	800ea14 <HAL_RCC_OscConfig+0x41c>
 800ea32:	e045      	b.n	800eac0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea34:	4b27      	ldr	r3, [pc, #156]	; (800ead4 <HAL_RCC_OscConfig+0x4dc>)
 800ea36:	2200      	movs	r2, #0
 800ea38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea3a:	f7fd fc41 	bl	800c2c0 <HAL_GetTick>
 800ea3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea40:	e008      	b.n	800ea54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea42:	f7fd fc3d 	bl	800c2c0 <HAL_GetTick>
 800ea46:	4602      	mov	r2, r0
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d901      	bls.n	800ea54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e036      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea54:	4b1e      	ldr	r3, [pc, #120]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1f0      	bne.n	800ea42 <HAL_RCC_OscConfig+0x44a>
 800ea60:	e02e      	b.n	800eac0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d101      	bne.n	800ea6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	e029      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ea6e:	4b18      	ldr	r3, [pc, #96]	; (800ead0 <HAL_RCC_OscConfig+0x4d8>)
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d11c      	bne.n	800eabc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d115      	bne.n	800eabc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ea96:	4013      	ands	r3, r2
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d10d      	bne.n	800eabc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d106      	bne.n	800eabc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d001      	beq.n	800eac0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	e000      	b.n	800eac2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	40007000 	.word	0x40007000
 800ead0:	40023800 	.word	0x40023800
 800ead4:	42470060 	.word	0x42470060

0800ead8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d101      	bne.n	800eaec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eae8:	2301      	movs	r3, #1
 800eaea:	e0cc      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eaec:	4b68      	ldr	r3, [pc, #416]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 030f 	and.w	r3, r3, #15
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d90c      	bls.n	800eb14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eafa:	4b65      	ldr	r3, [pc, #404]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	b2d2      	uxtb	r2, r2
 800eb00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb02:	4b63      	ldr	r3, [pc, #396]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 030f 	and.w	r3, r3, #15
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d001      	beq.n	800eb14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e0b8      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f003 0302 	and.w	r3, r3, #2
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d020      	beq.n	800eb62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 0304 	and.w	r3, r3, #4
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eb2c:	4b59      	ldr	r3, [pc, #356]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	4a58      	ldr	r2, [pc, #352]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800eb36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f003 0308 	and.w	r3, r3, #8
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d005      	beq.n	800eb50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eb44:	4b53      	ldr	r3, [pc, #332]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	4a52      	ldr	r2, [pc, #328]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800eb4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb50:	4b50      	ldr	r3, [pc, #320]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	494d      	ldr	r1, [pc, #308]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d044      	beq.n	800ebf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d107      	bne.n	800eb86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb76:	4b47      	ldr	r3, [pc, #284]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d119      	bne.n	800ebb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e07f      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	d003      	beq.n	800eb96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d107      	bne.n	800eba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eb96:	4b3f      	ldr	r3, [pc, #252]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d109      	bne.n	800ebb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e06f      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eba6:	4b3b      	ldr	r3, [pc, #236]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0302 	and.w	r3, r3, #2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d101      	bne.n	800ebb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e067      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ebb6:	4b37      	ldr	r3, [pc, #220]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	f023 0203 	bic.w	r2, r3, #3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4934      	ldr	r1, [pc, #208]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ebc8:	f7fd fb7a 	bl	800c2c0 <HAL_GetTick>
 800ebcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebce:	e00a      	b.n	800ebe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ebd0:	f7fd fb76 	bl	800c2c0 <HAL_GetTick>
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d901      	bls.n	800ebe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	e04f      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebe6:	4b2b      	ldr	r3, [pc, #172]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	f003 020c 	and.w	r2, r3, #12
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d1eb      	bne.n	800ebd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ebf8:	4b25      	ldr	r3, [pc, #148]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f003 030f 	and.w	r3, r3, #15
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d20c      	bcs.n	800ec20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec06:	4b22      	ldr	r3, [pc, #136]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	b2d2      	uxtb	r2, r2
 800ec0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec0e:	4b20      	ldr	r3, [pc, #128]	; (800ec90 <HAL_RCC_ClockConfig+0x1b8>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 030f 	and.w	r3, r3, #15
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d001      	beq.n	800ec20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e032      	b.n	800ec86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 0304 	and.w	r3, r3, #4
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d008      	beq.n	800ec3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec2c:	4b19      	ldr	r3, [pc, #100]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	4916      	ldr	r1, [pc, #88]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f003 0308 	and.w	r3, r3, #8
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d009      	beq.n	800ec5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ec4a:	4b12      	ldr	r3, [pc, #72]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	490e      	ldr	r1, [pc, #56]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ec5e:	f000 f821 	bl	800eca4 <HAL_RCC_GetSysClockFreq>
 800ec62:	4601      	mov	r1, r0
 800ec64:	4b0b      	ldr	r3, [pc, #44]	; (800ec94 <HAL_RCC_ClockConfig+0x1bc>)
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	091b      	lsrs	r3, r3, #4
 800ec6a:	f003 030f 	and.w	r3, r3, #15
 800ec6e:	4a0a      	ldr	r2, [pc, #40]	; (800ec98 <HAL_RCC_ClockConfig+0x1c0>)
 800ec70:	5cd3      	ldrb	r3, [r2, r3]
 800ec72:	fa21 f303 	lsr.w	r3, r1, r3
 800ec76:	4a09      	ldr	r2, [pc, #36]	; (800ec9c <HAL_RCC_ClockConfig+0x1c4>)
 800ec78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ec7a:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <HAL_RCC_ClockConfig+0x1c8>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fd fada 	bl	800c238 <HAL_InitTick>

  return HAL_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	40023c00 	.word	0x40023c00
 800ec94:	40023800 	.word	0x40023800
 800ec98:	08015b68 	.word	0x08015b68
 800ec9c:	2000000c 	.word	0x2000000c
 800eca0:	20000010 	.word	0x20000010

0800eca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	607b      	str	r3, [r7, #4]
 800ecae:	2300      	movs	r3, #0
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ecba:	4b50      	ldr	r3, [pc, #320]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 030c 	and.w	r3, r3, #12
 800ecc2:	2b04      	cmp	r3, #4
 800ecc4:	d007      	beq.n	800ecd6 <HAL_RCC_GetSysClockFreq+0x32>
 800ecc6:	2b08      	cmp	r3, #8
 800ecc8:	d008      	beq.n	800ecdc <HAL_RCC_GetSysClockFreq+0x38>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f040 808d 	bne.w	800edea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ecd0:	4b4b      	ldr	r3, [pc, #300]	; (800ee00 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ecd2:	60bb      	str	r3, [r7, #8]
       break;
 800ecd4:	e08c      	b.n	800edf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ecd6:	4b4b      	ldr	r3, [pc, #300]	; (800ee04 <HAL_RCC_GetSysClockFreq+0x160>)
 800ecd8:	60bb      	str	r3, [r7, #8]
      break;
 800ecda:	e089      	b.n	800edf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ecdc:	4b47      	ldr	r3, [pc, #284]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ece4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ece6:	4b45      	ldr	r3, [pc, #276]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d023      	beq.n	800ed3a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ecf2:	4b42      	ldr	r3, [pc, #264]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	099b      	lsrs	r3, r3, #6
 800ecf8:	f04f 0400 	mov.w	r4, #0
 800ecfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ed00:	f04f 0200 	mov.w	r2, #0
 800ed04:	ea03 0501 	and.w	r5, r3, r1
 800ed08:	ea04 0602 	and.w	r6, r4, r2
 800ed0c:	4a3d      	ldr	r2, [pc, #244]	; (800ee04 <HAL_RCC_GetSysClockFreq+0x160>)
 800ed0e:	fb02 f106 	mul.w	r1, r2, r6
 800ed12:	2200      	movs	r2, #0
 800ed14:	fb02 f205 	mul.w	r2, r2, r5
 800ed18:	440a      	add	r2, r1
 800ed1a:	493a      	ldr	r1, [pc, #232]	; (800ee04 <HAL_RCC_GetSysClockFreq+0x160>)
 800ed1c:	fba5 0101 	umull	r0, r1, r5, r1
 800ed20:	1853      	adds	r3, r2, r1
 800ed22:	4619      	mov	r1, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f04f 0400 	mov.w	r4, #0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	4623      	mov	r3, r4
 800ed2e:	f7f9 fee3 	bl	8008af8 <__aeabi_uldivmod>
 800ed32:	4603      	mov	r3, r0
 800ed34:	460c      	mov	r4, r1
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e049      	b.n	800edce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed3a:	4b30      	ldr	r3, [pc, #192]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	099b      	lsrs	r3, r3, #6
 800ed40:	f04f 0400 	mov.w	r4, #0
 800ed44:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ed48:	f04f 0200 	mov.w	r2, #0
 800ed4c:	ea03 0501 	and.w	r5, r3, r1
 800ed50:	ea04 0602 	and.w	r6, r4, r2
 800ed54:	4629      	mov	r1, r5
 800ed56:	4632      	mov	r2, r6
 800ed58:	f04f 0300 	mov.w	r3, #0
 800ed5c:	f04f 0400 	mov.w	r4, #0
 800ed60:	0154      	lsls	r4, r2, #5
 800ed62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ed66:	014b      	lsls	r3, r1, #5
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4622      	mov	r2, r4
 800ed6c:	1b49      	subs	r1, r1, r5
 800ed6e:	eb62 0206 	sbc.w	r2, r2, r6
 800ed72:	f04f 0300 	mov.w	r3, #0
 800ed76:	f04f 0400 	mov.w	r4, #0
 800ed7a:	0194      	lsls	r4, r2, #6
 800ed7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ed80:	018b      	lsls	r3, r1, #6
 800ed82:	1a5b      	subs	r3, r3, r1
 800ed84:	eb64 0402 	sbc.w	r4, r4, r2
 800ed88:	f04f 0100 	mov.w	r1, #0
 800ed8c:	f04f 0200 	mov.w	r2, #0
 800ed90:	00e2      	lsls	r2, r4, #3
 800ed92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ed96:	00d9      	lsls	r1, r3, #3
 800ed98:	460b      	mov	r3, r1
 800ed9a:	4614      	mov	r4, r2
 800ed9c:	195b      	adds	r3, r3, r5
 800ed9e:	eb44 0406 	adc.w	r4, r4, r6
 800eda2:	f04f 0100 	mov.w	r1, #0
 800eda6:	f04f 0200 	mov.w	r2, #0
 800edaa:	02a2      	lsls	r2, r4, #10
 800edac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800edb0:	0299      	lsls	r1, r3, #10
 800edb2:	460b      	mov	r3, r1
 800edb4:	4614      	mov	r4, r2
 800edb6:	4618      	mov	r0, r3
 800edb8:	4621      	mov	r1, r4
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f04f 0400 	mov.w	r4, #0
 800edc0:	461a      	mov	r2, r3
 800edc2:	4623      	mov	r3, r4
 800edc4:	f7f9 fe98 	bl	8008af8 <__aeabi_uldivmod>
 800edc8:	4603      	mov	r3, r0
 800edca:	460c      	mov	r4, r1
 800edcc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800edce:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <HAL_RCC_GetSysClockFreq+0x158>)
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	0c1b      	lsrs	r3, r3, #16
 800edd4:	f003 0303 	and.w	r3, r3, #3
 800edd8:	3301      	adds	r3, #1
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ede6:	60bb      	str	r3, [r7, #8]
      break;
 800ede8:	e002      	b.n	800edf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800edea:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <HAL_RCC_GetSysClockFreq+0x15c>)
 800edec:	60bb      	str	r3, [r7, #8]
      break;
 800edee:	bf00      	nop
    }
  }
  return sysclockfreq;
 800edf0:	68bb      	ldr	r3, [r7, #8]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	40023800 	.word	0x40023800
 800ee00:	00f42400 	.word	0x00f42400
 800ee04:	00b71b00 	.word	0x00b71b00

0800ee08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ee0c:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <HAL_RCC_GetHCLKFreq+0x14>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	2000000c 	.word	0x2000000c

0800ee20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ee24:	f7ff fff0 	bl	800ee08 <HAL_RCC_GetHCLKFreq>
 800ee28:	4601      	mov	r1, r0
 800ee2a:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	0a9b      	lsrs	r3, r3, #10
 800ee30:	f003 0307 	and.w	r3, r3, #7
 800ee34:	4a03      	ldr	r2, [pc, #12]	; (800ee44 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ee36:	5cd3      	ldrb	r3, [r2, r3]
 800ee38:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	40023800 	.word	0x40023800
 800ee44:	08015b78 	.word	0x08015b78

0800ee48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ee4c:	f7ff ffdc 	bl	800ee08 <HAL_RCC_GetHCLKFreq>
 800ee50:	4601      	mov	r1, r0
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	0b5b      	lsrs	r3, r3, #13
 800ee58:	f003 0307 	and.w	r3, r3, #7
 800ee5c:	4a03      	ldr	r2, [pc, #12]	; (800ee6c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee5e:	5cd3      	ldrb	r3, [r2, r3]
 800ee60:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	40023800 	.word	0x40023800
 800ee6c:	08015b78 	.word	0x08015b78

0800ee70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e056      	b.n	800ef30 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d106      	bne.n	800eea2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f7fc fbc3 	bl	800b628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2202      	movs	r2, #2
 800eea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eeb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	431a      	orrs	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	431a      	orrs	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	691b      	ldr	r3, [r3, #16]
 800eece:	431a      	orrs	r2, r3
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	695b      	ldr	r3, [r3, #20]
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	699b      	ldr	r3, [r3, #24]
 800eeda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eede:	431a      	orrs	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	69db      	ldr	r3, [r3, #28]
 800eee4:	431a      	orrs	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a1b      	ldr	r3, [r3, #32]
 800eeea:	ea42 0103 	orr.w	r1, r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	430a      	orrs	r2, r1
 800eef8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	699b      	ldr	r3, [r3, #24]
 800eefe:	0c1b      	lsrs	r3, r3, #16
 800ef00:	f003 0104 	and.w	r1, r3, #4
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	69da      	ldr	r2, [r3, #28]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	603b      	str	r3, [r7, #0]
 800ef44:	4613      	mov	r3, r2
 800ef46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ef52:	2b01      	cmp	r3, #1
 800ef54:	d101      	bne.n	800ef5a <HAL_SPI_Transmit+0x22>
 800ef56:	2302      	movs	r3, #2
 800ef58:	e11e      	b.n	800f198 <HAL_SPI_Transmit+0x260>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef62:	f7fd f9ad 	bl	800c2c0 <HAL_GetTick>
 800ef66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ef68:	88fb      	ldrh	r3, [r7, #6]
 800ef6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d002      	beq.n	800ef7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ef78:	2302      	movs	r3, #2
 800ef7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ef7c:	e103      	b.n	800f186 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d002      	beq.n	800ef8a <HAL_SPI_Transmit+0x52>
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d102      	bne.n	800ef90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ef8e:	e0fa      	b.n	800f186 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2203      	movs	r2, #3
 800ef94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	88fa      	ldrh	r2, [r7, #6]
 800efa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	88fa      	ldrh	r2, [r7, #6]
 800efae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2200      	movs	r2, #0
 800efba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efd6:	d107      	bne.n	800efe8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800efe6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eff2:	2b40      	cmp	r3, #64	; 0x40
 800eff4:	d007      	beq.n	800f006 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f00e:	d14b      	bne.n	800f0a8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <HAL_SPI_Transmit+0xe6>
 800f018:	8afb      	ldrh	r3, [r7, #22]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d13e      	bne.n	800f09c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f022:	881a      	ldrh	r2, [r3, #0]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f02e:	1c9a      	adds	r2, r3, #2
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f038:	b29b      	uxth	r3, r3
 800f03a:	3b01      	subs	r3, #1
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f042:	e02b      	b.n	800f09c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	f003 0302 	and.w	r3, r3, #2
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d112      	bne.n	800f078 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f056:	881a      	ldrh	r2, [r3, #0]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f062:	1c9a      	adds	r2, r3, #2
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	3b01      	subs	r3, #1
 800f070:	b29a      	uxth	r2, r3
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	86da      	strh	r2, [r3, #54]	; 0x36
 800f076:	e011      	b.n	800f09c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f078:	f7fd f922 	bl	800c2c0 <HAL_GetTick>
 800f07c:	4602      	mov	r2, r0
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d803      	bhi.n	800f090 <HAL_SPI_Transmit+0x158>
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08e:	d102      	bne.n	800f096 <HAL_SPI_Transmit+0x15e>
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d102      	bne.n	800f09c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800f096:	2303      	movs	r3, #3
 800f098:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f09a:	e074      	b.n	800f186 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1ce      	bne.n	800f044 <HAL_SPI_Transmit+0x10c>
 800f0a6:	e04c      	b.n	800f142 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <HAL_SPI_Transmit+0x17e>
 800f0b0:	8afb      	ldrh	r3, [r7, #22]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d140      	bne.n	800f138 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	330c      	adds	r3, #12
 800f0c0:	7812      	ldrb	r2, [r2, #0]
 800f0c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c8:	1c5a      	adds	r2, r3, #1
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f0dc:	e02c      	b.n	800f138 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	f003 0302 	and.w	r3, r3, #2
 800f0e8:	2b02      	cmp	r3, #2
 800f0ea:	d113      	bne.n	800f114 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	330c      	adds	r3, #12
 800f0f6:	7812      	ldrb	r2, [r2, #0]
 800f0f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0fe:	1c5a      	adds	r2, r3, #1
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f108:	b29b      	uxth	r3, r3
 800f10a:	3b01      	subs	r3, #1
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	86da      	strh	r2, [r3, #54]	; 0x36
 800f112:	e011      	b.n	800f138 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f114:	f7fd f8d4 	bl	800c2c0 <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	429a      	cmp	r2, r3
 800f122:	d803      	bhi.n	800f12c <HAL_SPI_Transmit+0x1f4>
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d102      	bne.n	800f132 <HAL_SPI_Transmit+0x1fa>
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d102      	bne.n	800f138 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800f132:	2303      	movs	r3, #3
 800f134:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f136:	e026      	b.n	800f186 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1cd      	bne.n	800f0de <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f142:	69ba      	ldr	r2, [r7, #24]
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f000 fba4 	bl	800f894 <SPI_EndRxTxTransaction>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2220      	movs	r2, #32
 800f156:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10a      	bne.n	800f176 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f160:	2300      	movs	r3, #0
 800f162:	613b      	str	r3, [r7, #16]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	613b      	str	r3, [r7, #16]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	613b      	str	r3, [r7, #16]
 800f174:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800f17e:	2301      	movs	r3, #1
 800f180:	77fb      	strb	r3, [r7, #31]
 800f182:	e000      	b.n	800f186 <HAL_SPI_Transmit+0x24e>
  }

error:
 800f184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f196:	7ffb      	ldrb	r3, [r7, #31]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3720      	adds	r7, #32
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	af02      	add	r7, sp, #8
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	603b      	str	r3, [r7, #0]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1bc:	d112      	bne.n	800f1e4 <HAL_SPI_Receive+0x44>
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10e      	bne.n	800f1e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f1ce:	88fa      	ldrh	r2, [r7, #6]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f000 f8e9 	bl	800f3b2 <HAL_SPI_TransmitReceive>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	e0e2      	b.n	800f3aa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d101      	bne.n	800f1f2 <HAL_SPI_Receive+0x52>
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	e0db      	b.n	800f3aa <HAL_SPI_Receive+0x20a>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1fa:	f7fd f861 	bl	800c2c0 <HAL_GetTick>
 800f1fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d002      	beq.n	800f212 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f20c:	2302      	movs	r3, #2
 800f20e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f210:	e0c2      	b.n	800f398 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <HAL_SPI_Receive+0x7e>
 800f218:	88fb      	ldrh	r3, [r7, #6]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d102      	bne.n	800f224 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f222:	e0b9      	b.n	800f398 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2204      	movs	r2, #4
 800f228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	68ba      	ldr	r2, [r7, #8]
 800f236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	88fa      	ldrh	r2, [r7, #6]
 800f23c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	88fa      	ldrh	r2, [r7, #6]
 800f242:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	2200      	movs	r2, #0
 800f254:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f26a:	d107      	bne.n	800f27c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f27a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f286:	2b40      	cmp	r3, #64	; 0x40
 800f288:	d007      	beq.n	800f29a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f298:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d162      	bne.n	800f368 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f2a2:	e02e      	b.n	800f302 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	f003 0301 	and.w	r3, r3, #1
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d115      	bne.n	800f2de <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f103 020c 	add.w	r2, r3, #12
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2be:	7812      	ldrb	r2, [r2, #0]
 800f2c0:	b2d2      	uxtb	r2, r2
 800f2c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2dc:	e011      	b.n	800f302 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2de:	f7fc ffef 	bl	800c2c0 <HAL_GetTick>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d803      	bhi.n	800f2f6 <HAL_SPI_Receive+0x156>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f4:	d102      	bne.n	800f2fc <HAL_SPI_Receive+0x15c>
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f300:	e04a      	b.n	800f398 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f306:	b29b      	uxth	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1cb      	bne.n	800f2a4 <HAL_SPI_Receive+0x104>
 800f30c:	e031      	b.n	800f372 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f003 0301 	and.w	r3, r3, #1
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d113      	bne.n	800f344 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f326:	b292      	uxth	r2, r2
 800f328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32e:	1c9a      	adds	r2, r3, #2
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f338:	b29b      	uxth	r3, r3
 800f33a:	3b01      	subs	r3, #1
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f342:	e011      	b.n	800f368 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f344:	f7fc ffbc 	bl	800c2c0 <HAL_GetTick>
 800f348:	4602      	mov	r2, r0
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	1ad3      	subs	r3, r2, r3
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	429a      	cmp	r2, r3
 800f352:	d803      	bhi.n	800f35c <HAL_SPI_Receive+0x1bc>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35a:	d102      	bne.n	800f362 <HAL_SPI_Receive+0x1c2>
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d102      	bne.n	800f368 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800f362:	2303      	movs	r3, #3
 800f364:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f366:	e017      	b.n	800f398 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1cd      	bne.n	800f30e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f000 fa27 	bl	800f7ca <SPI_EndRxTransaction>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2220      	movs	r2, #32
 800f386:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d002      	beq.n	800f396 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	75fb      	strb	r3, [r7, #23]
 800f394:	e000      	b.n	800f398 <HAL_SPI_Receive+0x1f8>
  }

error :
 800f396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3718      	adds	r7, #24
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b08c      	sub	sp, #48	; 0x30
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	607a      	str	r2, [r7, #4]
 800f3be:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d101      	bne.n	800f3d8 <HAL_SPI_TransmitReceive+0x26>
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	e18a      	b.n	800f6ee <HAL_SPI_TransmitReceive+0x33c>
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3e0:	f7fc ff6e 	bl	800c2c0 <HAL_GetTick>
 800f3e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f3ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f3f6:	887b      	ldrh	r3, [r7, #2]
 800f3f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f3fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d00f      	beq.n	800f422 <HAL_SPI_TransmitReceive+0x70>
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f408:	d107      	bne.n	800f41a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d103      	bne.n	800f41a <HAL_SPI_TransmitReceive+0x68>
 800f412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f416:	2b04      	cmp	r3, #4
 800f418:	d003      	beq.n	800f422 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f41a:	2302      	movs	r3, #2
 800f41c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f420:	e15b      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d005      	beq.n	800f434 <HAL_SPI_TransmitReceive+0x82>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <HAL_SPI_TransmitReceive+0x82>
 800f42e:	887b      	ldrh	r3, [r7, #2]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d103      	bne.n	800f43c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f43a:	e14e      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b04      	cmp	r3, #4
 800f446:	d003      	beq.n	800f450 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2205      	movs	r2, #5
 800f44c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2200      	movs	r2, #0
 800f454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	887a      	ldrh	r2, [r7, #2]
 800f460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	887a      	ldrh	r2, [r7, #2]
 800f466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	887a      	ldrh	r2, [r7, #2]
 800f472:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	887a      	ldrh	r2, [r7, #2]
 800f478:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f490:	2b40      	cmp	r3, #64	; 0x40
 800f492:	d007      	beq.n	800f4a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ac:	d178      	bne.n	800f5a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <HAL_SPI_TransmitReceive+0x10a>
 800f4b6:	8b7b      	ldrh	r3, [r7, #26]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d166      	bne.n	800f58a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4c0:	881a      	ldrh	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4cc:	1c9a      	adds	r2, r3, #2
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4e0:	e053      	b.n	800f58a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	f003 0302 	and.w	r3, r3, #2
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	d11b      	bne.n	800f528 <HAL_SPI_TransmitReceive+0x176>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d016      	beq.n	800f528 <HAL_SPI_TransmitReceive+0x176>
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d113      	bne.n	800f528 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f504:	881a      	ldrh	r2, [r3, #0]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f510:	1c9a      	adds	r2, r3, #2
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	3b01      	subs	r3, #1
 800f51e:	b29a      	uxth	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f524:	2300      	movs	r3, #0
 800f526:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	689b      	ldr	r3, [r3, #8]
 800f52e:	f003 0301 	and.w	r3, r3, #1
 800f532:	2b01      	cmp	r3, #1
 800f534:	d119      	bne.n	800f56a <HAL_SPI_TransmitReceive+0x1b8>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d014      	beq.n	800f56a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68da      	ldr	r2, [r3, #12]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54a:	b292      	uxth	r2, r2
 800f54c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f552:	1c9a      	adds	r2, r3, #2
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	3b01      	subs	r3, #1
 800f560:	b29a      	uxth	r2, r3
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f566:	2301      	movs	r3, #1
 800f568:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f56a:	f7fc fea9 	bl	800c2c0 <HAL_GetTick>
 800f56e:	4602      	mov	r2, r0
 800f570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f576:	429a      	cmp	r2, r3
 800f578:	d807      	bhi.n	800f58a <HAL_SPI_TransmitReceive+0x1d8>
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f580:	d003      	beq.n	800f58a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800f582:	2303      	movs	r3, #3
 800f584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f588:	e0a7      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f58e:	b29b      	uxth	r3, r3
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1a6      	bne.n	800f4e2 <HAL_SPI_TransmitReceive+0x130>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f598:	b29b      	uxth	r3, r3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1a1      	bne.n	800f4e2 <HAL_SPI_TransmitReceive+0x130>
 800f59e:	e07c      	b.n	800f69a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <HAL_SPI_TransmitReceive+0x1fc>
 800f5a8:	8b7b      	ldrh	r3, [r7, #26]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d16b      	bne.n	800f686 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	330c      	adds	r3, #12
 800f5b8:	7812      	ldrb	r2, [r2, #0]
 800f5ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5c0:	1c5a      	adds	r2, r3, #1
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5d4:	e057      	b.n	800f686 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	f003 0302 	and.w	r3, r3, #2
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d11c      	bne.n	800f61e <HAL_SPI_TransmitReceive+0x26c>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d017      	beq.n	800f61e <HAL_SPI_TransmitReceive+0x26c>
 800f5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d114      	bne.n	800f61e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	330c      	adds	r3, #12
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f610:	b29b      	uxth	r3, r3
 800f612:	3b01      	subs	r3, #1
 800f614:	b29a      	uxth	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f61a:	2300      	movs	r3, #0
 800f61c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	689b      	ldr	r3, [r3, #8]
 800f624:	f003 0301 	and.w	r3, r3, #1
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d119      	bne.n	800f660 <HAL_SPI_TransmitReceive+0x2ae>
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f630:	b29b      	uxth	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d014      	beq.n	800f660 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68da      	ldr	r2, [r3, #12]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f640:	b2d2      	uxtb	r2, r2
 800f642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f648:	1c5a      	adds	r2, r3, #1
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f652:	b29b      	uxth	r3, r3
 800f654:	3b01      	subs	r3, #1
 800f656:	b29a      	uxth	r2, r3
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f65c:	2301      	movs	r3, #1
 800f65e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f660:	f7fc fe2e 	bl	800c2c0 <HAL_GetTick>
 800f664:	4602      	mov	r2, r0
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d803      	bhi.n	800f678 <HAL_SPI_TransmitReceive+0x2c6>
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f676:	d102      	bne.n	800f67e <HAL_SPI_TransmitReceive+0x2cc>
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d103      	bne.n	800f686 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800f67e:	2303      	movs	r3, #3
 800f680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800f684:	e029      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1a2      	bne.n	800f5d6 <HAL_SPI_TransmitReceive+0x224>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f694:	b29b      	uxth	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d19d      	bne.n	800f5d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f69c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f000 f8f8 	bl	800f894 <SPI_EndRxTxTransaction>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d006      	beq.n	800f6b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2220      	movs	r2, #32
 800f6b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800f6b6:	e010      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10b      	bne.n	800f6d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	617b      	str	r3, [r7, #20]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	617b      	str	r3, [r7, #20]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	617b      	str	r3, [r7, #20]
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	e000      	b.n	800f6da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800f6d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f6ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3730      	adds	r7, #48	; 0x30
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b084      	sub	sp, #16
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	60f8      	str	r0, [r7, #12]
 800f6fe:	60b9      	str	r1, [r7, #8]
 800f700:	603b      	str	r3, [r7, #0]
 800f702:	4613      	mov	r3, r2
 800f704:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f706:	e04c      	b.n	800f7a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f70e:	d048      	beq.n	800f7a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f710:	f7fc fdd6 	bl	800c2c0 <HAL_GetTick>
 800f714:	4602      	mov	r2, r0
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d902      	bls.n	800f726 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d13d      	bne.n	800f7a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f73e:	d111      	bne.n	800f764 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f748:	d004      	beq.n	800f754 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f752:	d107      	bne.n	800f764 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f76c:	d10f      	bne.n	800f78e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f78c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2201      	movs	r2, #1
 800f792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	e00f      	b.n	800f7c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	689a      	ldr	r2, [r3, #8]
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	bf0c      	ite	eq
 800f7b2:	2301      	moveq	r3, #1
 800f7b4:	2300      	movne	r3, #0
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	79fb      	ldrb	r3, [r7, #7]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d1a3      	bne.n	800f708 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f7ca:	b580      	push	{r7, lr}
 800f7cc:	b086      	sub	sp, #24
 800f7ce:	af02      	add	r7, sp, #8
 800f7d0:	60f8      	str	r0, [r7, #12]
 800f7d2:	60b9      	str	r1, [r7, #8]
 800f7d4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7de:	d111      	bne.n	800f804 <SPI_EndRxTransaction+0x3a>
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7e8:	d004      	beq.n	800f7f4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7f2:	d107      	bne.n	800f804 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f802:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f80c:	d12a      	bne.n	800f864 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f816:	d012      	beq.n	800f83e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2200      	movs	r2, #0
 800f820:	2180      	movs	r1, #128	; 0x80
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7ff ff67 	bl	800f6f6 <SPI_WaitFlagStateUntilTimeout>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d02d      	beq.n	800f88a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f832:	f043 0220 	orr.w	r2, r3, #32
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f83a:	2303      	movs	r3, #3
 800f83c:	e026      	b.n	800f88c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	9300      	str	r3, [sp, #0]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2200      	movs	r2, #0
 800f846:	2101      	movs	r1, #1
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f7ff ff54 	bl	800f6f6 <SPI_WaitFlagStateUntilTimeout>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d01a      	beq.n	800f88a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f858:	f043 0220 	orr.w	r2, r3, #32
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f860:	2303      	movs	r3, #3
 800f862:	e013      	b.n	800f88c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	2200      	movs	r2, #0
 800f86c:	2101      	movs	r1, #1
 800f86e:	68f8      	ldr	r0, [r7, #12]
 800f870:	f7ff ff41 	bl	800f6f6 <SPI_WaitFlagStateUntilTimeout>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d007      	beq.n	800f88a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f87e:	f043 0220 	orr.w	r2, r3, #32
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f886:	2303      	movs	r3, #3
 800f888:	e000      	b.n	800f88c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af02      	add	r7, sp, #8
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f8a0:	4b1b      	ldr	r3, [pc, #108]	; (800f910 <SPI_EndRxTxTransaction+0x7c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a1b      	ldr	r2, [pc, #108]	; (800f914 <SPI_EndRxTxTransaction+0x80>)
 800f8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8aa:	0d5b      	lsrs	r3, r3, #21
 800f8ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f8b0:	fb02 f303 	mul.w	r3, r2, r3
 800f8b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8be:	d112      	bne.n	800f8e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	9300      	str	r3, [sp, #0]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	2180      	movs	r1, #128	; 0x80
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff ff13 	bl	800f6f6 <SPI_WaitFlagStateUntilTimeout>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d016      	beq.n	800f904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8da:	f043 0220 	orr.w	r2, r3, #32
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	e00f      	b.n	800f906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00a      	beq.n	800f902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	689b      	ldr	r3, [r3, #8]
 800f8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8fc:	2b80      	cmp	r3, #128	; 0x80
 800f8fe:	d0f2      	beq.n	800f8e6 <SPI_EndRxTxTransaction+0x52>
 800f900:	e000      	b.n	800f904 <SPI_EndRxTxTransaction+0x70>
        break;
 800f902:	bf00      	nop
  }

  return HAL_OK;
 800f904:	2300      	movs	r3, #0
}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	2000000c 	.word	0x2000000c
 800f914:	165e9f81 	.word	0x165e9f81

0800f918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f926:	2301      	movs	r3, #1
 800f928:	e01d      	b.n	800f966 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d106      	bne.n	800f944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7fb ff70 	bl	800b824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	3304      	adds	r3, #4
 800f954:	4619      	mov	r1, r3
 800f956:	4610      	mov	r0, r2
 800f958:	f000 fb82 	bl	8010060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f96e:	b480      	push	{r7}
 800f970:	b085      	sub	sp, #20
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	68da      	ldr	r2, [r3, #12]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f042 0201 	orr.w	r2, r2, #1
 800f984:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f003 0307 	and.w	r3, r3, #7
 800f990:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b06      	cmp	r3, #6
 800f996:	d007      	beq.n	800f9a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f042 0201 	orr.w	r2, r2, #1
 800f9a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3714      	adds	r7, #20
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f9b6:	b480      	push	{r7}
 800f9b8:	b083      	sub	sp, #12
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68da      	ldr	r2, [r3, #12]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f022 0201 	bic.w	r2, r2, #1
 800f9cc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6a1a      	ldr	r2, [r3, #32]
 800f9d4:	f241 1311 	movw	r3, #4369	; 0x1111
 800f9d8:	4013      	ands	r3, r2
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10f      	bne.n	800f9fe <HAL_TIM_Base_Stop_IT+0x48>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	6a1a      	ldr	r2, [r3, #32]
 800f9e4:	f240 4344 	movw	r3, #1092	; 0x444
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d107      	bne.n	800f9fe <HAL_TIM_Base_Stop_IT+0x48>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f022 0201 	bic.w	r2, r2, #1
 800f9fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d101      	bne.n	800fa1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e01d      	b.n	800fa5a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7fb febe 	bl	800b7b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3304      	adds	r3, #4
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f000 fb08 	bl	8010060 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3708      	adds	r7, #8
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
	...

0800fa64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2201      	movs	r2, #1
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 fd42 	bl	8010500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a15      	ldr	r2, [pc, #84]	; (800fad8 <HAL_TIM_PWM_Start+0x74>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d004      	beq.n	800fa90 <HAL_TIM_PWM_Start+0x2c>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a14      	ldr	r2, [pc, #80]	; (800fadc <HAL_TIM_PWM_Start+0x78>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d101      	bne.n	800fa94 <HAL_TIM_PWM_Start+0x30>
 800fa90:	2301      	movs	r3, #1
 800fa92:	e000      	b.n	800fa96 <HAL_TIM_PWM_Start+0x32>
 800fa94:	2300      	movs	r3, #0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d007      	beq.n	800faaa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800faa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	f003 0307 	and.w	r3, r3, #7
 800fab4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b06      	cmp	r3, #6
 800faba:	d007      	beq.n	800facc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f042 0201 	orr.w	r2, r2, #1
 800faca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	40010000 	.word	0x40010000
 800fadc:	40010400 	.word	0x40010400

0800fae0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e083      	b.n	800fbfc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d106      	bne.n	800fb0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7fb fdd5 	bl	800b6b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2202      	movs	r2, #2
 800fb12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	6812      	ldr	r2, [r2, #0]
 800fb20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb24:	f023 0307 	bic.w	r3, r3, #7
 800fb28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	3304      	adds	r3, #4
 800fb32:	4619      	mov	r1, r3
 800fb34:	4610      	mov	r0, r2
 800fb36:	f000 fa93 	bl	8010060 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6a1b      	ldr	r3, [r3, #32]
 800fb50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb62:	f023 0303 	bic.w	r3, r3, #3
 800fb66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	689a      	ldr	r2, [r3, #8]
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	021b      	lsls	r3, r3, #8
 800fb72:	4313      	orrs	r3, r2
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	4313      	orrs	r3, r2
 800fb78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fb80:	f023 030c 	bic.w	r3, r3, #12
 800fb84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fb8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fb90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	68da      	ldr	r2, [r3, #12]
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	69db      	ldr	r3, [r3, #28]
 800fb9a:	021b      	lsls	r3, r3, #8
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	011a      	lsls	r2, r3, #4
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	031b      	lsls	r3, r3, #12
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	693a      	ldr	r2, [r7, #16]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fbbe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fbc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	011b      	lsls	r3, r3, #4
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	693a      	ldr	r2, [r7, #16]
 800fbe8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <HAL_TIM_Encoder_Start+0x16>
 800fc14:	2b04      	cmp	r3, #4
 800fc16:	d008      	beq.n	800fc2a <HAL_TIM_Encoder_Start+0x26>
 800fc18:	e00f      	b.n	800fc3a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	2100      	movs	r1, #0
 800fc22:	4618      	mov	r0, r3
 800fc24:	f000 fc6c 	bl	8010500 <TIM_CCxChannelCmd>
      break;
 800fc28:	e016      	b.n	800fc58 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	2104      	movs	r1, #4
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 fc64 	bl	8010500 <TIM_CCxChannelCmd>
      break;
 800fc38:	e00e      	b.n	800fc58 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	2100      	movs	r1, #0
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 fc5c 	bl	8010500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	2104      	movs	r1, #4
 800fc50:	4618      	mov	r0, r3
 800fc52:	f000 fc55 	bl	8010500 <TIM_CCxChannelCmd>
      break;
 800fc56:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f042 0201 	orr.w	r2, r2, #1
 800fc66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b082      	sub	sp, #8
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	f003 0302 	and.w	r3, r3, #2
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d122      	bne.n	800fcce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	f003 0302 	and.w	r3, r3, #2
 800fc92:	2b02      	cmp	r3, #2
 800fc94:	d11b      	bne.n	800fcce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f06f 0202 	mvn.w	r2, #2
 800fc9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2201      	movs	r2, #1
 800fca4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	f003 0303 	and.w	r3, r3, #3
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d003      	beq.n	800fcbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f9b5 	bl	8010024 <HAL_TIM_IC_CaptureCallback>
 800fcba:	e005      	b.n	800fcc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 f9a7 	bl	8010010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f9b8 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2200      	movs	r2, #0
 800fccc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	f003 0304 	and.w	r3, r3, #4
 800fcd8:	2b04      	cmp	r3, #4
 800fcda:	d122      	bne.n	800fd22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	f003 0304 	and.w	r3, r3, #4
 800fce6:	2b04      	cmp	r3, #4
 800fce8:	d11b      	bne.n	800fd22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f06f 0204 	mvn.w	r2, #4
 800fcf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d003      	beq.n	800fd10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f98b 	bl	8010024 <HAL_TIM_IC_CaptureCallback>
 800fd0e:	e005      	b.n	800fd1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 f97d 	bl	8010010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 f98e 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	f003 0308 	and.w	r3, r3, #8
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d122      	bne.n	800fd76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	f003 0308 	and.w	r3, r3, #8
 800fd3a:	2b08      	cmp	r3, #8
 800fd3c:	d11b      	bne.n	800fd76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f06f 0208 	mvn.w	r2, #8
 800fd46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2204      	movs	r2, #4
 800fd4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	f003 0303 	and.w	r3, r3, #3
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d003      	beq.n	800fd64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f961 	bl	8010024 <HAL_TIM_IC_CaptureCallback>
 800fd62:	e005      	b.n	800fd70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 f953 	bl	8010010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 f964 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	f003 0310 	and.w	r3, r3, #16
 800fd80:	2b10      	cmp	r3, #16
 800fd82:	d122      	bne.n	800fdca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	f003 0310 	and.w	r3, r3, #16
 800fd8e:	2b10      	cmp	r3, #16
 800fd90:	d11b      	bne.n	800fdca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f06f 0210 	mvn.w	r2, #16
 800fd9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2208      	movs	r2, #8
 800fda0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	69db      	ldr	r3, [r3, #28]
 800fda8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d003      	beq.n	800fdb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f937 	bl	8010024 <HAL_TIM_IC_CaptureCallback>
 800fdb6:	e005      	b.n	800fdc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 f929 	bl	8010010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f93a 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d10e      	bne.n	800fdf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f003 0301 	and.w	r3, r3, #1
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d107      	bne.n	800fdf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f06f 0201 	mvn.w	r2, #1
 800fdee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7fa fdcd 	bl	800a990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe00:	2b80      	cmp	r3, #128	; 0x80
 800fe02:	d10e      	bne.n	800fe22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe0e:	2b80      	cmp	r3, #128	; 0x80
 800fe10:	d107      	bne.n	800fe22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fe1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fc6d 	bl	80106fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe2c:	2b40      	cmp	r3, #64	; 0x40
 800fe2e:	d10e      	bne.n	800fe4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe3a:	2b40      	cmp	r3, #64	; 0x40
 800fe3c:	d107      	bne.n	800fe4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 f8ff 	bl	801004c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	691b      	ldr	r3, [r3, #16]
 800fe54:	f003 0320 	and.w	r3, r3, #32
 800fe58:	2b20      	cmp	r3, #32
 800fe5a:	d10e      	bne.n	800fe7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	f003 0320 	and.w	r3, r3, #32
 800fe66:	2b20      	cmp	r3, #32
 800fe68:	d107      	bne.n	800fe7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f06f 0220 	mvn.w	r2, #32
 800fe72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fc37 	bl	80106e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe7a:	bf00      	nop
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
	...

0800fe84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d101      	bne.n	800fe9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e0b4      	b.n	8010008 <HAL_TIM_PWM_ConfigChannel+0x184>
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2201      	movs	r2, #1
 800fea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2202      	movs	r2, #2
 800feaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2b0c      	cmp	r3, #12
 800feb2:	f200 809f 	bhi.w	800fff4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800feb6:	a201      	add	r2, pc, #4	; (adr r2, 800febc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800feb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febc:	0800fef1 	.word	0x0800fef1
 800fec0:	0800fff5 	.word	0x0800fff5
 800fec4:	0800fff5 	.word	0x0800fff5
 800fec8:	0800fff5 	.word	0x0800fff5
 800fecc:	0800ff31 	.word	0x0800ff31
 800fed0:	0800fff5 	.word	0x0800fff5
 800fed4:	0800fff5 	.word	0x0800fff5
 800fed8:	0800fff5 	.word	0x0800fff5
 800fedc:	0800ff73 	.word	0x0800ff73
 800fee0:	0800fff5 	.word	0x0800fff5
 800fee4:	0800fff5 	.word	0x0800fff5
 800fee8:	0800fff5 	.word	0x0800fff5
 800feec:	0800ffb3 	.word	0x0800ffb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68b9      	ldr	r1, [r7, #8]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f000 f952 	bl	80101a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	699a      	ldr	r2, [r3, #24]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f042 0208 	orr.w	r2, r2, #8
 800ff0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f022 0204 	bic.w	r2, r2, #4
 800ff1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	6999      	ldr	r1, [r3, #24]
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	691a      	ldr	r2, [r3, #16]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	430a      	orrs	r2, r1
 800ff2c:	619a      	str	r2, [r3, #24]
      break;
 800ff2e:	e062      	b.n	800fff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 f9a2 	bl	8010280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	699a      	ldr	r2, [r3, #24]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	699a      	ldr	r2, [r3, #24]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6999      	ldr	r1, [r3, #24]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	021a      	lsls	r2, r3, #8
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	430a      	orrs	r2, r1
 800ff6e:	619a      	str	r2, [r3, #24]
      break;
 800ff70:	e041      	b.n	800fff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68b9      	ldr	r1, [r7, #8]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f000 f9f7 	bl	801036c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	69da      	ldr	r2, [r3, #28]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f042 0208 	orr.w	r2, r2, #8
 800ff8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	69da      	ldr	r2, [r3, #28]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f022 0204 	bic.w	r2, r2, #4
 800ff9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	69d9      	ldr	r1, [r3, #28]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	691a      	ldr	r2, [r3, #16]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	430a      	orrs	r2, r1
 800ffae:	61da      	str	r2, [r3, #28]
      break;
 800ffb0:	e021      	b.n	800fff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 fa4b 	bl	8010454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	69da      	ldr	r2, [r3, #28]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	69da      	ldr	r2, [r3, #28]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	69d9      	ldr	r1, [r3, #28]
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	021a      	lsls	r2, r3, #8
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	430a      	orrs	r2, r1
 800fff0:	61da      	str	r2, [r3, #28]
      break;
 800fff2:	e000      	b.n	800fff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800fff4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2200      	movs	r2, #0
 8010002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010018:	bf00      	nop
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010060:	b480      	push	{r7}
 8010062:	b085      	sub	sp, #20
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a40      	ldr	r2, [pc, #256]	; (8010174 <TIM_Base_SetConfig+0x114>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d013      	beq.n	80100a0 <TIM_Base_SetConfig+0x40>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801007e:	d00f      	beq.n	80100a0 <TIM_Base_SetConfig+0x40>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4a3d      	ldr	r2, [pc, #244]	; (8010178 <TIM_Base_SetConfig+0x118>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d00b      	beq.n	80100a0 <TIM_Base_SetConfig+0x40>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4a3c      	ldr	r2, [pc, #240]	; (801017c <TIM_Base_SetConfig+0x11c>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d007      	beq.n	80100a0 <TIM_Base_SetConfig+0x40>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4a3b      	ldr	r2, [pc, #236]	; (8010180 <TIM_Base_SetConfig+0x120>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d003      	beq.n	80100a0 <TIM_Base_SetConfig+0x40>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4a3a      	ldr	r2, [pc, #232]	; (8010184 <TIM_Base_SetConfig+0x124>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d108      	bne.n	80100b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	4313      	orrs	r3, r2
 80100b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a2f      	ldr	r2, [pc, #188]	; (8010174 <TIM_Base_SetConfig+0x114>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d02b      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100c0:	d027      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4a2c      	ldr	r2, [pc, #176]	; (8010178 <TIM_Base_SetConfig+0x118>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d023      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4a2b      	ldr	r2, [pc, #172]	; (801017c <TIM_Base_SetConfig+0x11c>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d01f      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4a2a      	ldr	r2, [pc, #168]	; (8010180 <TIM_Base_SetConfig+0x120>)
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d01b      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4a29      	ldr	r2, [pc, #164]	; (8010184 <TIM_Base_SetConfig+0x124>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d017      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	4a28      	ldr	r2, [pc, #160]	; (8010188 <TIM_Base_SetConfig+0x128>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d013      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4a27      	ldr	r2, [pc, #156]	; (801018c <TIM_Base_SetConfig+0x12c>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d00f      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a26      	ldr	r2, [pc, #152]	; (8010190 <TIM_Base_SetConfig+0x130>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d00b      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4a25      	ldr	r2, [pc, #148]	; (8010194 <TIM_Base_SetConfig+0x134>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d007      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a24      	ldr	r2, [pc, #144]	; (8010198 <TIM_Base_SetConfig+0x138>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d003      	beq.n	8010112 <TIM_Base_SetConfig+0xb2>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a23      	ldr	r2, [pc, #140]	; (801019c <TIM_Base_SetConfig+0x13c>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d108      	bne.n	8010124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	4313      	orrs	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	695b      	ldr	r3, [r3, #20]
 801012e:	4313      	orrs	r3, r2
 8010130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	689a      	ldr	r2, [r3, #8]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4a0a      	ldr	r2, [pc, #40]	; (8010174 <TIM_Base_SetConfig+0x114>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d003      	beq.n	8010158 <TIM_Base_SetConfig+0xf8>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	4a0c      	ldr	r2, [pc, #48]	; (8010184 <TIM_Base_SetConfig+0x124>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d103      	bne.n	8010160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	691a      	ldr	r2, [r3, #16]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2201      	movs	r2, #1
 8010164:	615a      	str	r2, [r3, #20]
}
 8010166:	bf00      	nop
 8010168:	3714      	adds	r7, #20
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	40010000 	.word	0x40010000
 8010178:	40000400 	.word	0x40000400
 801017c:	40000800 	.word	0x40000800
 8010180:	40000c00 	.word	0x40000c00
 8010184:	40010400 	.word	0x40010400
 8010188:	40014000 	.word	0x40014000
 801018c:	40014400 	.word	0x40014400
 8010190:	40014800 	.word	0x40014800
 8010194:	40001800 	.word	0x40001800
 8010198:	40001c00 	.word	0x40001c00
 801019c:	40002000 	.word	0x40002000

080101a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b087      	sub	sp, #28
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6a1b      	ldr	r3, [r3, #32]
 80101ae:	f023 0201 	bic.w	r2, r3, #1
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	699b      	ldr	r3, [r3, #24]
 80101c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	f023 0303 	bic.w	r3, r3, #3
 80101d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	4313      	orrs	r3, r2
 80101e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	f023 0302 	bic.w	r3, r3, #2
 80101e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	4313      	orrs	r3, r2
 80101f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a20      	ldr	r2, [pc, #128]	; (8010278 <TIM_OC1_SetConfig+0xd8>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d003      	beq.n	8010204 <TIM_OC1_SetConfig+0x64>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a1f      	ldr	r2, [pc, #124]	; (801027c <TIM_OC1_SetConfig+0xdc>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d10c      	bne.n	801021e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	f023 0308 	bic.w	r3, r3, #8
 801020a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	697a      	ldr	r2, [r7, #20]
 8010212:	4313      	orrs	r3, r2
 8010214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	f023 0304 	bic.w	r3, r3, #4
 801021c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a15      	ldr	r2, [pc, #84]	; (8010278 <TIM_OC1_SetConfig+0xd8>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d003      	beq.n	801022e <TIM_OC1_SetConfig+0x8e>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4a14      	ldr	r2, [pc, #80]	; (801027c <TIM_OC1_SetConfig+0xdc>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d111      	bne.n	8010252 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801023c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	695b      	ldr	r3, [r3, #20]
 8010242:	693a      	ldr	r2, [r7, #16]
 8010244:	4313      	orrs	r3, r2
 8010246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	699b      	ldr	r3, [r3, #24]
 801024c:	693a      	ldr	r2, [r7, #16]
 801024e:	4313      	orrs	r3, r2
 8010250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	685a      	ldr	r2, [r3, #4]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	697a      	ldr	r2, [r7, #20]
 801026a:	621a      	str	r2, [r3, #32]
}
 801026c:	bf00      	nop
 801026e:	371c      	adds	r7, #28
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr
 8010278:	40010000 	.word	0x40010000
 801027c:	40010400 	.word	0x40010400

08010280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010280:	b480      	push	{r7}
 8010282:	b087      	sub	sp, #28
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6a1b      	ldr	r3, [r3, #32]
 801028e:	f023 0210 	bic.w	r2, r3, #16
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6a1b      	ldr	r3, [r3, #32]
 801029a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	699b      	ldr	r3, [r3, #24]
 80102a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	021b      	lsls	r3, r3, #8
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	f023 0320 	bic.w	r3, r3, #32
 80102ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	011b      	lsls	r3, r3, #4
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a22      	ldr	r2, [pc, #136]	; (8010364 <TIM_OC2_SetConfig+0xe4>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d003      	beq.n	80102e8 <TIM_OC2_SetConfig+0x68>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a21      	ldr	r2, [pc, #132]	; (8010368 <TIM_OC2_SetConfig+0xe8>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d10d      	bne.n	8010304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	011b      	lsls	r3, r3, #4
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4a17      	ldr	r2, [pc, #92]	; (8010364 <TIM_OC2_SetConfig+0xe4>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d003      	beq.n	8010314 <TIM_OC2_SetConfig+0x94>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4a16      	ldr	r2, [pc, #88]	; (8010368 <TIM_OC2_SetConfig+0xe8>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d113      	bne.n	801033c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801031a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	695b      	ldr	r3, [r3, #20]
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	693a      	ldr	r2, [r7, #16]
 801032c:	4313      	orrs	r3, r2
 801032e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	4313      	orrs	r3, r2
 801033a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	685a      	ldr	r2, [r3, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	697a      	ldr	r2, [r7, #20]
 8010354:	621a      	str	r2, [r3, #32]
}
 8010356:	bf00      	nop
 8010358:	371c      	adds	r7, #28
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	40010000 	.word	0x40010000
 8010368:	40010400 	.word	0x40010400

0801036c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801036c:	b480      	push	{r7}
 801036e:	b087      	sub	sp, #28
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6a1b      	ldr	r3, [r3, #32]
 8010386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	69db      	ldr	r3, [r3, #28]
 8010392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801039a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f023 0303 	bic.w	r3, r3, #3
 80103a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	021b      	lsls	r3, r3, #8
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	4313      	orrs	r3, r2
 80103c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a21      	ldr	r2, [pc, #132]	; (801044c <TIM_OC3_SetConfig+0xe0>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d003      	beq.n	80103d2 <TIM_OC3_SetConfig+0x66>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4a20      	ldr	r2, [pc, #128]	; (8010450 <TIM_OC3_SetConfig+0xe4>)
 80103ce:	4293      	cmp	r3, r2
 80103d0:	d10d      	bne.n	80103ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	021b      	lsls	r3, r3, #8
 80103e0:	697a      	ldr	r2, [r7, #20]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4a16      	ldr	r2, [pc, #88]	; (801044c <TIM_OC3_SetConfig+0xe0>)
 80103f2:	4293      	cmp	r3, r2
 80103f4:	d003      	beq.n	80103fe <TIM_OC3_SetConfig+0x92>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4a15      	ldr	r2, [pc, #84]	; (8010450 <TIM_OC3_SetConfig+0xe4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d113      	bne.n	8010426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801040c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	695b      	ldr	r3, [r3, #20]
 8010412:	011b      	lsls	r3, r3, #4
 8010414:	693a      	ldr	r2, [r7, #16]
 8010416:	4313      	orrs	r3, r2
 8010418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	699b      	ldr	r3, [r3, #24]
 801041e:	011b      	lsls	r3, r3, #4
 8010420:	693a      	ldr	r2, [r7, #16]
 8010422:	4313      	orrs	r3, r2
 8010424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	685a      	ldr	r2, [r3, #4]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	621a      	str	r2, [r3, #32]
}
 8010440:	bf00      	nop
 8010442:	371c      	adds	r7, #28
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr
 801044c:	40010000 	.word	0x40010000
 8010450:	40010400 	.word	0x40010400

08010454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010454:	b480      	push	{r7}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a1b      	ldr	r3, [r3, #32]
 8010462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a1b      	ldr	r3, [r3, #32]
 801046e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	69db      	ldr	r3, [r3, #28]
 801047a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801048a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	021b      	lsls	r3, r3, #8
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	4313      	orrs	r3, r2
 8010496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801049e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	031b      	lsls	r3, r3, #12
 80104a6:	693a      	ldr	r2, [r7, #16]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	4a12      	ldr	r2, [pc, #72]	; (80104f8 <TIM_OC4_SetConfig+0xa4>)
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d003      	beq.n	80104bc <TIM_OC4_SetConfig+0x68>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4a11      	ldr	r2, [pc, #68]	; (80104fc <TIM_OC4_SetConfig+0xa8>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d109      	bne.n	80104d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	019b      	lsls	r3, r3, #6
 80104ca:	697a      	ldr	r2, [r7, #20]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	685a      	ldr	r2, [r3, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	693a      	ldr	r2, [r7, #16]
 80104e8:	621a      	str	r2, [r3, #32]
}
 80104ea:	bf00      	nop
 80104ec:	371c      	adds	r7, #28
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr
 80104f6:	bf00      	nop
 80104f8:	40010000 	.word	0x40010000
 80104fc:	40010400 	.word	0x40010400

08010500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010500:	b480      	push	{r7}
 8010502:	b087      	sub	sp, #28
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	f003 031f 	and.w	r3, r3, #31
 8010512:	2201      	movs	r2, #1
 8010514:	fa02 f303 	lsl.w	r3, r2, r3
 8010518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6a1a      	ldr	r2, [r3, #32]
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	43db      	mvns	r3, r3
 8010522:	401a      	ands	r2, r3
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6a1a      	ldr	r2, [r3, #32]
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	f003 031f 	and.w	r3, r3, #31
 8010532:	6879      	ldr	r1, [r7, #4]
 8010534:	fa01 f303 	lsl.w	r3, r1, r3
 8010538:	431a      	orrs	r2, r3
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	621a      	str	r2, [r3, #32]
}
 801053e:	bf00      	nop
 8010540:	371c      	adds	r7, #28
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
	...

0801054c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801054c:	b480      	push	{r7}
 801054e:	b085      	sub	sp, #20
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801055c:	2b01      	cmp	r3, #1
 801055e:	d101      	bne.n	8010564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010560:	2302      	movs	r3, #2
 8010562:	e05a      	b.n	801061a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2202      	movs	r2, #2
 8010570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801058a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	4313      	orrs	r3, r2
 8010594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	4a21      	ldr	r2, [pc, #132]	; (8010628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d022      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80105b0:	d01d      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4a1d      	ldr	r2, [pc, #116]	; (801062c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d018      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4a1b      	ldr	r2, [pc, #108]	; (8010630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d013      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a1a      	ldr	r2, [pc, #104]	; (8010634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d00e      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4a18      	ldr	r2, [pc, #96]	; (8010638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d009      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a17      	ldr	r2, [pc, #92]	; (801063c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d004      	beq.n	80105ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	4a15      	ldr	r2, [pc, #84]	; (8010640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d10c      	bne.n	8010608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	4313      	orrs	r3, r2
 80105fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	68ba      	ldr	r2, [r7, #8]
 8010606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2201      	movs	r2, #1
 801060c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3714      	adds	r7, #20
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	40010000 	.word	0x40010000
 801062c:	40000400 	.word	0x40000400
 8010630:	40000800 	.word	0x40000800
 8010634:	40000c00 	.word	0x40000c00
 8010638:	40010400 	.word	0x40010400
 801063c:	40014000 	.word	0x40014000
 8010640:	40001800 	.word	0x40001800

08010644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801064e:	2300      	movs	r3, #0
 8010650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010658:	2b01      	cmp	r3, #1
 801065a:	d101      	bne.n	8010660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801065c:	2302      	movs	r3, #2
 801065e:	e03d      	b.n	80106dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	4313      	orrs	r3, r2
 8010674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	4313      	orrs	r3, r2
 8010682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	4313      	orrs	r3, r2
 8010690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4313      	orrs	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	691b      	ldr	r3, [r3, #16]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	695b      	ldr	r3, [r3, #20]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	69db      	ldr	r3, [r3, #28]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68fa      	ldr	r2, [r7, #12]
 80106d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2200      	movs	r2, #0
 80106d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010704:	bf00      	nop
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	e03f      	b.n	80107a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d106      	bne.n	801073c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fb f8fe 	bl	800b938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2224      	movs	r2, #36	; 0x24
 8010740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fb4b 	bl	8010df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	691a      	ldr	r2, [r3, #16]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	695a      	ldr	r2, [r3, #20]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	68da      	ldr	r2, [r3, #12]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2200      	movs	r2, #0
 801078e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2220      	movs	r2, #32
 8010794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2220      	movs	r2, #32
 801079c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}

080107aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107aa:	b580      	push	{r7, lr}
 80107ac:	b088      	sub	sp, #32
 80107ae:	af02      	add	r7, sp, #8
 80107b0:	60f8      	str	r0, [r7, #12]
 80107b2:	60b9      	str	r1, [r7, #8]
 80107b4:	603b      	str	r3, [r7, #0]
 80107b6:	4613      	mov	r3, r2
 80107b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80107ba:	2300      	movs	r3, #0
 80107bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b20      	cmp	r3, #32
 80107c8:	f040 8083 	bne.w	80108d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d002      	beq.n	80107d8 <HAL_UART_Transmit+0x2e>
 80107d2:	88fb      	ldrh	r3, [r7, #6]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80107d8:	2301      	movs	r3, #1
 80107da:	e07b      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d101      	bne.n	80107ea <HAL_UART_Transmit+0x40>
 80107e6:	2302      	movs	r3, #2
 80107e8:	e074      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2200      	movs	r2, #0
 80107f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2221      	movs	r2, #33	; 0x21
 80107fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010800:	f7fb fd5e 	bl	800c2c0 <HAL_GetTick>
 8010804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	88fa      	ldrh	r2, [r7, #6]
 801080a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	88fa      	ldrh	r2, [r7, #6]
 8010810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2200      	movs	r2, #0
 8010816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801081a:	e042      	b.n	80108a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010820:	b29b      	uxth	r3, r3
 8010822:	3b01      	subs	r3, #1
 8010824:	b29a      	uxth	r2, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010832:	d122      	bne.n	801087a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	2200      	movs	r2, #0
 801083c:	2180      	movs	r1, #128	; 0x80
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f000 f96a 	bl	8010b18 <UART_WaitOnFlagUntilTimeout>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d001      	beq.n	801084e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801084a:	2303      	movs	r3, #3
 801084c:	e042      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	461a      	mov	r2, r3
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010860:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d103      	bne.n	8010872 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	3302      	adds	r3, #2
 801086e:	60bb      	str	r3, [r7, #8]
 8010870:	e017      	b.n	80108a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	3301      	adds	r3, #1
 8010876:	60bb      	str	r3, [r7, #8]
 8010878:	e013      	b.n	80108a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2200      	movs	r2, #0
 8010882:	2180      	movs	r1, #128	; 0x80
 8010884:	68f8      	ldr	r0, [r7, #12]
 8010886:	f000 f947 	bl	8010b18 <UART_WaitOnFlagUntilTimeout>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010890:	2303      	movs	r3, #3
 8010892:	e01f      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	1c5a      	adds	r2, r3, #1
 8010898:	60ba      	str	r2, [r7, #8]
 801089a:	781a      	ldrb	r2, [r3, #0]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1b7      	bne.n	801081c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	2200      	movs	r2, #0
 80108b4:	2140      	movs	r1, #64	; 0x40
 80108b6:	68f8      	ldr	r0, [r7, #12]
 80108b8:	f000 f92e 	bl	8010b18 <UART_WaitOnFlagUntilTimeout>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80108c2:	2303      	movs	r3, #3
 80108c4:	e006      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2220      	movs	r2, #32
 80108ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80108ce:	2300      	movs	r3, #0
 80108d0:	e000      	b.n	80108d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80108d2:	2302      	movs	r3, #2
  }
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
 80108fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80108fc:	2300      	movs	r3, #0
 80108fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010900:	2300      	movs	r3, #0
 8010902:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	f003 030f 	and.w	r3, r3, #15
 801090a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10d      	bne.n	801092e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	f003 0320 	and.w	r3, r3, #32
 8010918:	2b00      	cmp	r3, #0
 801091a:	d008      	beq.n	801092e <HAL_UART_IRQHandler+0x52>
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	f003 0320 	and.w	r3, r3, #32
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 f9e0 	bl	8010cec <UART_Receive_IT>
      return;
 801092c:	e0d1      	b.n	8010ad2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2b00      	cmp	r3, #0
 8010932:	f000 80b0 	beq.w	8010a96 <HAL_UART_IRQHandler+0x1ba>
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f003 0301 	and.w	r3, r3, #1
 801093c:	2b00      	cmp	r3, #0
 801093e:	d105      	bne.n	801094c <HAL_UART_IRQHandler+0x70>
 8010940:	69bb      	ldr	r3, [r7, #24]
 8010942:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010946:	2b00      	cmp	r3, #0
 8010948:	f000 80a5 	beq.w	8010a96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00a      	beq.n	801096c <HAL_UART_IRQHandler+0x90>
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801095c:	2b00      	cmp	r3, #0
 801095e:	d005      	beq.n	801096c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010964:	f043 0201 	orr.w	r2, r3, #1
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	f003 0304 	and.w	r3, r3, #4
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00a      	beq.n	801098c <HAL_UART_IRQHandler+0xb0>
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	f003 0301 	and.w	r3, r3, #1
 801097c:	2b00      	cmp	r3, #0
 801097e:	d005      	beq.n	801098c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010984:	f043 0202 	orr.w	r2, r3, #2
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	f003 0302 	and.w	r3, r3, #2
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00a      	beq.n	80109ac <HAL_UART_IRQHandler+0xd0>
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	f003 0301 	and.w	r3, r3, #1
 801099c:	2b00      	cmp	r3, #0
 801099e:	d005      	beq.n	80109ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109a4:	f043 0204 	orr.w	r2, r3, #4
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	f003 0308 	and.w	r3, r3, #8
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00f      	beq.n	80109d6 <HAL_UART_IRQHandler+0xfa>
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	f003 0320 	and.w	r3, r3, #32
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d104      	bne.n	80109ca <HAL_UART_IRQHandler+0xee>
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	f003 0301 	and.w	r3, r3, #1
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d005      	beq.n	80109d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ce:	f043 0208 	orr.w	r2, r3, #8
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d078      	beq.n	8010ad0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	f003 0320 	and.w	r3, r3, #32
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d007      	beq.n	80109f8 <HAL_UART_IRQHandler+0x11c>
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	f003 0320 	and.w	r3, r3, #32
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f97a 	bl	8010cec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	695b      	ldr	r3, [r3, #20]
 80109fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a02:	2b40      	cmp	r3, #64	; 0x40
 8010a04:	bf0c      	ite	eq
 8010a06:	2301      	moveq	r3, #1
 8010a08:	2300      	movne	r3, #0
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a12:	f003 0308 	and.w	r3, r3, #8
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d102      	bne.n	8010a20 <HAL_UART_IRQHandler+0x144>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d031      	beq.n	8010a84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 f8c3 	bl	8010bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	695b      	ldr	r3, [r3, #20]
 8010a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a30:	2b40      	cmp	r3, #64	; 0x40
 8010a32:	d123      	bne.n	8010a7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	695a      	ldr	r2, [r3, #20]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010a42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d013      	beq.n	8010a74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a50:	4a21      	ldr	r2, [pc, #132]	; (8010ad8 <HAL_UART_IRQHandler+0x1fc>)
 8010a52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fc fa61 	bl	800cf20 <HAL_DMA_Abort_IT>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d016      	beq.n	8010a92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a6a:	687a      	ldr	r2, [r7, #4]
 8010a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010a6e:	4610      	mov	r0, r2
 8010a70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a72:	e00e      	b.n	8010a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f845 	bl	8010b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a7a:	e00a      	b.n	8010a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f841 	bl	8010b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a82:	e006      	b.n	8010a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f83d 	bl	8010b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010a90:	e01e      	b.n	8010ad0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a92:	bf00      	nop
    return;
 8010a94:	e01c      	b.n	8010ad0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d008      	beq.n	8010ab2 <HAL_UART_IRQHandler+0x1d6>
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d003      	beq.n	8010ab2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 f8b0 	bl	8010c10 <UART_Transmit_IT>
    return;
 8010ab0:	e00f      	b.n	8010ad2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00a      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x1f6>
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d005      	beq.n	8010ad2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f8f8 	bl	8010cbc <UART_EndTransmit_IT>
    return;
 8010acc:	bf00      	nop
 8010ace:	e000      	b.n	8010ad2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8010ad0:	bf00      	nop
  }
}
 8010ad2:	3720      	adds	r7, #32
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	08010be9 	.word	0x08010be9

08010adc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8010af8:	bf00      	nop
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010b0c:	bf00      	nop
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	603b      	str	r3, [r7, #0]
 8010b24:	4613      	mov	r3, r2
 8010b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b28:	e02c      	b.n	8010b84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b30:	d028      	beq.n	8010b84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d007      	beq.n	8010b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b38:	f7fb fbc2 	bl	800c2c0 <HAL_GetTick>
 8010b3c:	4602      	mov	r2, r0
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	1ad3      	subs	r3, r2, r3
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d21d      	bcs.n	8010b84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	68da      	ldr	r2, [r3, #12]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	695a      	ldr	r2, [r3, #20]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f022 0201 	bic.w	r2, r2, #1
 8010b66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2220      	movs	r2, #32
 8010b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2220      	movs	r2, #32
 8010b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010b80:	2303      	movs	r3, #3
 8010b82:	e00f      	b.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	4013      	ands	r3, r2
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	bf0c      	ite	eq
 8010b94:	2301      	moveq	r3, #1
 8010b96:	2300      	movne	r3, #0
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	79fb      	ldrb	r3, [r7, #7]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d0c3      	beq.n	8010b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010ba2:	2300      	movs	r3, #0
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010bc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	695a      	ldr	r2, [r3, #20]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f022 0201 	bic.w	r2, r2, #1
 8010bd2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010bdc:	bf00      	nop
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f7ff ff7e 	bl	8010b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c08:	bf00      	nop
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010c10:	b480      	push	{r7}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	2b21      	cmp	r3, #33	; 0x21
 8010c22:	d144      	bne.n	8010cae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c2c:	d11a      	bne.n	8010c64 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6a1b      	ldr	r3, [r3, #32]
 8010c32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	461a      	mov	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c42:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d105      	bne.n	8010c58 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a1b      	ldr	r3, [r3, #32]
 8010c50:	1c9a      	adds	r2, r3, #2
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	621a      	str	r2, [r3, #32]
 8010c56:	e00e      	b.n	8010c76 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6a1b      	ldr	r3, [r3, #32]
 8010c5c:	1c5a      	adds	r2, r3, #1
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	621a      	str	r2, [r3, #32]
 8010c62:	e008      	b.n	8010c76 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a1b      	ldr	r3, [r3, #32]
 8010c68:	1c59      	adds	r1, r3, #1
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	6211      	str	r1, [r2, #32]
 8010c6e:	781a      	ldrb	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	4619      	mov	r1, r3
 8010c84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10f      	bne.n	8010caa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68da      	ldr	r2, [r3, #12]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	68da      	ldr	r2, [r3, #12]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ca8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010caa:	2300      	movs	r3, #0
 8010cac:	e000      	b.n	8010cb0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010cae:	2302      	movs	r3, #2
  }
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3714      	adds	r7, #20
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68da      	ldr	r2, [r3, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cd2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff fefd 	bl	8010adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b22      	cmp	r3, #34	; 0x22
 8010cfe:	d171      	bne.n	8010de4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d08:	d123      	bne.n	8010d52 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d0e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	691b      	ldr	r3, [r3, #16]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d10e      	bne.n	8010d36 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d2e:	1c9a      	adds	r2, r3, #2
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	629a      	str	r2, [r3, #40]	; 0x28
 8010d34:	e029      	b.n	8010d8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d4a:	1c5a      	adds	r2, r3, #1
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8010d50:	e01b      	b.n	8010d8a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d10a      	bne.n	8010d70 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	6858      	ldr	r0, [r3, #4]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d64:	1c59      	adds	r1, r3, #1
 8010d66:	687a      	ldr	r2, [r7, #4]
 8010d68:	6291      	str	r1, [r2, #40]	; 0x28
 8010d6a:	b2c2      	uxtb	r2, r0
 8010d6c:	701a      	strb	r2, [r3, #0]
 8010d6e:	e00c      	b.n	8010d8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d7c:	1c58      	adds	r0, r3, #1
 8010d7e:	6879      	ldr	r1, [r7, #4]
 8010d80:	6288      	str	r0, [r1, #40]	; 0x28
 8010d82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010d86:	b2d2      	uxtb	r2, r2
 8010d88:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	3b01      	subs	r3, #1
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	4619      	mov	r1, r3
 8010d98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d120      	bne.n	8010de0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	f022 0220 	bic.w	r2, r2, #32
 8010dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	68da      	ldr	r2, [r3, #12]
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	695a      	ldr	r2, [r3, #20]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f022 0201 	bic.w	r2, r2, #1
 8010dcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2220      	movs	r2, #32
 8010dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff fe8a 	bl	8010af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	e002      	b.n	8010de6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	e000      	b.n	8010de6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010de4:	2302      	movs	r3, #2
  }
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
	...

08010df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	b085      	sub	sp, #20
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	691b      	ldr	r3, [r3, #16]
 8010e00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68da      	ldr	r2, [r3, #12]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	430a      	orrs	r2, r1
 8010e0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	689a      	ldr	r2, [r3, #8]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	691b      	ldr	r3, [r3, #16]
 8010e18:	431a      	orrs	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	695b      	ldr	r3, [r3, #20]
 8010e1e:	431a      	orrs	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	69db      	ldr	r3, [r3, #28]
 8010e24:	4313      	orrs	r3, r2
 8010e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010e32:	f023 030c 	bic.w	r3, r3, #12
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	6812      	ldr	r2, [r2, #0]
 8010e3a:	68f9      	ldr	r1, [r7, #12]
 8010e3c:	430b      	orrs	r3, r1
 8010e3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	699a      	ldr	r2, [r3, #24]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	430a      	orrs	r2, r1
 8010e54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	69db      	ldr	r3, [r3, #28]
 8010e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e5e:	f040 818b 	bne.w	8011178 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4ac1      	ldr	r2, [pc, #772]	; (801116c <UART_SetConfig+0x37c>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d005      	beq.n	8010e78 <UART_SetConfig+0x88>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4abf      	ldr	r2, [pc, #764]	; (8011170 <UART_SetConfig+0x380>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	f040 80bd 	bne.w	8010ff2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010e78:	f7fd ffe6 	bl	800ee48 <HAL_RCC_GetPCLK2Freq>
 8010e7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	461d      	mov	r5, r3
 8010e82:	f04f 0600 	mov.w	r6, #0
 8010e86:	46a8      	mov	r8, r5
 8010e88:	46b1      	mov	r9, r6
 8010e8a:	eb18 0308 	adds.w	r3, r8, r8
 8010e8e:	eb49 0409 	adc.w	r4, r9, r9
 8010e92:	4698      	mov	r8, r3
 8010e94:	46a1      	mov	r9, r4
 8010e96:	eb18 0805 	adds.w	r8, r8, r5
 8010e9a:	eb49 0906 	adc.w	r9, r9, r6
 8010e9e:	f04f 0100 	mov.w	r1, #0
 8010ea2:	f04f 0200 	mov.w	r2, #0
 8010ea6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010eaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010eae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010eb2:	4688      	mov	r8, r1
 8010eb4:	4691      	mov	r9, r2
 8010eb6:	eb18 0005 	adds.w	r0, r8, r5
 8010eba:	eb49 0106 	adc.w	r1, r9, r6
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	461d      	mov	r5, r3
 8010ec4:	f04f 0600 	mov.w	r6, #0
 8010ec8:	196b      	adds	r3, r5, r5
 8010eca:	eb46 0406 	adc.w	r4, r6, r6
 8010ece:	461a      	mov	r2, r3
 8010ed0:	4623      	mov	r3, r4
 8010ed2:	f7f7 fe11 	bl	8008af8 <__aeabi_uldivmod>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	460c      	mov	r4, r1
 8010eda:	461a      	mov	r2, r3
 8010edc:	4ba5      	ldr	r3, [pc, #660]	; (8011174 <UART_SetConfig+0x384>)
 8010ede:	fba3 2302 	umull	r2, r3, r3, r2
 8010ee2:	095b      	lsrs	r3, r3, #5
 8010ee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	461d      	mov	r5, r3
 8010eec:	f04f 0600 	mov.w	r6, #0
 8010ef0:	46a9      	mov	r9, r5
 8010ef2:	46b2      	mov	sl, r6
 8010ef4:	eb19 0309 	adds.w	r3, r9, r9
 8010ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8010efc:	4699      	mov	r9, r3
 8010efe:	46a2      	mov	sl, r4
 8010f00:	eb19 0905 	adds.w	r9, r9, r5
 8010f04:	eb4a 0a06 	adc.w	sl, sl, r6
 8010f08:	f04f 0100 	mov.w	r1, #0
 8010f0c:	f04f 0200 	mov.w	r2, #0
 8010f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f1c:	4689      	mov	r9, r1
 8010f1e:	4692      	mov	sl, r2
 8010f20:	eb19 0005 	adds.w	r0, r9, r5
 8010f24:	eb4a 0106 	adc.w	r1, sl, r6
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	461d      	mov	r5, r3
 8010f2e:	f04f 0600 	mov.w	r6, #0
 8010f32:	196b      	adds	r3, r5, r5
 8010f34:	eb46 0406 	adc.w	r4, r6, r6
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4623      	mov	r3, r4
 8010f3c:	f7f7 fddc 	bl	8008af8 <__aeabi_uldivmod>
 8010f40:	4603      	mov	r3, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	461a      	mov	r2, r3
 8010f46:	4b8b      	ldr	r3, [pc, #556]	; (8011174 <UART_SetConfig+0x384>)
 8010f48:	fba3 1302 	umull	r1, r3, r3, r2
 8010f4c:	095b      	lsrs	r3, r3, #5
 8010f4e:	2164      	movs	r1, #100	; 0x64
 8010f50:	fb01 f303 	mul.w	r3, r1, r3
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	00db      	lsls	r3, r3, #3
 8010f58:	3332      	adds	r3, #50	; 0x32
 8010f5a:	4a86      	ldr	r2, [pc, #536]	; (8011174 <UART_SetConfig+0x384>)
 8010f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f60:	095b      	lsrs	r3, r3, #5
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010f68:	4498      	add	r8, r3
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	461d      	mov	r5, r3
 8010f6e:	f04f 0600 	mov.w	r6, #0
 8010f72:	46a9      	mov	r9, r5
 8010f74:	46b2      	mov	sl, r6
 8010f76:	eb19 0309 	adds.w	r3, r9, r9
 8010f7a:	eb4a 040a 	adc.w	r4, sl, sl
 8010f7e:	4699      	mov	r9, r3
 8010f80:	46a2      	mov	sl, r4
 8010f82:	eb19 0905 	adds.w	r9, r9, r5
 8010f86:	eb4a 0a06 	adc.w	sl, sl, r6
 8010f8a:	f04f 0100 	mov.w	r1, #0
 8010f8e:	f04f 0200 	mov.w	r2, #0
 8010f92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010f96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010f9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010f9e:	4689      	mov	r9, r1
 8010fa0:	4692      	mov	sl, r2
 8010fa2:	eb19 0005 	adds.w	r0, r9, r5
 8010fa6:	eb4a 0106 	adc.w	r1, sl, r6
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	461d      	mov	r5, r3
 8010fb0:	f04f 0600 	mov.w	r6, #0
 8010fb4:	196b      	adds	r3, r5, r5
 8010fb6:	eb46 0406 	adc.w	r4, r6, r6
 8010fba:	461a      	mov	r2, r3
 8010fbc:	4623      	mov	r3, r4
 8010fbe:	f7f7 fd9b 	bl	8008af8 <__aeabi_uldivmod>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b6a      	ldr	r3, [pc, #424]	; (8011174 <UART_SetConfig+0x384>)
 8010fca:	fba3 1302 	umull	r1, r3, r3, r2
 8010fce:	095b      	lsrs	r3, r3, #5
 8010fd0:	2164      	movs	r1, #100	; 0x64
 8010fd2:	fb01 f303 	mul.w	r3, r1, r3
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	00db      	lsls	r3, r3, #3
 8010fda:	3332      	adds	r3, #50	; 0x32
 8010fdc:	4a65      	ldr	r2, [pc, #404]	; (8011174 <UART_SetConfig+0x384>)
 8010fde:	fba2 2303 	umull	r2, r3, r2, r3
 8010fe2:	095b      	lsrs	r3, r3, #5
 8010fe4:	f003 0207 	and.w	r2, r3, #7
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4442      	add	r2, r8
 8010fee:	609a      	str	r2, [r3, #8]
 8010ff0:	e26f      	b.n	80114d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010ff2:	f7fd ff15 	bl	800ee20 <HAL_RCC_GetPCLK1Freq>
 8010ff6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	461d      	mov	r5, r3
 8010ffc:	f04f 0600 	mov.w	r6, #0
 8011000:	46a8      	mov	r8, r5
 8011002:	46b1      	mov	r9, r6
 8011004:	eb18 0308 	adds.w	r3, r8, r8
 8011008:	eb49 0409 	adc.w	r4, r9, r9
 801100c:	4698      	mov	r8, r3
 801100e:	46a1      	mov	r9, r4
 8011010:	eb18 0805 	adds.w	r8, r8, r5
 8011014:	eb49 0906 	adc.w	r9, r9, r6
 8011018:	f04f 0100 	mov.w	r1, #0
 801101c:	f04f 0200 	mov.w	r2, #0
 8011020:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011024:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011028:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801102c:	4688      	mov	r8, r1
 801102e:	4691      	mov	r9, r2
 8011030:	eb18 0005 	adds.w	r0, r8, r5
 8011034:	eb49 0106 	adc.w	r1, r9, r6
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	461d      	mov	r5, r3
 801103e:	f04f 0600 	mov.w	r6, #0
 8011042:	196b      	adds	r3, r5, r5
 8011044:	eb46 0406 	adc.w	r4, r6, r6
 8011048:	461a      	mov	r2, r3
 801104a:	4623      	mov	r3, r4
 801104c:	f7f7 fd54 	bl	8008af8 <__aeabi_uldivmod>
 8011050:	4603      	mov	r3, r0
 8011052:	460c      	mov	r4, r1
 8011054:	461a      	mov	r2, r3
 8011056:	4b47      	ldr	r3, [pc, #284]	; (8011174 <UART_SetConfig+0x384>)
 8011058:	fba3 2302 	umull	r2, r3, r3, r2
 801105c:	095b      	lsrs	r3, r3, #5
 801105e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	461d      	mov	r5, r3
 8011066:	f04f 0600 	mov.w	r6, #0
 801106a:	46a9      	mov	r9, r5
 801106c:	46b2      	mov	sl, r6
 801106e:	eb19 0309 	adds.w	r3, r9, r9
 8011072:	eb4a 040a 	adc.w	r4, sl, sl
 8011076:	4699      	mov	r9, r3
 8011078:	46a2      	mov	sl, r4
 801107a:	eb19 0905 	adds.w	r9, r9, r5
 801107e:	eb4a 0a06 	adc.w	sl, sl, r6
 8011082:	f04f 0100 	mov.w	r1, #0
 8011086:	f04f 0200 	mov.w	r2, #0
 801108a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801108e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011092:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011096:	4689      	mov	r9, r1
 8011098:	4692      	mov	sl, r2
 801109a:	eb19 0005 	adds.w	r0, r9, r5
 801109e:	eb4a 0106 	adc.w	r1, sl, r6
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	461d      	mov	r5, r3
 80110a8:	f04f 0600 	mov.w	r6, #0
 80110ac:	196b      	adds	r3, r5, r5
 80110ae:	eb46 0406 	adc.w	r4, r6, r6
 80110b2:	461a      	mov	r2, r3
 80110b4:	4623      	mov	r3, r4
 80110b6:	f7f7 fd1f 	bl	8008af8 <__aeabi_uldivmod>
 80110ba:	4603      	mov	r3, r0
 80110bc:	460c      	mov	r4, r1
 80110be:	461a      	mov	r2, r3
 80110c0:	4b2c      	ldr	r3, [pc, #176]	; (8011174 <UART_SetConfig+0x384>)
 80110c2:	fba3 1302 	umull	r1, r3, r3, r2
 80110c6:	095b      	lsrs	r3, r3, #5
 80110c8:	2164      	movs	r1, #100	; 0x64
 80110ca:	fb01 f303 	mul.w	r3, r1, r3
 80110ce:	1ad3      	subs	r3, r2, r3
 80110d0:	00db      	lsls	r3, r3, #3
 80110d2:	3332      	adds	r3, #50	; 0x32
 80110d4:	4a27      	ldr	r2, [pc, #156]	; (8011174 <UART_SetConfig+0x384>)
 80110d6:	fba2 2303 	umull	r2, r3, r2, r3
 80110da:	095b      	lsrs	r3, r3, #5
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80110e2:	4498      	add	r8, r3
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	461d      	mov	r5, r3
 80110e8:	f04f 0600 	mov.w	r6, #0
 80110ec:	46a9      	mov	r9, r5
 80110ee:	46b2      	mov	sl, r6
 80110f0:	eb19 0309 	adds.w	r3, r9, r9
 80110f4:	eb4a 040a 	adc.w	r4, sl, sl
 80110f8:	4699      	mov	r9, r3
 80110fa:	46a2      	mov	sl, r4
 80110fc:	eb19 0905 	adds.w	r9, r9, r5
 8011100:	eb4a 0a06 	adc.w	sl, sl, r6
 8011104:	f04f 0100 	mov.w	r1, #0
 8011108:	f04f 0200 	mov.w	r2, #0
 801110c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011110:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011114:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011118:	4689      	mov	r9, r1
 801111a:	4692      	mov	sl, r2
 801111c:	eb19 0005 	adds.w	r0, r9, r5
 8011120:	eb4a 0106 	adc.w	r1, sl, r6
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	461d      	mov	r5, r3
 801112a:	f04f 0600 	mov.w	r6, #0
 801112e:	196b      	adds	r3, r5, r5
 8011130:	eb46 0406 	adc.w	r4, r6, r6
 8011134:	461a      	mov	r2, r3
 8011136:	4623      	mov	r3, r4
 8011138:	f7f7 fcde 	bl	8008af8 <__aeabi_uldivmod>
 801113c:	4603      	mov	r3, r0
 801113e:	460c      	mov	r4, r1
 8011140:	461a      	mov	r2, r3
 8011142:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <UART_SetConfig+0x384>)
 8011144:	fba3 1302 	umull	r1, r3, r3, r2
 8011148:	095b      	lsrs	r3, r3, #5
 801114a:	2164      	movs	r1, #100	; 0x64
 801114c:	fb01 f303 	mul.w	r3, r1, r3
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	00db      	lsls	r3, r3, #3
 8011154:	3332      	adds	r3, #50	; 0x32
 8011156:	4a07      	ldr	r2, [pc, #28]	; (8011174 <UART_SetConfig+0x384>)
 8011158:	fba2 2303 	umull	r2, r3, r2, r3
 801115c:	095b      	lsrs	r3, r3, #5
 801115e:	f003 0207 	and.w	r2, r3, #7
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4442      	add	r2, r8
 8011168:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801116a:	e1b2      	b.n	80114d2 <UART_SetConfig+0x6e2>
 801116c:	40011000 	.word	0x40011000
 8011170:	40011400 	.word	0x40011400
 8011174:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4ad7      	ldr	r2, [pc, #860]	; (80114dc <UART_SetConfig+0x6ec>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d005      	beq.n	801118e <UART_SetConfig+0x39e>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4ad6      	ldr	r2, [pc, #856]	; (80114e0 <UART_SetConfig+0x6f0>)
 8011188:	4293      	cmp	r3, r2
 801118a:	f040 80d1 	bne.w	8011330 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801118e:	f7fd fe5b 	bl	800ee48 <HAL_RCC_GetPCLK2Freq>
 8011192:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	469a      	mov	sl, r3
 8011198:	f04f 0b00 	mov.w	fp, #0
 801119c:	46d0      	mov	r8, sl
 801119e:	46d9      	mov	r9, fp
 80111a0:	eb18 0308 	adds.w	r3, r8, r8
 80111a4:	eb49 0409 	adc.w	r4, r9, r9
 80111a8:	4698      	mov	r8, r3
 80111aa:	46a1      	mov	r9, r4
 80111ac:	eb18 080a 	adds.w	r8, r8, sl
 80111b0:	eb49 090b 	adc.w	r9, r9, fp
 80111b4:	f04f 0100 	mov.w	r1, #0
 80111b8:	f04f 0200 	mov.w	r2, #0
 80111bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80111c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80111c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80111c8:	4688      	mov	r8, r1
 80111ca:	4691      	mov	r9, r2
 80111cc:	eb1a 0508 	adds.w	r5, sl, r8
 80111d0:	eb4b 0609 	adc.w	r6, fp, r9
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	4619      	mov	r1, r3
 80111da:	f04f 0200 	mov.w	r2, #0
 80111de:	f04f 0300 	mov.w	r3, #0
 80111e2:	f04f 0400 	mov.w	r4, #0
 80111e6:	0094      	lsls	r4, r2, #2
 80111e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80111ec:	008b      	lsls	r3, r1, #2
 80111ee:	461a      	mov	r2, r3
 80111f0:	4623      	mov	r3, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	4631      	mov	r1, r6
 80111f6:	f7f7 fc7f 	bl	8008af8 <__aeabi_uldivmod>
 80111fa:	4603      	mov	r3, r0
 80111fc:	460c      	mov	r4, r1
 80111fe:	461a      	mov	r2, r3
 8011200:	4bb8      	ldr	r3, [pc, #736]	; (80114e4 <UART_SetConfig+0x6f4>)
 8011202:	fba3 2302 	umull	r2, r3, r3, r2
 8011206:	095b      	lsrs	r3, r3, #5
 8011208:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	469b      	mov	fp, r3
 8011210:	f04f 0c00 	mov.w	ip, #0
 8011214:	46d9      	mov	r9, fp
 8011216:	46e2      	mov	sl, ip
 8011218:	eb19 0309 	adds.w	r3, r9, r9
 801121c:	eb4a 040a 	adc.w	r4, sl, sl
 8011220:	4699      	mov	r9, r3
 8011222:	46a2      	mov	sl, r4
 8011224:	eb19 090b 	adds.w	r9, r9, fp
 8011228:	eb4a 0a0c 	adc.w	sl, sl, ip
 801122c:	f04f 0100 	mov.w	r1, #0
 8011230:	f04f 0200 	mov.w	r2, #0
 8011234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011238:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801123c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011240:	4689      	mov	r9, r1
 8011242:	4692      	mov	sl, r2
 8011244:	eb1b 0509 	adds.w	r5, fp, r9
 8011248:	eb4c 060a 	adc.w	r6, ip, sl
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	4619      	mov	r1, r3
 8011252:	f04f 0200 	mov.w	r2, #0
 8011256:	f04f 0300 	mov.w	r3, #0
 801125a:	f04f 0400 	mov.w	r4, #0
 801125e:	0094      	lsls	r4, r2, #2
 8011260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011264:	008b      	lsls	r3, r1, #2
 8011266:	461a      	mov	r2, r3
 8011268:	4623      	mov	r3, r4
 801126a:	4628      	mov	r0, r5
 801126c:	4631      	mov	r1, r6
 801126e:	f7f7 fc43 	bl	8008af8 <__aeabi_uldivmod>
 8011272:	4603      	mov	r3, r0
 8011274:	460c      	mov	r4, r1
 8011276:	461a      	mov	r2, r3
 8011278:	4b9a      	ldr	r3, [pc, #616]	; (80114e4 <UART_SetConfig+0x6f4>)
 801127a:	fba3 1302 	umull	r1, r3, r3, r2
 801127e:	095b      	lsrs	r3, r3, #5
 8011280:	2164      	movs	r1, #100	; 0x64
 8011282:	fb01 f303 	mul.w	r3, r1, r3
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	011b      	lsls	r3, r3, #4
 801128a:	3332      	adds	r3, #50	; 0x32
 801128c:	4a95      	ldr	r2, [pc, #596]	; (80114e4 <UART_SetConfig+0x6f4>)
 801128e:	fba2 2303 	umull	r2, r3, r2, r3
 8011292:	095b      	lsrs	r3, r3, #5
 8011294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011298:	4498      	add	r8, r3
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	469b      	mov	fp, r3
 801129e:	f04f 0c00 	mov.w	ip, #0
 80112a2:	46d9      	mov	r9, fp
 80112a4:	46e2      	mov	sl, ip
 80112a6:	eb19 0309 	adds.w	r3, r9, r9
 80112aa:	eb4a 040a 	adc.w	r4, sl, sl
 80112ae:	4699      	mov	r9, r3
 80112b0:	46a2      	mov	sl, r4
 80112b2:	eb19 090b 	adds.w	r9, r9, fp
 80112b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80112ba:	f04f 0100 	mov.w	r1, #0
 80112be:	f04f 0200 	mov.w	r2, #0
 80112c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80112c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80112ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80112ce:	4689      	mov	r9, r1
 80112d0:	4692      	mov	sl, r2
 80112d2:	eb1b 0509 	adds.w	r5, fp, r9
 80112d6:	eb4c 060a 	adc.w	r6, ip, sl
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	4619      	mov	r1, r3
 80112e0:	f04f 0200 	mov.w	r2, #0
 80112e4:	f04f 0300 	mov.w	r3, #0
 80112e8:	f04f 0400 	mov.w	r4, #0
 80112ec:	0094      	lsls	r4, r2, #2
 80112ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80112f2:	008b      	lsls	r3, r1, #2
 80112f4:	461a      	mov	r2, r3
 80112f6:	4623      	mov	r3, r4
 80112f8:	4628      	mov	r0, r5
 80112fa:	4631      	mov	r1, r6
 80112fc:	f7f7 fbfc 	bl	8008af8 <__aeabi_uldivmod>
 8011300:	4603      	mov	r3, r0
 8011302:	460c      	mov	r4, r1
 8011304:	461a      	mov	r2, r3
 8011306:	4b77      	ldr	r3, [pc, #476]	; (80114e4 <UART_SetConfig+0x6f4>)
 8011308:	fba3 1302 	umull	r1, r3, r3, r2
 801130c:	095b      	lsrs	r3, r3, #5
 801130e:	2164      	movs	r1, #100	; 0x64
 8011310:	fb01 f303 	mul.w	r3, r1, r3
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	011b      	lsls	r3, r3, #4
 8011318:	3332      	adds	r3, #50	; 0x32
 801131a:	4a72      	ldr	r2, [pc, #456]	; (80114e4 <UART_SetConfig+0x6f4>)
 801131c:	fba2 2303 	umull	r2, r3, r2, r3
 8011320:	095b      	lsrs	r3, r3, #5
 8011322:	f003 020f 	and.w	r2, r3, #15
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4442      	add	r2, r8
 801132c:	609a      	str	r2, [r3, #8]
 801132e:	e0d0      	b.n	80114d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011330:	f7fd fd76 	bl	800ee20 <HAL_RCC_GetPCLK1Freq>
 8011334:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	469a      	mov	sl, r3
 801133a:	f04f 0b00 	mov.w	fp, #0
 801133e:	46d0      	mov	r8, sl
 8011340:	46d9      	mov	r9, fp
 8011342:	eb18 0308 	adds.w	r3, r8, r8
 8011346:	eb49 0409 	adc.w	r4, r9, r9
 801134a:	4698      	mov	r8, r3
 801134c:	46a1      	mov	r9, r4
 801134e:	eb18 080a 	adds.w	r8, r8, sl
 8011352:	eb49 090b 	adc.w	r9, r9, fp
 8011356:	f04f 0100 	mov.w	r1, #0
 801135a:	f04f 0200 	mov.w	r2, #0
 801135e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011362:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011366:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801136a:	4688      	mov	r8, r1
 801136c:	4691      	mov	r9, r2
 801136e:	eb1a 0508 	adds.w	r5, sl, r8
 8011372:	eb4b 0609 	adc.w	r6, fp, r9
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	4619      	mov	r1, r3
 801137c:	f04f 0200 	mov.w	r2, #0
 8011380:	f04f 0300 	mov.w	r3, #0
 8011384:	f04f 0400 	mov.w	r4, #0
 8011388:	0094      	lsls	r4, r2, #2
 801138a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801138e:	008b      	lsls	r3, r1, #2
 8011390:	461a      	mov	r2, r3
 8011392:	4623      	mov	r3, r4
 8011394:	4628      	mov	r0, r5
 8011396:	4631      	mov	r1, r6
 8011398:	f7f7 fbae 	bl	8008af8 <__aeabi_uldivmod>
 801139c:	4603      	mov	r3, r0
 801139e:	460c      	mov	r4, r1
 80113a0:	461a      	mov	r2, r3
 80113a2:	4b50      	ldr	r3, [pc, #320]	; (80114e4 <UART_SetConfig+0x6f4>)
 80113a4:	fba3 2302 	umull	r2, r3, r3, r2
 80113a8:	095b      	lsrs	r3, r3, #5
 80113aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	469b      	mov	fp, r3
 80113b2:	f04f 0c00 	mov.w	ip, #0
 80113b6:	46d9      	mov	r9, fp
 80113b8:	46e2      	mov	sl, ip
 80113ba:	eb19 0309 	adds.w	r3, r9, r9
 80113be:	eb4a 040a 	adc.w	r4, sl, sl
 80113c2:	4699      	mov	r9, r3
 80113c4:	46a2      	mov	sl, r4
 80113c6:	eb19 090b 	adds.w	r9, r9, fp
 80113ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80113ce:	f04f 0100 	mov.w	r1, #0
 80113d2:	f04f 0200 	mov.w	r2, #0
 80113d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80113da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80113de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80113e2:	4689      	mov	r9, r1
 80113e4:	4692      	mov	sl, r2
 80113e6:	eb1b 0509 	adds.w	r5, fp, r9
 80113ea:	eb4c 060a 	adc.w	r6, ip, sl
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	4619      	mov	r1, r3
 80113f4:	f04f 0200 	mov.w	r2, #0
 80113f8:	f04f 0300 	mov.w	r3, #0
 80113fc:	f04f 0400 	mov.w	r4, #0
 8011400:	0094      	lsls	r4, r2, #2
 8011402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011406:	008b      	lsls	r3, r1, #2
 8011408:	461a      	mov	r2, r3
 801140a:	4623      	mov	r3, r4
 801140c:	4628      	mov	r0, r5
 801140e:	4631      	mov	r1, r6
 8011410:	f7f7 fb72 	bl	8008af8 <__aeabi_uldivmod>
 8011414:	4603      	mov	r3, r0
 8011416:	460c      	mov	r4, r1
 8011418:	461a      	mov	r2, r3
 801141a:	4b32      	ldr	r3, [pc, #200]	; (80114e4 <UART_SetConfig+0x6f4>)
 801141c:	fba3 1302 	umull	r1, r3, r3, r2
 8011420:	095b      	lsrs	r3, r3, #5
 8011422:	2164      	movs	r1, #100	; 0x64
 8011424:	fb01 f303 	mul.w	r3, r1, r3
 8011428:	1ad3      	subs	r3, r2, r3
 801142a:	011b      	lsls	r3, r3, #4
 801142c:	3332      	adds	r3, #50	; 0x32
 801142e:	4a2d      	ldr	r2, [pc, #180]	; (80114e4 <UART_SetConfig+0x6f4>)
 8011430:	fba2 2303 	umull	r2, r3, r2, r3
 8011434:	095b      	lsrs	r3, r3, #5
 8011436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801143a:	4498      	add	r8, r3
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	469b      	mov	fp, r3
 8011440:	f04f 0c00 	mov.w	ip, #0
 8011444:	46d9      	mov	r9, fp
 8011446:	46e2      	mov	sl, ip
 8011448:	eb19 0309 	adds.w	r3, r9, r9
 801144c:	eb4a 040a 	adc.w	r4, sl, sl
 8011450:	4699      	mov	r9, r3
 8011452:	46a2      	mov	sl, r4
 8011454:	eb19 090b 	adds.w	r9, r9, fp
 8011458:	eb4a 0a0c 	adc.w	sl, sl, ip
 801145c:	f04f 0100 	mov.w	r1, #0
 8011460:	f04f 0200 	mov.w	r2, #0
 8011464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011468:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801146c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011470:	4689      	mov	r9, r1
 8011472:	4692      	mov	sl, r2
 8011474:	eb1b 0509 	adds.w	r5, fp, r9
 8011478:	eb4c 060a 	adc.w	r6, ip, sl
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	4619      	mov	r1, r3
 8011482:	f04f 0200 	mov.w	r2, #0
 8011486:	f04f 0300 	mov.w	r3, #0
 801148a:	f04f 0400 	mov.w	r4, #0
 801148e:	0094      	lsls	r4, r2, #2
 8011490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011494:	008b      	lsls	r3, r1, #2
 8011496:	461a      	mov	r2, r3
 8011498:	4623      	mov	r3, r4
 801149a:	4628      	mov	r0, r5
 801149c:	4631      	mov	r1, r6
 801149e:	f7f7 fb2b 	bl	8008af8 <__aeabi_uldivmod>
 80114a2:	4603      	mov	r3, r0
 80114a4:	460c      	mov	r4, r1
 80114a6:	461a      	mov	r2, r3
 80114a8:	4b0e      	ldr	r3, [pc, #56]	; (80114e4 <UART_SetConfig+0x6f4>)
 80114aa:	fba3 1302 	umull	r1, r3, r3, r2
 80114ae:	095b      	lsrs	r3, r3, #5
 80114b0:	2164      	movs	r1, #100	; 0x64
 80114b2:	fb01 f303 	mul.w	r3, r1, r3
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	011b      	lsls	r3, r3, #4
 80114ba:	3332      	adds	r3, #50	; 0x32
 80114bc:	4a09      	ldr	r2, [pc, #36]	; (80114e4 <UART_SetConfig+0x6f4>)
 80114be:	fba2 2303 	umull	r2, r3, r2, r3
 80114c2:	095b      	lsrs	r3, r3, #5
 80114c4:	f003 020f 	and.w	r2, r3, #15
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	4442      	add	r2, r8
 80114ce:	609a      	str	r2, [r3, #8]
}
 80114d0:	e7ff      	b.n	80114d2 <UART_SetConfig+0x6e2>
 80114d2:	bf00      	nop
 80114d4:	3714      	adds	r7, #20
 80114d6:	46bd      	mov	sp, r7
 80114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114dc:	40011000 	.word	0x40011000
 80114e0:	40011400 	.word	0x40011400
 80114e4:	51eb851f 	.word	0x51eb851f

080114e8 <__errno>:
 80114e8:	4b01      	ldr	r3, [pc, #4]	; (80114f0 <__errno+0x8>)
 80114ea:	6818      	ldr	r0, [r3, #0]
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop
 80114f0:	20000018 	.word	0x20000018

080114f4 <__libc_init_array>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	4e0d      	ldr	r6, [pc, #52]	; (801152c <__libc_init_array+0x38>)
 80114f8:	4c0d      	ldr	r4, [pc, #52]	; (8011530 <__libc_init_array+0x3c>)
 80114fa:	1ba4      	subs	r4, r4, r6
 80114fc:	10a4      	asrs	r4, r4, #2
 80114fe:	2500      	movs	r5, #0
 8011500:	42a5      	cmp	r5, r4
 8011502:	d109      	bne.n	8011518 <__libc_init_array+0x24>
 8011504:	4e0b      	ldr	r6, [pc, #44]	; (8011534 <__libc_init_array+0x40>)
 8011506:	4c0c      	ldr	r4, [pc, #48]	; (8011538 <__libc_init_array+0x44>)
 8011508:	f004 fa80 	bl	8015a0c <_init>
 801150c:	1ba4      	subs	r4, r4, r6
 801150e:	10a4      	asrs	r4, r4, #2
 8011510:	2500      	movs	r5, #0
 8011512:	42a5      	cmp	r5, r4
 8011514:	d105      	bne.n	8011522 <__libc_init_array+0x2e>
 8011516:	bd70      	pop	{r4, r5, r6, pc}
 8011518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801151c:	4798      	blx	r3
 801151e:	3501      	adds	r5, #1
 8011520:	e7ee      	b.n	8011500 <__libc_init_array+0xc>
 8011522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011526:	4798      	blx	r3
 8011528:	3501      	adds	r5, #1
 801152a:	e7f2      	b.n	8011512 <__libc_init_array+0x1e>
 801152c:	08015eb0 	.word	0x08015eb0
 8011530:	08015eb0 	.word	0x08015eb0
 8011534:	08015eb0 	.word	0x08015eb0
 8011538:	08015eb4 	.word	0x08015eb4

0801153c <memcpy>:
 801153c:	b510      	push	{r4, lr}
 801153e:	1e43      	subs	r3, r0, #1
 8011540:	440a      	add	r2, r1
 8011542:	4291      	cmp	r1, r2
 8011544:	d100      	bne.n	8011548 <memcpy+0xc>
 8011546:	bd10      	pop	{r4, pc}
 8011548:	f811 4b01 	ldrb.w	r4, [r1], #1
 801154c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011550:	e7f7      	b.n	8011542 <memcpy+0x6>

08011552 <memset>:
 8011552:	4402      	add	r2, r0
 8011554:	4603      	mov	r3, r0
 8011556:	4293      	cmp	r3, r2
 8011558:	d100      	bne.n	801155c <memset+0xa>
 801155a:	4770      	bx	lr
 801155c:	f803 1b01 	strb.w	r1, [r3], #1
 8011560:	e7f9      	b.n	8011556 <memset+0x4>

08011562 <__cvt>:
 8011562:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011566:	ec55 4b10 	vmov	r4, r5, d0
 801156a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801156c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011570:	2d00      	cmp	r5, #0
 8011572:	460e      	mov	r6, r1
 8011574:	4691      	mov	r9, r2
 8011576:	4619      	mov	r1, r3
 8011578:	bfb8      	it	lt
 801157a:	4622      	movlt	r2, r4
 801157c:	462b      	mov	r3, r5
 801157e:	f027 0720 	bic.w	r7, r7, #32
 8011582:	bfbb      	ittet	lt
 8011584:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011588:	461d      	movlt	r5, r3
 801158a:	2300      	movge	r3, #0
 801158c:	232d      	movlt	r3, #45	; 0x2d
 801158e:	bfb8      	it	lt
 8011590:	4614      	movlt	r4, r2
 8011592:	2f46      	cmp	r7, #70	; 0x46
 8011594:	700b      	strb	r3, [r1, #0]
 8011596:	d004      	beq.n	80115a2 <__cvt+0x40>
 8011598:	2f45      	cmp	r7, #69	; 0x45
 801159a:	d100      	bne.n	801159e <__cvt+0x3c>
 801159c:	3601      	adds	r6, #1
 801159e:	2102      	movs	r1, #2
 80115a0:	e000      	b.n	80115a4 <__cvt+0x42>
 80115a2:	2103      	movs	r1, #3
 80115a4:	ab03      	add	r3, sp, #12
 80115a6:	9301      	str	r3, [sp, #4]
 80115a8:	ab02      	add	r3, sp, #8
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	4632      	mov	r2, r6
 80115ae:	4653      	mov	r3, sl
 80115b0:	ec45 4b10 	vmov	d0, r4, r5
 80115b4:	f001 fed4 	bl	8013360 <_dtoa_r>
 80115b8:	2f47      	cmp	r7, #71	; 0x47
 80115ba:	4680      	mov	r8, r0
 80115bc:	d102      	bne.n	80115c4 <__cvt+0x62>
 80115be:	f019 0f01 	tst.w	r9, #1
 80115c2:	d026      	beq.n	8011612 <__cvt+0xb0>
 80115c4:	2f46      	cmp	r7, #70	; 0x46
 80115c6:	eb08 0906 	add.w	r9, r8, r6
 80115ca:	d111      	bne.n	80115f0 <__cvt+0x8e>
 80115cc:	f898 3000 	ldrb.w	r3, [r8]
 80115d0:	2b30      	cmp	r3, #48	; 0x30
 80115d2:	d10a      	bne.n	80115ea <__cvt+0x88>
 80115d4:	2200      	movs	r2, #0
 80115d6:	2300      	movs	r3, #0
 80115d8:	4620      	mov	r0, r4
 80115da:	4629      	mov	r1, r5
 80115dc:	f7f7 f9ac 	bl	8008938 <__aeabi_dcmpeq>
 80115e0:	b918      	cbnz	r0, 80115ea <__cvt+0x88>
 80115e2:	f1c6 0601 	rsb	r6, r6, #1
 80115e6:	f8ca 6000 	str.w	r6, [sl]
 80115ea:	f8da 3000 	ldr.w	r3, [sl]
 80115ee:	4499      	add	r9, r3
 80115f0:	2200      	movs	r2, #0
 80115f2:	2300      	movs	r3, #0
 80115f4:	4620      	mov	r0, r4
 80115f6:	4629      	mov	r1, r5
 80115f8:	f7f7 f99e 	bl	8008938 <__aeabi_dcmpeq>
 80115fc:	b938      	cbnz	r0, 801160e <__cvt+0xac>
 80115fe:	2230      	movs	r2, #48	; 0x30
 8011600:	9b03      	ldr	r3, [sp, #12]
 8011602:	454b      	cmp	r3, r9
 8011604:	d205      	bcs.n	8011612 <__cvt+0xb0>
 8011606:	1c59      	adds	r1, r3, #1
 8011608:	9103      	str	r1, [sp, #12]
 801160a:	701a      	strb	r2, [r3, #0]
 801160c:	e7f8      	b.n	8011600 <__cvt+0x9e>
 801160e:	f8cd 900c 	str.w	r9, [sp, #12]
 8011612:	9b03      	ldr	r3, [sp, #12]
 8011614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011616:	eba3 0308 	sub.w	r3, r3, r8
 801161a:	4640      	mov	r0, r8
 801161c:	6013      	str	r3, [r2, #0]
 801161e:	b004      	add	sp, #16
 8011620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011624 <__exponent>:
 8011624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011626:	2900      	cmp	r1, #0
 8011628:	4604      	mov	r4, r0
 801162a:	bfba      	itte	lt
 801162c:	4249      	neglt	r1, r1
 801162e:	232d      	movlt	r3, #45	; 0x2d
 8011630:	232b      	movge	r3, #43	; 0x2b
 8011632:	2909      	cmp	r1, #9
 8011634:	f804 2b02 	strb.w	r2, [r4], #2
 8011638:	7043      	strb	r3, [r0, #1]
 801163a:	dd20      	ble.n	801167e <__exponent+0x5a>
 801163c:	f10d 0307 	add.w	r3, sp, #7
 8011640:	461f      	mov	r7, r3
 8011642:	260a      	movs	r6, #10
 8011644:	fb91 f5f6 	sdiv	r5, r1, r6
 8011648:	fb06 1115 	mls	r1, r6, r5, r1
 801164c:	3130      	adds	r1, #48	; 0x30
 801164e:	2d09      	cmp	r5, #9
 8011650:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011654:	f103 32ff 	add.w	r2, r3, #4294967295
 8011658:	4629      	mov	r1, r5
 801165a:	dc09      	bgt.n	8011670 <__exponent+0x4c>
 801165c:	3130      	adds	r1, #48	; 0x30
 801165e:	3b02      	subs	r3, #2
 8011660:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011664:	42bb      	cmp	r3, r7
 8011666:	4622      	mov	r2, r4
 8011668:	d304      	bcc.n	8011674 <__exponent+0x50>
 801166a:	1a10      	subs	r0, r2, r0
 801166c:	b003      	add	sp, #12
 801166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011670:	4613      	mov	r3, r2
 8011672:	e7e7      	b.n	8011644 <__exponent+0x20>
 8011674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011678:	f804 2b01 	strb.w	r2, [r4], #1
 801167c:	e7f2      	b.n	8011664 <__exponent+0x40>
 801167e:	2330      	movs	r3, #48	; 0x30
 8011680:	4419      	add	r1, r3
 8011682:	7083      	strb	r3, [r0, #2]
 8011684:	1d02      	adds	r2, r0, #4
 8011686:	70c1      	strb	r1, [r0, #3]
 8011688:	e7ef      	b.n	801166a <__exponent+0x46>
	...

0801168c <_printf_float>:
 801168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011690:	b08d      	sub	sp, #52	; 0x34
 8011692:	460c      	mov	r4, r1
 8011694:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011698:	4616      	mov	r6, r2
 801169a:	461f      	mov	r7, r3
 801169c:	4605      	mov	r5, r0
 801169e:	f003 f8bd 	bl	801481c <_localeconv_r>
 80116a2:	6803      	ldr	r3, [r0, #0]
 80116a4:	9304      	str	r3, [sp, #16]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7f6 fcca 	bl	8008040 <strlen>
 80116ac:	2300      	movs	r3, #0
 80116ae:	930a      	str	r3, [sp, #40]	; 0x28
 80116b0:	f8d8 3000 	ldr.w	r3, [r8]
 80116b4:	9005      	str	r0, [sp, #20]
 80116b6:	3307      	adds	r3, #7
 80116b8:	f023 0307 	bic.w	r3, r3, #7
 80116bc:	f103 0208 	add.w	r2, r3, #8
 80116c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80116c4:	f8d4 b000 	ldr.w	fp, [r4]
 80116c8:	f8c8 2000 	str.w	r2, [r8]
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80116d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80116d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80116dc:	9307      	str	r3, [sp, #28]
 80116de:	f8cd 8018 	str.w	r8, [sp, #24]
 80116e2:	f04f 32ff 	mov.w	r2, #4294967295
 80116e6:	4ba7      	ldr	r3, [pc, #668]	; (8011984 <_printf_float+0x2f8>)
 80116e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116ec:	f7f7 f956 	bl	800899c <__aeabi_dcmpun>
 80116f0:	bb70      	cbnz	r0, 8011750 <_printf_float+0xc4>
 80116f2:	f04f 32ff 	mov.w	r2, #4294967295
 80116f6:	4ba3      	ldr	r3, [pc, #652]	; (8011984 <_printf_float+0x2f8>)
 80116f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116fc:	f7f7 f930 	bl	8008960 <__aeabi_dcmple>
 8011700:	bb30      	cbnz	r0, 8011750 <_printf_float+0xc4>
 8011702:	2200      	movs	r2, #0
 8011704:	2300      	movs	r3, #0
 8011706:	4640      	mov	r0, r8
 8011708:	4649      	mov	r1, r9
 801170a:	f7f7 f91f 	bl	800894c <__aeabi_dcmplt>
 801170e:	b110      	cbz	r0, 8011716 <_printf_float+0x8a>
 8011710:	232d      	movs	r3, #45	; 0x2d
 8011712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011716:	4a9c      	ldr	r2, [pc, #624]	; (8011988 <_printf_float+0x2fc>)
 8011718:	4b9c      	ldr	r3, [pc, #624]	; (801198c <_printf_float+0x300>)
 801171a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801171e:	bf8c      	ite	hi
 8011720:	4690      	movhi	r8, r2
 8011722:	4698      	movls	r8, r3
 8011724:	2303      	movs	r3, #3
 8011726:	f02b 0204 	bic.w	r2, fp, #4
 801172a:	6123      	str	r3, [r4, #16]
 801172c:	6022      	str	r2, [r4, #0]
 801172e:	f04f 0900 	mov.w	r9, #0
 8011732:	9700      	str	r7, [sp, #0]
 8011734:	4633      	mov	r3, r6
 8011736:	aa0b      	add	r2, sp, #44	; 0x2c
 8011738:	4621      	mov	r1, r4
 801173a:	4628      	mov	r0, r5
 801173c:	f000 f9e6 	bl	8011b0c <_printf_common>
 8011740:	3001      	adds	r0, #1
 8011742:	f040 808d 	bne.w	8011860 <_printf_float+0x1d4>
 8011746:	f04f 30ff 	mov.w	r0, #4294967295
 801174a:	b00d      	add	sp, #52	; 0x34
 801174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	4642      	mov	r2, r8
 8011752:	464b      	mov	r3, r9
 8011754:	4640      	mov	r0, r8
 8011756:	4649      	mov	r1, r9
 8011758:	f7f7 f920 	bl	800899c <__aeabi_dcmpun>
 801175c:	b110      	cbz	r0, 8011764 <_printf_float+0xd8>
 801175e:	4a8c      	ldr	r2, [pc, #560]	; (8011990 <_printf_float+0x304>)
 8011760:	4b8c      	ldr	r3, [pc, #560]	; (8011994 <_printf_float+0x308>)
 8011762:	e7da      	b.n	801171a <_printf_float+0x8e>
 8011764:	6861      	ldr	r1, [r4, #4]
 8011766:	1c4b      	adds	r3, r1, #1
 8011768:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801176c:	a80a      	add	r0, sp, #40	; 0x28
 801176e:	d13e      	bne.n	80117ee <_printf_float+0x162>
 8011770:	2306      	movs	r3, #6
 8011772:	6063      	str	r3, [r4, #4]
 8011774:	2300      	movs	r3, #0
 8011776:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801177a:	ab09      	add	r3, sp, #36	; 0x24
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	ec49 8b10 	vmov	d0, r8, r9
 8011782:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011786:	6022      	str	r2, [r4, #0]
 8011788:	f8cd a004 	str.w	sl, [sp, #4]
 801178c:	6861      	ldr	r1, [r4, #4]
 801178e:	4628      	mov	r0, r5
 8011790:	f7ff fee7 	bl	8011562 <__cvt>
 8011794:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011798:	2b47      	cmp	r3, #71	; 0x47
 801179a:	4680      	mov	r8, r0
 801179c:	d109      	bne.n	80117b2 <_printf_float+0x126>
 801179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117a0:	1cd8      	adds	r0, r3, #3
 80117a2:	db02      	blt.n	80117aa <_printf_float+0x11e>
 80117a4:	6862      	ldr	r2, [r4, #4]
 80117a6:	4293      	cmp	r3, r2
 80117a8:	dd47      	ble.n	801183a <_printf_float+0x1ae>
 80117aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80117ae:	fa5f fa8a 	uxtb.w	sl, sl
 80117b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80117b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80117b8:	d824      	bhi.n	8011804 <_printf_float+0x178>
 80117ba:	3901      	subs	r1, #1
 80117bc:	4652      	mov	r2, sl
 80117be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80117c2:	9109      	str	r1, [sp, #36]	; 0x24
 80117c4:	f7ff ff2e 	bl	8011624 <__exponent>
 80117c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117ca:	1813      	adds	r3, r2, r0
 80117cc:	2a01      	cmp	r2, #1
 80117ce:	4681      	mov	r9, r0
 80117d0:	6123      	str	r3, [r4, #16]
 80117d2:	dc02      	bgt.n	80117da <_printf_float+0x14e>
 80117d4:	6822      	ldr	r2, [r4, #0]
 80117d6:	07d1      	lsls	r1, r2, #31
 80117d8:	d501      	bpl.n	80117de <_printf_float+0x152>
 80117da:	3301      	adds	r3, #1
 80117dc:	6123      	str	r3, [r4, #16]
 80117de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d0a5      	beq.n	8011732 <_printf_float+0xa6>
 80117e6:	232d      	movs	r3, #45	; 0x2d
 80117e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117ec:	e7a1      	b.n	8011732 <_printf_float+0xa6>
 80117ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80117f2:	f000 8177 	beq.w	8011ae4 <_printf_float+0x458>
 80117f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80117fa:	d1bb      	bne.n	8011774 <_printf_float+0xe8>
 80117fc:	2900      	cmp	r1, #0
 80117fe:	d1b9      	bne.n	8011774 <_printf_float+0xe8>
 8011800:	2301      	movs	r3, #1
 8011802:	e7b6      	b.n	8011772 <_printf_float+0xe6>
 8011804:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011808:	d119      	bne.n	801183e <_printf_float+0x1b2>
 801180a:	2900      	cmp	r1, #0
 801180c:	6863      	ldr	r3, [r4, #4]
 801180e:	dd0c      	ble.n	801182a <_printf_float+0x19e>
 8011810:	6121      	str	r1, [r4, #16]
 8011812:	b913      	cbnz	r3, 801181a <_printf_float+0x18e>
 8011814:	6822      	ldr	r2, [r4, #0]
 8011816:	07d2      	lsls	r2, r2, #31
 8011818:	d502      	bpl.n	8011820 <_printf_float+0x194>
 801181a:	3301      	adds	r3, #1
 801181c:	440b      	add	r3, r1
 801181e:	6123      	str	r3, [r4, #16]
 8011820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011822:	65a3      	str	r3, [r4, #88]	; 0x58
 8011824:	f04f 0900 	mov.w	r9, #0
 8011828:	e7d9      	b.n	80117de <_printf_float+0x152>
 801182a:	b913      	cbnz	r3, 8011832 <_printf_float+0x1a6>
 801182c:	6822      	ldr	r2, [r4, #0]
 801182e:	07d0      	lsls	r0, r2, #31
 8011830:	d501      	bpl.n	8011836 <_printf_float+0x1aa>
 8011832:	3302      	adds	r3, #2
 8011834:	e7f3      	b.n	801181e <_printf_float+0x192>
 8011836:	2301      	movs	r3, #1
 8011838:	e7f1      	b.n	801181e <_printf_float+0x192>
 801183a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801183e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011842:	4293      	cmp	r3, r2
 8011844:	db05      	blt.n	8011852 <_printf_float+0x1c6>
 8011846:	6822      	ldr	r2, [r4, #0]
 8011848:	6123      	str	r3, [r4, #16]
 801184a:	07d1      	lsls	r1, r2, #31
 801184c:	d5e8      	bpl.n	8011820 <_printf_float+0x194>
 801184e:	3301      	adds	r3, #1
 8011850:	e7e5      	b.n	801181e <_printf_float+0x192>
 8011852:	2b00      	cmp	r3, #0
 8011854:	bfd4      	ite	le
 8011856:	f1c3 0302 	rsble	r3, r3, #2
 801185a:	2301      	movgt	r3, #1
 801185c:	4413      	add	r3, r2
 801185e:	e7de      	b.n	801181e <_printf_float+0x192>
 8011860:	6823      	ldr	r3, [r4, #0]
 8011862:	055a      	lsls	r2, r3, #21
 8011864:	d407      	bmi.n	8011876 <_printf_float+0x1ea>
 8011866:	6923      	ldr	r3, [r4, #16]
 8011868:	4642      	mov	r2, r8
 801186a:	4631      	mov	r1, r6
 801186c:	4628      	mov	r0, r5
 801186e:	47b8      	blx	r7
 8011870:	3001      	adds	r0, #1
 8011872:	d12b      	bne.n	80118cc <_printf_float+0x240>
 8011874:	e767      	b.n	8011746 <_printf_float+0xba>
 8011876:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801187a:	f240 80dc 	bls.w	8011a36 <_printf_float+0x3aa>
 801187e:	2200      	movs	r2, #0
 8011880:	2300      	movs	r3, #0
 8011882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011886:	f7f7 f857 	bl	8008938 <__aeabi_dcmpeq>
 801188a:	2800      	cmp	r0, #0
 801188c:	d033      	beq.n	80118f6 <_printf_float+0x26a>
 801188e:	2301      	movs	r3, #1
 8011890:	4a41      	ldr	r2, [pc, #260]	; (8011998 <_printf_float+0x30c>)
 8011892:	4631      	mov	r1, r6
 8011894:	4628      	mov	r0, r5
 8011896:	47b8      	blx	r7
 8011898:	3001      	adds	r0, #1
 801189a:	f43f af54 	beq.w	8011746 <_printf_float+0xba>
 801189e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118a2:	429a      	cmp	r2, r3
 80118a4:	db02      	blt.n	80118ac <_printf_float+0x220>
 80118a6:	6823      	ldr	r3, [r4, #0]
 80118a8:	07d8      	lsls	r0, r3, #31
 80118aa:	d50f      	bpl.n	80118cc <_printf_float+0x240>
 80118ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118b0:	4631      	mov	r1, r6
 80118b2:	4628      	mov	r0, r5
 80118b4:	47b8      	blx	r7
 80118b6:	3001      	adds	r0, #1
 80118b8:	f43f af45 	beq.w	8011746 <_printf_float+0xba>
 80118bc:	f04f 0800 	mov.w	r8, #0
 80118c0:	f104 091a 	add.w	r9, r4, #26
 80118c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118c6:	3b01      	subs	r3, #1
 80118c8:	4543      	cmp	r3, r8
 80118ca:	dc09      	bgt.n	80118e0 <_printf_float+0x254>
 80118cc:	6823      	ldr	r3, [r4, #0]
 80118ce:	079b      	lsls	r3, r3, #30
 80118d0:	f100 8103 	bmi.w	8011ada <_printf_float+0x44e>
 80118d4:	68e0      	ldr	r0, [r4, #12]
 80118d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118d8:	4298      	cmp	r0, r3
 80118da:	bfb8      	it	lt
 80118dc:	4618      	movlt	r0, r3
 80118de:	e734      	b.n	801174a <_printf_float+0xbe>
 80118e0:	2301      	movs	r3, #1
 80118e2:	464a      	mov	r2, r9
 80118e4:	4631      	mov	r1, r6
 80118e6:	4628      	mov	r0, r5
 80118e8:	47b8      	blx	r7
 80118ea:	3001      	adds	r0, #1
 80118ec:	f43f af2b 	beq.w	8011746 <_printf_float+0xba>
 80118f0:	f108 0801 	add.w	r8, r8, #1
 80118f4:	e7e6      	b.n	80118c4 <_printf_float+0x238>
 80118f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	dc2b      	bgt.n	8011954 <_printf_float+0x2c8>
 80118fc:	2301      	movs	r3, #1
 80118fe:	4a26      	ldr	r2, [pc, #152]	; (8011998 <_printf_float+0x30c>)
 8011900:	4631      	mov	r1, r6
 8011902:	4628      	mov	r0, r5
 8011904:	47b8      	blx	r7
 8011906:	3001      	adds	r0, #1
 8011908:	f43f af1d 	beq.w	8011746 <_printf_float+0xba>
 801190c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801190e:	b923      	cbnz	r3, 801191a <_printf_float+0x28e>
 8011910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011912:	b913      	cbnz	r3, 801191a <_printf_float+0x28e>
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	07d9      	lsls	r1, r3, #31
 8011918:	d5d8      	bpl.n	80118cc <_printf_float+0x240>
 801191a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801191e:	4631      	mov	r1, r6
 8011920:	4628      	mov	r0, r5
 8011922:	47b8      	blx	r7
 8011924:	3001      	adds	r0, #1
 8011926:	f43f af0e 	beq.w	8011746 <_printf_float+0xba>
 801192a:	f04f 0900 	mov.w	r9, #0
 801192e:	f104 0a1a 	add.w	sl, r4, #26
 8011932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011934:	425b      	negs	r3, r3
 8011936:	454b      	cmp	r3, r9
 8011938:	dc01      	bgt.n	801193e <_printf_float+0x2b2>
 801193a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801193c:	e794      	b.n	8011868 <_printf_float+0x1dc>
 801193e:	2301      	movs	r3, #1
 8011940:	4652      	mov	r2, sl
 8011942:	4631      	mov	r1, r6
 8011944:	4628      	mov	r0, r5
 8011946:	47b8      	blx	r7
 8011948:	3001      	adds	r0, #1
 801194a:	f43f aefc 	beq.w	8011746 <_printf_float+0xba>
 801194e:	f109 0901 	add.w	r9, r9, #1
 8011952:	e7ee      	b.n	8011932 <_printf_float+0x2a6>
 8011954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011958:	429a      	cmp	r2, r3
 801195a:	bfa8      	it	ge
 801195c:	461a      	movge	r2, r3
 801195e:	2a00      	cmp	r2, #0
 8011960:	4691      	mov	r9, r2
 8011962:	dd07      	ble.n	8011974 <_printf_float+0x2e8>
 8011964:	4613      	mov	r3, r2
 8011966:	4631      	mov	r1, r6
 8011968:	4642      	mov	r2, r8
 801196a:	4628      	mov	r0, r5
 801196c:	47b8      	blx	r7
 801196e:	3001      	adds	r0, #1
 8011970:	f43f aee9 	beq.w	8011746 <_printf_float+0xba>
 8011974:	f104 031a 	add.w	r3, r4, #26
 8011978:	f04f 0b00 	mov.w	fp, #0
 801197c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011980:	9306      	str	r3, [sp, #24]
 8011982:	e015      	b.n	80119b0 <_printf_float+0x324>
 8011984:	7fefffff 	.word	0x7fefffff
 8011988:	08015b90 	.word	0x08015b90
 801198c:	08015b8c 	.word	0x08015b8c
 8011990:	08015b98 	.word	0x08015b98
 8011994:	08015b94 	.word	0x08015b94
 8011998:	08015b9c 	.word	0x08015b9c
 801199c:	2301      	movs	r3, #1
 801199e:	9a06      	ldr	r2, [sp, #24]
 80119a0:	4631      	mov	r1, r6
 80119a2:	4628      	mov	r0, r5
 80119a4:	47b8      	blx	r7
 80119a6:	3001      	adds	r0, #1
 80119a8:	f43f aecd 	beq.w	8011746 <_printf_float+0xba>
 80119ac:	f10b 0b01 	add.w	fp, fp, #1
 80119b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80119b4:	ebaa 0309 	sub.w	r3, sl, r9
 80119b8:	455b      	cmp	r3, fp
 80119ba:	dcef      	bgt.n	801199c <_printf_float+0x310>
 80119bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119c0:	429a      	cmp	r2, r3
 80119c2:	44d0      	add	r8, sl
 80119c4:	db15      	blt.n	80119f2 <_printf_float+0x366>
 80119c6:	6823      	ldr	r3, [r4, #0]
 80119c8:	07da      	lsls	r2, r3, #31
 80119ca:	d412      	bmi.n	80119f2 <_printf_float+0x366>
 80119cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119d0:	eba3 020a 	sub.w	r2, r3, sl
 80119d4:	eba3 0a01 	sub.w	sl, r3, r1
 80119d8:	4592      	cmp	sl, r2
 80119da:	bfa8      	it	ge
 80119dc:	4692      	movge	sl, r2
 80119de:	f1ba 0f00 	cmp.w	sl, #0
 80119e2:	dc0e      	bgt.n	8011a02 <_printf_float+0x376>
 80119e4:	f04f 0800 	mov.w	r8, #0
 80119e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119ec:	f104 091a 	add.w	r9, r4, #26
 80119f0:	e019      	b.n	8011a26 <_printf_float+0x39a>
 80119f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119f6:	4631      	mov	r1, r6
 80119f8:	4628      	mov	r0, r5
 80119fa:	47b8      	blx	r7
 80119fc:	3001      	adds	r0, #1
 80119fe:	d1e5      	bne.n	80119cc <_printf_float+0x340>
 8011a00:	e6a1      	b.n	8011746 <_printf_float+0xba>
 8011a02:	4653      	mov	r3, sl
 8011a04:	4642      	mov	r2, r8
 8011a06:	4631      	mov	r1, r6
 8011a08:	4628      	mov	r0, r5
 8011a0a:	47b8      	blx	r7
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	d1e9      	bne.n	80119e4 <_printf_float+0x358>
 8011a10:	e699      	b.n	8011746 <_printf_float+0xba>
 8011a12:	2301      	movs	r3, #1
 8011a14:	464a      	mov	r2, r9
 8011a16:	4631      	mov	r1, r6
 8011a18:	4628      	mov	r0, r5
 8011a1a:	47b8      	blx	r7
 8011a1c:	3001      	adds	r0, #1
 8011a1e:	f43f ae92 	beq.w	8011746 <_printf_float+0xba>
 8011a22:	f108 0801 	add.w	r8, r8, #1
 8011a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a2a:	1a9b      	subs	r3, r3, r2
 8011a2c:	eba3 030a 	sub.w	r3, r3, sl
 8011a30:	4543      	cmp	r3, r8
 8011a32:	dcee      	bgt.n	8011a12 <_printf_float+0x386>
 8011a34:	e74a      	b.n	80118cc <_printf_float+0x240>
 8011a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a38:	2a01      	cmp	r2, #1
 8011a3a:	dc01      	bgt.n	8011a40 <_printf_float+0x3b4>
 8011a3c:	07db      	lsls	r3, r3, #31
 8011a3e:	d53a      	bpl.n	8011ab6 <_printf_float+0x42a>
 8011a40:	2301      	movs	r3, #1
 8011a42:	4642      	mov	r2, r8
 8011a44:	4631      	mov	r1, r6
 8011a46:	4628      	mov	r0, r5
 8011a48:	47b8      	blx	r7
 8011a4a:	3001      	adds	r0, #1
 8011a4c:	f43f ae7b 	beq.w	8011746 <_printf_float+0xba>
 8011a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a54:	4631      	mov	r1, r6
 8011a56:	4628      	mov	r0, r5
 8011a58:	47b8      	blx	r7
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	f108 0801 	add.w	r8, r8, #1
 8011a60:	f43f ae71 	beq.w	8011746 <_printf_float+0xba>
 8011a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a66:	2200      	movs	r2, #0
 8011a68:	f103 3aff 	add.w	sl, r3, #4294967295
 8011a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a70:	2300      	movs	r3, #0
 8011a72:	f7f6 ff61 	bl	8008938 <__aeabi_dcmpeq>
 8011a76:	b9c8      	cbnz	r0, 8011aac <_printf_float+0x420>
 8011a78:	4653      	mov	r3, sl
 8011a7a:	4642      	mov	r2, r8
 8011a7c:	4631      	mov	r1, r6
 8011a7e:	4628      	mov	r0, r5
 8011a80:	47b8      	blx	r7
 8011a82:	3001      	adds	r0, #1
 8011a84:	d10e      	bne.n	8011aa4 <_printf_float+0x418>
 8011a86:	e65e      	b.n	8011746 <_printf_float+0xba>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	4652      	mov	r2, sl
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4628      	mov	r0, r5
 8011a90:	47b8      	blx	r7
 8011a92:	3001      	adds	r0, #1
 8011a94:	f43f ae57 	beq.w	8011746 <_printf_float+0xba>
 8011a98:	f108 0801 	add.w	r8, r8, #1
 8011a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	4543      	cmp	r3, r8
 8011aa2:	dcf1      	bgt.n	8011a88 <_printf_float+0x3fc>
 8011aa4:	464b      	mov	r3, r9
 8011aa6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011aaa:	e6de      	b.n	801186a <_printf_float+0x1de>
 8011aac:	f04f 0800 	mov.w	r8, #0
 8011ab0:	f104 0a1a 	add.w	sl, r4, #26
 8011ab4:	e7f2      	b.n	8011a9c <_printf_float+0x410>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e7df      	b.n	8011a7a <_printf_float+0x3ee>
 8011aba:	2301      	movs	r3, #1
 8011abc:	464a      	mov	r2, r9
 8011abe:	4631      	mov	r1, r6
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	47b8      	blx	r7
 8011ac4:	3001      	adds	r0, #1
 8011ac6:	f43f ae3e 	beq.w	8011746 <_printf_float+0xba>
 8011aca:	f108 0801 	add.w	r8, r8, #1
 8011ace:	68e3      	ldr	r3, [r4, #12]
 8011ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ad2:	1a9b      	subs	r3, r3, r2
 8011ad4:	4543      	cmp	r3, r8
 8011ad6:	dcf0      	bgt.n	8011aba <_printf_float+0x42e>
 8011ad8:	e6fc      	b.n	80118d4 <_printf_float+0x248>
 8011ada:	f04f 0800 	mov.w	r8, #0
 8011ade:	f104 0919 	add.w	r9, r4, #25
 8011ae2:	e7f4      	b.n	8011ace <_printf_float+0x442>
 8011ae4:	2900      	cmp	r1, #0
 8011ae6:	f43f ae8b 	beq.w	8011800 <_printf_float+0x174>
 8011aea:	2300      	movs	r3, #0
 8011aec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011af0:	ab09      	add	r3, sp, #36	; 0x24
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	ec49 8b10 	vmov	d0, r8, r9
 8011af8:	6022      	str	r2, [r4, #0]
 8011afa:	f8cd a004 	str.w	sl, [sp, #4]
 8011afe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b02:	4628      	mov	r0, r5
 8011b04:	f7ff fd2d 	bl	8011562 <__cvt>
 8011b08:	4680      	mov	r8, r0
 8011b0a:	e648      	b.n	801179e <_printf_float+0x112>

08011b0c <_printf_common>:
 8011b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b10:	4691      	mov	r9, r2
 8011b12:	461f      	mov	r7, r3
 8011b14:	688a      	ldr	r2, [r1, #8]
 8011b16:	690b      	ldr	r3, [r1, #16]
 8011b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	bfb8      	it	lt
 8011b20:	4613      	movlt	r3, r2
 8011b22:	f8c9 3000 	str.w	r3, [r9]
 8011b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b2a:	4606      	mov	r6, r0
 8011b2c:	460c      	mov	r4, r1
 8011b2e:	b112      	cbz	r2, 8011b36 <_printf_common+0x2a>
 8011b30:	3301      	adds	r3, #1
 8011b32:	f8c9 3000 	str.w	r3, [r9]
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	0699      	lsls	r1, r3, #26
 8011b3a:	bf42      	ittt	mi
 8011b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011b40:	3302      	addmi	r3, #2
 8011b42:	f8c9 3000 	strmi.w	r3, [r9]
 8011b46:	6825      	ldr	r5, [r4, #0]
 8011b48:	f015 0506 	ands.w	r5, r5, #6
 8011b4c:	d107      	bne.n	8011b5e <_printf_common+0x52>
 8011b4e:	f104 0a19 	add.w	sl, r4, #25
 8011b52:	68e3      	ldr	r3, [r4, #12]
 8011b54:	f8d9 2000 	ldr.w	r2, [r9]
 8011b58:	1a9b      	subs	r3, r3, r2
 8011b5a:	42ab      	cmp	r3, r5
 8011b5c:	dc28      	bgt.n	8011bb0 <_printf_common+0xa4>
 8011b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011b62:	6822      	ldr	r2, [r4, #0]
 8011b64:	3300      	adds	r3, #0
 8011b66:	bf18      	it	ne
 8011b68:	2301      	movne	r3, #1
 8011b6a:	0692      	lsls	r2, r2, #26
 8011b6c:	d42d      	bmi.n	8011bca <_printf_common+0xbe>
 8011b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b72:	4639      	mov	r1, r7
 8011b74:	4630      	mov	r0, r6
 8011b76:	47c0      	blx	r8
 8011b78:	3001      	adds	r0, #1
 8011b7a:	d020      	beq.n	8011bbe <_printf_common+0xb2>
 8011b7c:	6823      	ldr	r3, [r4, #0]
 8011b7e:	68e5      	ldr	r5, [r4, #12]
 8011b80:	f8d9 2000 	ldr.w	r2, [r9]
 8011b84:	f003 0306 	and.w	r3, r3, #6
 8011b88:	2b04      	cmp	r3, #4
 8011b8a:	bf08      	it	eq
 8011b8c:	1aad      	subeq	r5, r5, r2
 8011b8e:	68a3      	ldr	r3, [r4, #8]
 8011b90:	6922      	ldr	r2, [r4, #16]
 8011b92:	bf0c      	ite	eq
 8011b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b98:	2500      	movne	r5, #0
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	bfc4      	itt	gt
 8011b9e:	1a9b      	subgt	r3, r3, r2
 8011ba0:	18ed      	addgt	r5, r5, r3
 8011ba2:	f04f 0900 	mov.w	r9, #0
 8011ba6:	341a      	adds	r4, #26
 8011ba8:	454d      	cmp	r5, r9
 8011baa:	d11a      	bne.n	8011be2 <_printf_common+0xd6>
 8011bac:	2000      	movs	r0, #0
 8011bae:	e008      	b.n	8011bc2 <_printf_common+0xb6>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	4652      	mov	r2, sl
 8011bb4:	4639      	mov	r1, r7
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	47c0      	blx	r8
 8011bba:	3001      	adds	r0, #1
 8011bbc:	d103      	bne.n	8011bc6 <_printf_common+0xba>
 8011bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bc6:	3501      	adds	r5, #1
 8011bc8:	e7c3      	b.n	8011b52 <_printf_common+0x46>
 8011bca:	18e1      	adds	r1, r4, r3
 8011bcc:	1c5a      	adds	r2, r3, #1
 8011bce:	2030      	movs	r0, #48	; 0x30
 8011bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011bd4:	4422      	add	r2, r4
 8011bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011bde:	3302      	adds	r3, #2
 8011be0:	e7c5      	b.n	8011b6e <_printf_common+0x62>
 8011be2:	2301      	movs	r3, #1
 8011be4:	4622      	mov	r2, r4
 8011be6:	4639      	mov	r1, r7
 8011be8:	4630      	mov	r0, r6
 8011bea:	47c0      	blx	r8
 8011bec:	3001      	adds	r0, #1
 8011bee:	d0e6      	beq.n	8011bbe <_printf_common+0xb2>
 8011bf0:	f109 0901 	add.w	r9, r9, #1
 8011bf4:	e7d8      	b.n	8011ba8 <_printf_common+0x9c>
	...

08011bf8 <_printf_i>:
 8011bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011c00:	460c      	mov	r4, r1
 8011c02:	7e09      	ldrb	r1, [r1, #24]
 8011c04:	b085      	sub	sp, #20
 8011c06:	296e      	cmp	r1, #110	; 0x6e
 8011c08:	4617      	mov	r7, r2
 8011c0a:	4606      	mov	r6, r0
 8011c0c:	4698      	mov	r8, r3
 8011c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c10:	f000 80b3 	beq.w	8011d7a <_printf_i+0x182>
 8011c14:	d822      	bhi.n	8011c5c <_printf_i+0x64>
 8011c16:	2963      	cmp	r1, #99	; 0x63
 8011c18:	d036      	beq.n	8011c88 <_printf_i+0x90>
 8011c1a:	d80a      	bhi.n	8011c32 <_printf_i+0x3a>
 8011c1c:	2900      	cmp	r1, #0
 8011c1e:	f000 80b9 	beq.w	8011d94 <_printf_i+0x19c>
 8011c22:	2958      	cmp	r1, #88	; 0x58
 8011c24:	f000 8083 	beq.w	8011d2e <_printf_i+0x136>
 8011c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011c30:	e032      	b.n	8011c98 <_printf_i+0xa0>
 8011c32:	2964      	cmp	r1, #100	; 0x64
 8011c34:	d001      	beq.n	8011c3a <_printf_i+0x42>
 8011c36:	2969      	cmp	r1, #105	; 0x69
 8011c38:	d1f6      	bne.n	8011c28 <_printf_i+0x30>
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	6813      	ldr	r3, [r2, #0]
 8011c3e:	0605      	lsls	r5, r0, #24
 8011c40:	f103 0104 	add.w	r1, r3, #4
 8011c44:	d52a      	bpl.n	8011c9c <_printf_i+0xa4>
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	6011      	str	r1, [r2, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	da03      	bge.n	8011c56 <_printf_i+0x5e>
 8011c4e:	222d      	movs	r2, #45	; 0x2d
 8011c50:	425b      	negs	r3, r3
 8011c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011c56:	486f      	ldr	r0, [pc, #444]	; (8011e14 <_printf_i+0x21c>)
 8011c58:	220a      	movs	r2, #10
 8011c5a:	e039      	b.n	8011cd0 <_printf_i+0xd8>
 8011c5c:	2973      	cmp	r1, #115	; 0x73
 8011c5e:	f000 809d 	beq.w	8011d9c <_printf_i+0x1a4>
 8011c62:	d808      	bhi.n	8011c76 <_printf_i+0x7e>
 8011c64:	296f      	cmp	r1, #111	; 0x6f
 8011c66:	d020      	beq.n	8011caa <_printf_i+0xb2>
 8011c68:	2970      	cmp	r1, #112	; 0x70
 8011c6a:	d1dd      	bne.n	8011c28 <_printf_i+0x30>
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	f043 0320 	orr.w	r3, r3, #32
 8011c72:	6023      	str	r3, [r4, #0]
 8011c74:	e003      	b.n	8011c7e <_printf_i+0x86>
 8011c76:	2975      	cmp	r1, #117	; 0x75
 8011c78:	d017      	beq.n	8011caa <_printf_i+0xb2>
 8011c7a:	2978      	cmp	r1, #120	; 0x78
 8011c7c:	d1d4      	bne.n	8011c28 <_printf_i+0x30>
 8011c7e:	2378      	movs	r3, #120	; 0x78
 8011c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c84:	4864      	ldr	r0, [pc, #400]	; (8011e18 <_printf_i+0x220>)
 8011c86:	e055      	b.n	8011d34 <_printf_i+0x13c>
 8011c88:	6813      	ldr	r3, [r2, #0]
 8011c8a:	1d19      	adds	r1, r3, #4
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	6011      	str	r1, [r2, #0]
 8011c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e08c      	b.n	8011db6 <_printf_i+0x1be>
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	6011      	str	r1, [r2, #0]
 8011ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ca4:	bf18      	it	ne
 8011ca6:	b21b      	sxthne	r3, r3
 8011ca8:	e7cf      	b.n	8011c4a <_printf_i+0x52>
 8011caa:	6813      	ldr	r3, [r2, #0]
 8011cac:	6825      	ldr	r5, [r4, #0]
 8011cae:	1d18      	adds	r0, r3, #4
 8011cb0:	6010      	str	r0, [r2, #0]
 8011cb2:	0628      	lsls	r0, r5, #24
 8011cb4:	d501      	bpl.n	8011cba <_printf_i+0xc2>
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	e002      	b.n	8011cc0 <_printf_i+0xc8>
 8011cba:	0668      	lsls	r0, r5, #25
 8011cbc:	d5fb      	bpl.n	8011cb6 <_printf_i+0xbe>
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	4854      	ldr	r0, [pc, #336]	; (8011e14 <_printf_i+0x21c>)
 8011cc2:	296f      	cmp	r1, #111	; 0x6f
 8011cc4:	bf14      	ite	ne
 8011cc6:	220a      	movne	r2, #10
 8011cc8:	2208      	moveq	r2, #8
 8011cca:	2100      	movs	r1, #0
 8011ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011cd0:	6865      	ldr	r5, [r4, #4]
 8011cd2:	60a5      	str	r5, [r4, #8]
 8011cd4:	2d00      	cmp	r5, #0
 8011cd6:	f2c0 8095 	blt.w	8011e04 <_printf_i+0x20c>
 8011cda:	6821      	ldr	r1, [r4, #0]
 8011cdc:	f021 0104 	bic.w	r1, r1, #4
 8011ce0:	6021      	str	r1, [r4, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d13d      	bne.n	8011d62 <_printf_i+0x16a>
 8011ce6:	2d00      	cmp	r5, #0
 8011ce8:	f040 808e 	bne.w	8011e08 <_printf_i+0x210>
 8011cec:	4665      	mov	r5, ip
 8011cee:	2a08      	cmp	r2, #8
 8011cf0:	d10b      	bne.n	8011d0a <_printf_i+0x112>
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	07db      	lsls	r3, r3, #31
 8011cf6:	d508      	bpl.n	8011d0a <_printf_i+0x112>
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	6862      	ldr	r2, [r4, #4]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	bfde      	ittt	le
 8011d00:	2330      	movle	r3, #48	; 0x30
 8011d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011d0a:	ebac 0305 	sub.w	r3, ip, r5
 8011d0e:	6123      	str	r3, [r4, #16]
 8011d10:	f8cd 8000 	str.w	r8, [sp]
 8011d14:	463b      	mov	r3, r7
 8011d16:	aa03      	add	r2, sp, #12
 8011d18:	4621      	mov	r1, r4
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f7ff fef6 	bl	8011b0c <_printf_common>
 8011d20:	3001      	adds	r0, #1
 8011d22:	d14d      	bne.n	8011dc0 <_printf_i+0x1c8>
 8011d24:	f04f 30ff 	mov.w	r0, #4294967295
 8011d28:	b005      	add	sp, #20
 8011d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d2e:	4839      	ldr	r0, [pc, #228]	; (8011e14 <_printf_i+0x21c>)
 8011d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011d34:	6813      	ldr	r3, [r2, #0]
 8011d36:	6821      	ldr	r1, [r4, #0]
 8011d38:	1d1d      	adds	r5, r3, #4
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	6015      	str	r5, [r2, #0]
 8011d3e:	060a      	lsls	r2, r1, #24
 8011d40:	d50b      	bpl.n	8011d5a <_printf_i+0x162>
 8011d42:	07ca      	lsls	r2, r1, #31
 8011d44:	bf44      	itt	mi
 8011d46:	f041 0120 	orrmi.w	r1, r1, #32
 8011d4a:	6021      	strmi	r1, [r4, #0]
 8011d4c:	b91b      	cbnz	r3, 8011d56 <_printf_i+0x15e>
 8011d4e:	6822      	ldr	r2, [r4, #0]
 8011d50:	f022 0220 	bic.w	r2, r2, #32
 8011d54:	6022      	str	r2, [r4, #0]
 8011d56:	2210      	movs	r2, #16
 8011d58:	e7b7      	b.n	8011cca <_printf_i+0xd2>
 8011d5a:	064d      	lsls	r5, r1, #25
 8011d5c:	bf48      	it	mi
 8011d5e:	b29b      	uxthmi	r3, r3
 8011d60:	e7ef      	b.n	8011d42 <_printf_i+0x14a>
 8011d62:	4665      	mov	r5, ip
 8011d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d68:	fb02 3311 	mls	r3, r2, r1, r3
 8011d6c:	5cc3      	ldrb	r3, [r0, r3]
 8011d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d72:	460b      	mov	r3, r1
 8011d74:	2900      	cmp	r1, #0
 8011d76:	d1f5      	bne.n	8011d64 <_printf_i+0x16c>
 8011d78:	e7b9      	b.n	8011cee <_printf_i+0xf6>
 8011d7a:	6813      	ldr	r3, [r2, #0]
 8011d7c:	6825      	ldr	r5, [r4, #0]
 8011d7e:	6961      	ldr	r1, [r4, #20]
 8011d80:	1d18      	adds	r0, r3, #4
 8011d82:	6010      	str	r0, [r2, #0]
 8011d84:	0628      	lsls	r0, r5, #24
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	d501      	bpl.n	8011d8e <_printf_i+0x196>
 8011d8a:	6019      	str	r1, [r3, #0]
 8011d8c:	e002      	b.n	8011d94 <_printf_i+0x19c>
 8011d8e:	066a      	lsls	r2, r5, #25
 8011d90:	d5fb      	bpl.n	8011d8a <_printf_i+0x192>
 8011d92:	8019      	strh	r1, [r3, #0]
 8011d94:	2300      	movs	r3, #0
 8011d96:	6123      	str	r3, [r4, #16]
 8011d98:	4665      	mov	r5, ip
 8011d9a:	e7b9      	b.n	8011d10 <_printf_i+0x118>
 8011d9c:	6813      	ldr	r3, [r2, #0]
 8011d9e:	1d19      	adds	r1, r3, #4
 8011da0:	6011      	str	r1, [r2, #0]
 8011da2:	681d      	ldr	r5, [r3, #0]
 8011da4:	6862      	ldr	r2, [r4, #4]
 8011da6:	2100      	movs	r1, #0
 8011da8:	4628      	mov	r0, r5
 8011daa:	f7f6 f951 	bl	8008050 <memchr>
 8011dae:	b108      	cbz	r0, 8011db4 <_printf_i+0x1bc>
 8011db0:	1b40      	subs	r0, r0, r5
 8011db2:	6060      	str	r0, [r4, #4]
 8011db4:	6863      	ldr	r3, [r4, #4]
 8011db6:	6123      	str	r3, [r4, #16]
 8011db8:	2300      	movs	r3, #0
 8011dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dbe:	e7a7      	b.n	8011d10 <_printf_i+0x118>
 8011dc0:	6923      	ldr	r3, [r4, #16]
 8011dc2:	462a      	mov	r2, r5
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	47c0      	blx	r8
 8011dca:	3001      	adds	r0, #1
 8011dcc:	d0aa      	beq.n	8011d24 <_printf_i+0x12c>
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	079b      	lsls	r3, r3, #30
 8011dd2:	d413      	bmi.n	8011dfc <_printf_i+0x204>
 8011dd4:	68e0      	ldr	r0, [r4, #12]
 8011dd6:	9b03      	ldr	r3, [sp, #12]
 8011dd8:	4298      	cmp	r0, r3
 8011dda:	bfb8      	it	lt
 8011ddc:	4618      	movlt	r0, r3
 8011dde:	e7a3      	b.n	8011d28 <_printf_i+0x130>
 8011de0:	2301      	movs	r3, #1
 8011de2:	464a      	mov	r2, r9
 8011de4:	4639      	mov	r1, r7
 8011de6:	4630      	mov	r0, r6
 8011de8:	47c0      	blx	r8
 8011dea:	3001      	adds	r0, #1
 8011dec:	d09a      	beq.n	8011d24 <_printf_i+0x12c>
 8011dee:	3501      	adds	r5, #1
 8011df0:	68e3      	ldr	r3, [r4, #12]
 8011df2:	9a03      	ldr	r2, [sp, #12]
 8011df4:	1a9b      	subs	r3, r3, r2
 8011df6:	42ab      	cmp	r3, r5
 8011df8:	dcf2      	bgt.n	8011de0 <_printf_i+0x1e8>
 8011dfa:	e7eb      	b.n	8011dd4 <_printf_i+0x1dc>
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	f104 0919 	add.w	r9, r4, #25
 8011e02:	e7f5      	b.n	8011df0 <_printf_i+0x1f8>
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d1ac      	bne.n	8011d62 <_printf_i+0x16a>
 8011e08:	7803      	ldrb	r3, [r0, #0]
 8011e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e12:	e76c      	b.n	8011cee <_printf_i+0xf6>
 8011e14:	08015b9e 	.word	0x08015b9e
 8011e18:	08015baf 	.word	0x08015baf

08011e1c <_scanf_float>:
 8011e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e20:	469a      	mov	sl, r3
 8011e22:	688b      	ldr	r3, [r1, #8]
 8011e24:	4616      	mov	r6, r2
 8011e26:	1e5a      	subs	r2, r3, #1
 8011e28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011e2c:	b087      	sub	sp, #28
 8011e2e:	bf83      	ittte	hi
 8011e30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011e34:	189b      	addhi	r3, r3, r2
 8011e36:	9301      	strhi	r3, [sp, #4]
 8011e38:	2300      	movls	r3, #0
 8011e3a:	bf86      	itte	hi
 8011e3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011e40:	608b      	strhi	r3, [r1, #8]
 8011e42:	9301      	strls	r3, [sp, #4]
 8011e44:	680b      	ldr	r3, [r1, #0]
 8011e46:	4688      	mov	r8, r1
 8011e48:	f04f 0b00 	mov.w	fp, #0
 8011e4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011e50:	f848 3b1c 	str.w	r3, [r8], #28
 8011e54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011e58:	4607      	mov	r7, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	4645      	mov	r5, r8
 8011e5e:	465a      	mov	r2, fp
 8011e60:	46d9      	mov	r9, fp
 8011e62:	f8cd b008 	str.w	fp, [sp, #8]
 8011e66:	68a1      	ldr	r1, [r4, #8]
 8011e68:	b181      	cbz	r1, 8011e8c <_scanf_float+0x70>
 8011e6a:	6833      	ldr	r3, [r6, #0]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b49      	cmp	r3, #73	; 0x49
 8011e70:	d071      	beq.n	8011f56 <_scanf_float+0x13a>
 8011e72:	d84d      	bhi.n	8011f10 <_scanf_float+0xf4>
 8011e74:	2b39      	cmp	r3, #57	; 0x39
 8011e76:	d840      	bhi.n	8011efa <_scanf_float+0xde>
 8011e78:	2b31      	cmp	r3, #49	; 0x31
 8011e7a:	f080 8088 	bcs.w	8011f8e <_scanf_float+0x172>
 8011e7e:	2b2d      	cmp	r3, #45	; 0x2d
 8011e80:	f000 8090 	beq.w	8011fa4 <_scanf_float+0x188>
 8011e84:	d815      	bhi.n	8011eb2 <_scanf_float+0x96>
 8011e86:	2b2b      	cmp	r3, #43	; 0x2b
 8011e88:	f000 808c 	beq.w	8011fa4 <_scanf_float+0x188>
 8011e8c:	f1b9 0f00 	cmp.w	r9, #0
 8011e90:	d003      	beq.n	8011e9a <_scanf_float+0x7e>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e98:	6023      	str	r3, [r4, #0]
 8011e9a:	3a01      	subs	r2, #1
 8011e9c:	2a01      	cmp	r2, #1
 8011e9e:	f200 80ea 	bhi.w	8012076 <_scanf_float+0x25a>
 8011ea2:	4545      	cmp	r5, r8
 8011ea4:	f200 80dc 	bhi.w	8012060 <_scanf_float+0x244>
 8011ea8:	2601      	movs	r6, #1
 8011eaa:	4630      	mov	r0, r6
 8011eac:	b007      	add	sp, #28
 8011eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8011eb4:	f000 809f 	beq.w	8011ff6 <_scanf_float+0x1da>
 8011eb8:	2b30      	cmp	r3, #48	; 0x30
 8011eba:	d1e7      	bne.n	8011e8c <_scanf_float+0x70>
 8011ebc:	6820      	ldr	r0, [r4, #0]
 8011ebe:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011ec2:	d064      	beq.n	8011f8e <_scanf_float+0x172>
 8011ec4:	9b01      	ldr	r3, [sp, #4]
 8011ec6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011eca:	6020      	str	r0, [r4, #0]
 8011ecc:	f109 0901 	add.w	r9, r9, #1
 8011ed0:	b11b      	cbz	r3, 8011eda <_scanf_float+0xbe>
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	3101      	adds	r1, #1
 8011ed6:	9301      	str	r3, [sp, #4]
 8011ed8:	60a1      	str	r1, [r4, #8]
 8011eda:	68a3      	ldr	r3, [r4, #8]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	60a3      	str	r3, [r4, #8]
 8011ee0:	6923      	ldr	r3, [r4, #16]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	6123      	str	r3, [r4, #16]
 8011ee6:	6873      	ldr	r3, [r6, #4]
 8011ee8:	3b01      	subs	r3, #1
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	6073      	str	r3, [r6, #4]
 8011eee:	f340 80ac 	ble.w	801204a <_scanf_float+0x22e>
 8011ef2:	6833      	ldr	r3, [r6, #0]
 8011ef4:	3301      	adds	r3, #1
 8011ef6:	6033      	str	r3, [r6, #0]
 8011ef8:	e7b5      	b.n	8011e66 <_scanf_float+0x4a>
 8011efa:	2b45      	cmp	r3, #69	; 0x45
 8011efc:	f000 8085 	beq.w	801200a <_scanf_float+0x1ee>
 8011f00:	2b46      	cmp	r3, #70	; 0x46
 8011f02:	d06a      	beq.n	8011fda <_scanf_float+0x1be>
 8011f04:	2b41      	cmp	r3, #65	; 0x41
 8011f06:	d1c1      	bne.n	8011e8c <_scanf_float+0x70>
 8011f08:	2a01      	cmp	r2, #1
 8011f0a:	d1bf      	bne.n	8011e8c <_scanf_float+0x70>
 8011f0c:	2202      	movs	r2, #2
 8011f0e:	e046      	b.n	8011f9e <_scanf_float+0x182>
 8011f10:	2b65      	cmp	r3, #101	; 0x65
 8011f12:	d07a      	beq.n	801200a <_scanf_float+0x1ee>
 8011f14:	d818      	bhi.n	8011f48 <_scanf_float+0x12c>
 8011f16:	2b54      	cmp	r3, #84	; 0x54
 8011f18:	d066      	beq.n	8011fe8 <_scanf_float+0x1cc>
 8011f1a:	d811      	bhi.n	8011f40 <_scanf_float+0x124>
 8011f1c:	2b4e      	cmp	r3, #78	; 0x4e
 8011f1e:	d1b5      	bne.n	8011e8c <_scanf_float+0x70>
 8011f20:	2a00      	cmp	r2, #0
 8011f22:	d146      	bne.n	8011fb2 <_scanf_float+0x196>
 8011f24:	f1b9 0f00 	cmp.w	r9, #0
 8011f28:	d145      	bne.n	8011fb6 <_scanf_float+0x19a>
 8011f2a:	6821      	ldr	r1, [r4, #0]
 8011f2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011f30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011f34:	d13f      	bne.n	8011fb6 <_scanf_float+0x19a>
 8011f36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011f3a:	6021      	str	r1, [r4, #0]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	e02e      	b.n	8011f9e <_scanf_float+0x182>
 8011f40:	2b59      	cmp	r3, #89	; 0x59
 8011f42:	d01e      	beq.n	8011f82 <_scanf_float+0x166>
 8011f44:	2b61      	cmp	r3, #97	; 0x61
 8011f46:	e7de      	b.n	8011f06 <_scanf_float+0xea>
 8011f48:	2b6e      	cmp	r3, #110	; 0x6e
 8011f4a:	d0e9      	beq.n	8011f20 <_scanf_float+0x104>
 8011f4c:	d815      	bhi.n	8011f7a <_scanf_float+0x15e>
 8011f4e:	2b66      	cmp	r3, #102	; 0x66
 8011f50:	d043      	beq.n	8011fda <_scanf_float+0x1be>
 8011f52:	2b69      	cmp	r3, #105	; 0x69
 8011f54:	d19a      	bne.n	8011e8c <_scanf_float+0x70>
 8011f56:	f1bb 0f00 	cmp.w	fp, #0
 8011f5a:	d138      	bne.n	8011fce <_scanf_float+0x1b2>
 8011f5c:	f1b9 0f00 	cmp.w	r9, #0
 8011f60:	d197      	bne.n	8011e92 <_scanf_float+0x76>
 8011f62:	6821      	ldr	r1, [r4, #0]
 8011f64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011f68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011f6c:	d195      	bne.n	8011e9a <_scanf_float+0x7e>
 8011f6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011f72:	6021      	str	r1, [r4, #0]
 8011f74:	f04f 0b01 	mov.w	fp, #1
 8011f78:	e011      	b.n	8011f9e <_scanf_float+0x182>
 8011f7a:	2b74      	cmp	r3, #116	; 0x74
 8011f7c:	d034      	beq.n	8011fe8 <_scanf_float+0x1cc>
 8011f7e:	2b79      	cmp	r3, #121	; 0x79
 8011f80:	d184      	bne.n	8011e8c <_scanf_float+0x70>
 8011f82:	f1bb 0f07 	cmp.w	fp, #7
 8011f86:	d181      	bne.n	8011e8c <_scanf_float+0x70>
 8011f88:	f04f 0b08 	mov.w	fp, #8
 8011f8c:	e007      	b.n	8011f9e <_scanf_float+0x182>
 8011f8e:	eb12 0f0b 	cmn.w	r2, fp
 8011f92:	f47f af7b 	bne.w	8011e8c <_scanf_float+0x70>
 8011f96:	6821      	ldr	r1, [r4, #0]
 8011f98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011f9c:	6021      	str	r1, [r4, #0]
 8011f9e:	702b      	strb	r3, [r5, #0]
 8011fa0:	3501      	adds	r5, #1
 8011fa2:	e79a      	b.n	8011eda <_scanf_float+0xbe>
 8011fa4:	6821      	ldr	r1, [r4, #0]
 8011fa6:	0608      	lsls	r0, r1, #24
 8011fa8:	f57f af70 	bpl.w	8011e8c <_scanf_float+0x70>
 8011fac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011fb0:	e7f4      	b.n	8011f9c <_scanf_float+0x180>
 8011fb2:	2a02      	cmp	r2, #2
 8011fb4:	d047      	beq.n	8012046 <_scanf_float+0x22a>
 8011fb6:	f1bb 0f01 	cmp.w	fp, #1
 8011fba:	d003      	beq.n	8011fc4 <_scanf_float+0x1a8>
 8011fbc:	f1bb 0f04 	cmp.w	fp, #4
 8011fc0:	f47f af64 	bne.w	8011e8c <_scanf_float+0x70>
 8011fc4:	f10b 0b01 	add.w	fp, fp, #1
 8011fc8:	fa5f fb8b 	uxtb.w	fp, fp
 8011fcc:	e7e7      	b.n	8011f9e <_scanf_float+0x182>
 8011fce:	f1bb 0f03 	cmp.w	fp, #3
 8011fd2:	d0f7      	beq.n	8011fc4 <_scanf_float+0x1a8>
 8011fd4:	f1bb 0f05 	cmp.w	fp, #5
 8011fd8:	e7f2      	b.n	8011fc0 <_scanf_float+0x1a4>
 8011fda:	f1bb 0f02 	cmp.w	fp, #2
 8011fde:	f47f af55 	bne.w	8011e8c <_scanf_float+0x70>
 8011fe2:	f04f 0b03 	mov.w	fp, #3
 8011fe6:	e7da      	b.n	8011f9e <_scanf_float+0x182>
 8011fe8:	f1bb 0f06 	cmp.w	fp, #6
 8011fec:	f47f af4e 	bne.w	8011e8c <_scanf_float+0x70>
 8011ff0:	f04f 0b07 	mov.w	fp, #7
 8011ff4:	e7d3      	b.n	8011f9e <_scanf_float+0x182>
 8011ff6:	6821      	ldr	r1, [r4, #0]
 8011ff8:	0588      	lsls	r0, r1, #22
 8011ffa:	f57f af47 	bpl.w	8011e8c <_scanf_float+0x70>
 8011ffe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012002:	6021      	str	r1, [r4, #0]
 8012004:	f8cd 9008 	str.w	r9, [sp, #8]
 8012008:	e7c9      	b.n	8011f9e <_scanf_float+0x182>
 801200a:	6821      	ldr	r1, [r4, #0]
 801200c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012010:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012014:	d006      	beq.n	8012024 <_scanf_float+0x208>
 8012016:	0548      	lsls	r0, r1, #21
 8012018:	f57f af38 	bpl.w	8011e8c <_scanf_float+0x70>
 801201c:	f1b9 0f00 	cmp.w	r9, #0
 8012020:	f43f af3b 	beq.w	8011e9a <_scanf_float+0x7e>
 8012024:	0588      	lsls	r0, r1, #22
 8012026:	bf58      	it	pl
 8012028:	9802      	ldrpl	r0, [sp, #8]
 801202a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801202e:	bf58      	it	pl
 8012030:	eba9 0000 	subpl.w	r0, r9, r0
 8012034:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012038:	bf58      	it	pl
 801203a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801203e:	6021      	str	r1, [r4, #0]
 8012040:	f04f 0900 	mov.w	r9, #0
 8012044:	e7ab      	b.n	8011f9e <_scanf_float+0x182>
 8012046:	2203      	movs	r2, #3
 8012048:	e7a9      	b.n	8011f9e <_scanf_float+0x182>
 801204a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801204e:	9205      	str	r2, [sp, #20]
 8012050:	4631      	mov	r1, r6
 8012052:	4638      	mov	r0, r7
 8012054:	4798      	blx	r3
 8012056:	9a05      	ldr	r2, [sp, #20]
 8012058:	2800      	cmp	r0, #0
 801205a:	f43f af04 	beq.w	8011e66 <_scanf_float+0x4a>
 801205e:	e715      	b.n	8011e8c <_scanf_float+0x70>
 8012060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012064:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012068:	4632      	mov	r2, r6
 801206a:	4638      	mov	r0, r7
 801206c:	4798      	blx	r3
 801206e:	6923      	ldr	r3, [r4, #16]
 8012070:	3b01      	subs	r3, #1
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	e715      	b.n	8011ea2 <_scanf_float+0x86>
 8012076:	f10b 33ff 	add.w	r3, fp, #4294967295
 801207a:	2b06      	cmp	r3, #6
 801207c:	d80a      	bhi.n	8012094 <_scanf_float+0x278>
 801207e:	f1bb 0f02 	cmp.w	fp, #2
 8012082:	d968      	bls.n	8012156 <_scanf_float+0x33a>
 8012084:	f1ab 0b03 	sub.w	fp, fp, #3
 8012088:	fa5f fb8b 	uxtb.w	fp, fp
 801208c:	eba5 0b0b 	sub.w	fp, r5, fp
 8012090:	455d      	cmp	r5, fp
 8012092:	d14b      	bne.n	801212c <_scanf_float+0x310>
 8012094:	6823      	ldr	r3, [r4, #0]
 8012096:	05da      	lsls	r2, r3, #23
 8012098:	d51f      	bpl.n	80120da <_scanf_float+0x2be>
 801209a:	055b      	lsls	r3, r3, #21
 801209c:	d468      	bmi.n	8012170 <_scanf_float+0x354>
 801209e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80120a2:	6923      	ldr	r3, [r4, #16]
 80120a4:	2965      	cmp	r1, #101	; 0x65
 80120a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80120aa:	f105 3bff 	add.w	fp, r5, #4294967295
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	d00d      	beq.n	80120ce <_scanf_float+0x2b2>
 80120b2:	2945      	cmp	r1, #69	; 0x45
 80120b4:	d00b      	beq.n	80120ce <_scanf_float+0x2b2>
 80120b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120ba:	4632      	mov	r2, r6
 80120bc:	4638      	mov	r0, r7
 80120be:	4798      	blx	r3
 80120c0:	6923      	ldr	r3, [r4, #16]
 80120c2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80120c6:	3b01      	subs	r3, #1
 80120c8:	f1a5 0b02 	sub.w	fp, r5, #2
 80120cc:	6123      	str	r3, [r4, #16]
 80120ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120d2:	4632      	mov	r2, r6
 80120d4:	4638      	mov	r0, r7
 80120d6:	4798      	blx	r3
 80120d8:	465d      	mov	r5, fp
 80120da:	6826      	ldr	r6, [r4, #0]
 80120dc:	f016 0610 	ands.w	r6, r6, #16
 80120e0:	d17a      	bne.n	80121d8 <_scanf_float+0x3bc>
 80120e2:	702e      	strb	r6, [r5, #0]
 80120e4:	6823      	ldr	r3, [r4, #0]
 80120e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80120ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120ee:	d142      	bne.n	8012176 <_scanf_float+0x35a>
 80120f0:	9b02      	ldr	r3, [sp, #8]
 80120f2:	eba9 0303 	sub.w	r3, r9, r3
 80120f6:	425a      	negs	r2, r3
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d149      	bne.n	8012190 <_scanf_float+0x374>
 80120fc:	2200      	movs	r2, #0
 80120fe:	4641      	mov	r1, r8
 8012100:	4638      	mov	r0, r7
 8012102:	f000 ff21 	bl	8012f48 <_strtod_r>
 8012106:	6825      	ldr	r5, [r4, #0]
 8012108:	f8da 3000 	ldr.w	r3, [sl]
 801210c:	f015 0f02 	tst.w	r5, #2
 8012110:	f103 0204 	add.w	r2, r3, #4
 8012114:	ec59 8b10 	vmov	r8, r9, d0
 8012118:	f8ca 2000 	str.w	r2, [sl]
 801211c:	d043      	beq.n	80121a6 <_scanf_float+0x38a>
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	e9c3 8900 	strd	r8, r9, [r3]
 8012124:	68e3      	ldr	r3, [r4, #12]
 8012126:	3301      	adds	r3, #1
 8012128:	60e3      	str	r3, [r4, #12]
 801212a:	e6be      	b.n	8011eaa <_scanf_float+0x8e>
 801212c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012130:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012134:	4632      	mov	r2, r6
 8012136:	4638      	mov	r0, r7
 8012138:	4798      	blx	r3
 801213a:	6923      	ldr	r3, [r4, #16]
 801213c:	3b01      	subs	r3, #1
 801213e:	6123      	str	r3, [r4, #16]
 8012140:	e7a6      	b.n	8012090 <_scanf_float+0x274>
 8012142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012146:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801214a:	4632      	mov	r2, r6
 801214c:	4638      	mov	r0, r7
 801214e:	4798      	blx	r3
 8012150:	6923      	ldr	r3, [r4, #16]
 8012152:	3b01      	subs	r3, #1
 8012154:	6123      	str	r3, [r4, #16]
 8012156:	4545      	cmp	r5, r8
 8012158:	d8f3      	bhi.n	8012142 <_scanf_float+0x326>
 801215a:	e6a5      	b.n	8011ea8 <_scanf_float+0x8c>
 801215c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012160:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012164:	4632      	mov	r2, r6
 8012166:	4638      	mov	r0, r7
 8012168:	4798      	blx	r3
 801216a:	6923      	ldr	r3, [r4, #16]
 801216c:	3b01      	subs	r3, #1
 801216e:	6123      	str	r3, [r4, #16]
 8012170:	4545      	cmp	r5, r8
 8012172:	d8f3      	bhi.n	801215c <_scanf_float+0x340>
 8012174:	e698      	b.n	8011ea8 <_scanf_float+0x8c>
 8012176:	9b03      	ldr	r3, [sp, #12]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0bf      	beq.n	80120fc <_scanf_float+0x2e0>
 801217c:	9904      	ldr	r1, [sp, #16]
 801217e:	230a      	movs	r3, #10
 8012180:	4632      	mov	r2, r6
 8012182:	3101      	adds	r1, #1
 8012184:	4638      	mov	r0, r7
 8012186:	f000 ff6b 	bl	8013060 <_strtol_r>
 801218a:	9b03      	ldr	r3, [sp, #12]
 801218c:	9d04      	ldr	r5, [sp, #16]
 801218e:	1ac2      	subs	r2, r0, r3
 8012190:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012194:	429d      	cmp	r5, r3
 8012196:	bf28      	it	cs
 8012198:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801219c:	490f      	ldr	r1, [pc, #60]	; (80121dc <_scanf_float+0x3c0>)
 801219e:	4628      	mov	r0, r5
 80121a0:	f000 f8a0 	bl	80122e4 <siprintf>
 80121a4:	e7aa      	b.n	80120fc <_scanf_float+0x2e0>
 80121a6:	f015 0504 	ands.w	r5, r5, #4
 80121aa:	d1b8      	bne.n	801211e <_scanf_float+0x302>
 80121ac:	681f      	ldr	r7, [r3, #0]
 80121ae:	ee10 2a10 	vmov	r2, s0
 80121b2:	464b      	mov	r3, r9
 80121b4:	ee10 0a10 	vmov	r0, s0
 80121b8:	4649      	mov	r1, r9
 80121ba:	f7f6 fbef 	bl	800899c <__aeabi_dcmpun>
 80121be:	b128      	cbz	r0, 80121cc <_scanf_float+0x3b0>
 80121c0:	4628      	mov	r0, r5
 80121c2:	f000 f889 	bl	80122d8 <nanf>
 80121c6:	ed87 0a00 	vstr	s0, [r7]
 80121ca:	e7ab      	b.n	8012124 <_scanf_float+0x308>
 80121cc:	4640      	mov	r0, r8
 80121ce:	4649      	mov	r1, r9
 80121d0:	f7f6 fc42 	bl	8008a58 <__aeabi_d2f>
 80121d4:	6038      	str	r0, [r7, #0]
 80121d6:	e7a5      	b.n	8012124 <_scanf_float+0x308>
 80121d8:	2600      	movs	r6, #0
 80121da:	e666      	b.n	8011eaa <_scanf_float+0x8e>
 80121dc:	08015bc0 	.word	0x08015bc0

080121e0 <iprintf>:
 80121e0:	b40f      	push	{r0, r1, r2, r3}
 80121e2:	4b0a      	ldr	r3, [pc, #40]	; (801220c <iprintf+0x2c>)
 80121e4:	b513      	push	{r0, r1, r4, lr}
 80121e6:	681c      	ldr	r4, [r3, #0]
 80121e8:	b124      	cbz	r4, 80121f4 <iprintf+0x14>
 80121ea:	69a3      	ldr	r3, [r4, #24]
 80121ec:	b913      	cbnz	r3, 80121f4 <iprintf+0x14>
 80121ee:	4620      	mov	r0, r4
 80121f0:	f001 ff5e 	bl	80140b0 <__sinit>
 80121f4:	ab05      	add	r3, sp, #20
 80121f6:	9a04      	ldr	r2, [sp, #16]
 80121f8:	68a1      	ldr	r1, [r4, #8]
 80121fa:	9301      	str	r3, [sp, #4]
 80121fc:	4620      	mov	r0, r4
 80121fe:	f003 f9cb 	bl	8015598 <_vfiprintf_r>
 8012202:	b002      	add	sp, #8
 8012204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012208:	b004      	add	sp, #16
 801220a:	4770      	bx	lr
 801220c:	20000018 	.word	0x20000018

08012210 <_puts_r>:
 8012210:	b570      	push	{r4, r5, r6, lr}
 8012212:	460e      	mov	r6, r1
 8012214:	4605      	mov	r5, r0
 8012216:	b118      	cbz	r0, 8012220 <_puts_r+0x10>
 8012218:	6983      	ldr	r3, [r0, #24]
 801221a:	b90b      	cbnz	r3, 8012220 <_puts_r+0x10>
 801221c:	f001 ff48 	bl	80140b0 <__sinit>
 8012220:	69ab      	ldr	r3, [r5, #24]
 8012222:	68ac      	ldr	r4, [r5, #8]
 8012224:	b913      	cbnz	r3, 801222c <_puts_r+0x1c>
 8012226:	4628      	mov	r0, r5
 8012228:	f001 ff42 	bl	80140b0 <__sinit>
 801222c:	4b23      	ldr	r3, [pc, #140]	; (80122bc <_puts_r+0xac>)
 801222e:	429c      	cmp	r4, r3
 8012230:	d117      	bne.n	8012262 <_puts_r+0x52>
 8012232:	686c      	ldr	r4, [r5, #4]
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	071b      	lsls	r3, r3, #28
 8012238:	d51d      	bpl.n	8012276 <_puts_r+0x66>
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	b1db      	cbz	r3, 8012276 <_puts_r+0x66>
 801223e:	3e01      	subs	r6, #1
 8012240:	68a3      	ldr	r3, [r4, #8]
 8012242:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012246:	3b01      	subs	r3, #1
 8012248:	60a3      	str	r3, [r4, #8]
 801224a:	b9e9      	cbnz	r1, 8012288 <_puts_r+0x78>
 801224c:	2b00      	cmp	r3, #0
 801224e:	da2e      	bge.n	80122ae <_puts_r+0x9e>
 8012250:	4622      	mov	r2, r4
 8012252:	210a      	movs	r1, #10
 8012254:	4628      	mov	r0, r5
 8012256:	f000 ff35 	bl	80130c4 <__swbuf_r>
 801225a:	3001      	adds	r0, #1
 801225c:	d011      	beq.n	8012282 <_puts_r+0x72>
 801225e:	200a      	movs	r0, #10
 8012260:	e011      	b.n	8012286 <_puts_r+0x76>
 8012262:	4b17      	ldr	r3, [pc, #92]	; (80122c0 <_puts_r+0xb0>)
 8012264:	429c      	cmp	r4, r3
 8012266:	d101      	bne.n	801226c <_puts_r+0x5c>
 8012268:	68ac      	ldr	r4, [r5, #8]
 801226a:	e7e3      	b.n	8012234 <_puts_r+0x24>
 801226c:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <_puts_r+0xb4>)
 801226e:	429c      	cmp	r4, r3
 8012270:	bf08      	it	eq
 8012272:	68ec      	ldreq	r4, [r5, #12]
 8012274:	e7de      	b.n	8012234 <_puts_r+0x24>
 8012276:	4621      	mov	r1, r4
 8012278:	4628      	mov	r0, r5
 801227a:	f000 ff75 	bl	8013168 <__swsetup_r>
 801227e:	2800      	cmp	r0, #0
 8012280:	d0dd      	beq.n	801223e <_puts_r+0x2e>
 8012282:	f04f 30ff 	mov.w	r0, #4294967295
 8012286:	bd70      	pop	{r4, r5, r6, pc}
 8012288:	2b00      	cmp	r3, #0
 801228a:	da04      	bge.n	8012296 <_puts_r+0x86>
 801228c:	69a2      	ldr	r2, [r4, #24]
 801228e:	429a      	cmp	r2, r3
 8012290:	dc06      	bgt.n	80122a0 <_puts_r+0x90>
 8012292:	290a      	cmp	r1, #10
 8012294:	d004      	beq.n	80122a0 <_puts_r+0x90>
 8012296:	6823      	ldr	r3, [r4, #0]
 8012298:	1c5a      	adds	r2, r3, #1
 801229a:	6022      	str	r2, [r4, #0]
 801229c:	7019      	strb	r1, [r3, #0]
 801229e:	e7cf      	b.n	8012240 <_puts_r+0x30>
 80122a0:	4622      	mov	r2, r4
 80122a2:	4628      	mov	r0, r5
 80122a4:	f000 ff0e 	bl	80130c4 <__swbuf_r>
 80122a8:	3001      	adds	r0, #1
 80122aa:	d1c9      	bne.n	8012240 <_puts_r+0x30>
 80122ac:	e7e9      	b.n	8012282 <_puts_r+0x72>
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	200a      	movs	r0, #10
 80122b2:	1c5a      	adds	r2, r3, #1
 80122b4:	6022      	str	r2, [r4, #0]
 80122b6:	7018      	strb	r0, [r3, #0]
 80122b8:	e7e5      	b.n	8012286 <_puts_r+0x76>
 80122ba:	bf00      	nop
 80122bc:	08015c48 	.word	0x08015c48
 80122c0:	08015c68 	.word	0x08015c68
 80122c4:	08015c28 	.word	0x08015c28

080122c8 <puts>:
 80122c8:	4b02      	ldr	r3, [pc, #8]	; (80122d4 <puts+0xc>)
 80122ca:	4601      	mov	r1, r0
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f7ff bf9f 	b.w	8012210 <_puts_r>
 80122d2:	bf00      	nop
 80122d4:	20000018 	.word	0x20000018

080122d8 <nanf>:
 80122d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80122e0 <nanf+0x8>
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	7fc00000 	.word	0x7fc00000

080122e4 <siprintf>:
 80122e4:	b40e      	push	{r1, r2, r3}
 80122e6:	b500      	push	{lr}
 80122e8:	b09c      	sub	sp, #112	; 0x70
 80122ea:	ab1d      	add	r3, sp, #116	; 0x74
 80122ec:	9002      	str	r0, [sp, #8]
 80122ee:	9006      	str	r0, [sp, #24]
 80122f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80122f4:	4809      	ldr	r0, [pc, #36]	; (801231c <siprintf+0x38>)
 80122f6:	9107      	str	r1, [sp, #28]
 80122f8:	9104      	str	r1, [sp, #16]
 80122fa:	4909      	ldr	r1, [pc, #36]	; (8012320 <siprintf+0x3c>)
 80122fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012300:	9105      	str	r1, [sp, #20]
 8012302:	6800      	ldr	r0, [r0, #0]
 8012304:	9301      	str	r3, [sp, #4]
 8012306:	a902      	add	r1, sp, #8
 8012308:	f003 f824 	bl	8015354 <_svfiprintf_r>
 801230c:	9b02      	ldr	r3, [sp, #8]
 801230e:	2200      	movs	r2, #0
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	b01c      	add	sp, #112	; 0x70
 8012314:	f85d eb04 	ldr.w	lr, [sp], #4
 8012318:	b003      	add	sp, #12
 801231a:	4770      	bx	lr
 801231c:	20000018 	.word	0x20000018
 8012320:	ffff0208 	.word	0xffff0208

08012324 <sulp>:
 8012324:	b570      	push	{r4, r5, r6, lr}
 8012326:	4604      	mov	r4, r0
 8012328:	460d      	mov	r5, r1
 801232a:	ec45 4b10 	vmov	d0, r4, r5
 801232e:	4616      	mov	r6, r2
 8012330:	f002 fdcc 	bl	8014ecc <__ulp>
 8012334:	ec51 0b10 	vmov	r0, r1, d0
 8012338:	b17e      	cbz	r6, 801235a <sulp+0x36>
 801233a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801233e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012342:	2b00      	cmp	r3, #0
 8012344:	dd09      	ble.n	801235a <sulp+0x36>
 8012346:	051b      	lsls	r3, r3, #20
 8012348:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801234c:	2400      	movs	r4, #0
 801234e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012352:	4622      	mov	r2, r4
 8012354:	462b      	mov	r3, r5
 8012356:	f7f6 f887 	bl	8008468 <__aeabi_dmul>
 801235a:	bd70      	pop	{r4, r5, r6, pc}
 801235c:	0000      	movs	r0, r0
	...

08012360 <_strtod_l>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	461f      	mov	r7, r3
 8012366:	b0a1      	sub	sp, #132	; 0x84
 8012368:	2300      	movs	r3, #0
 801236a:	4681      	mov	r9, r0
 801236c:	4638      	mov	r0, r7
 801236e:	460e      	mov	r6, r1
 8012370:	9217      	str	r2, [sp, #92]	; 0x5c
 8012372:	931c      	str	r3, [sp, #112]	; 0x70
 8012374:	f002 fa4f 	bl	8014816 <__localeconv_l>
 8012378:	4680      	mov	r8, r0
 801237a:	6800      	ldr	r0, [r0, #0]
 801237c:	f7f5 fe60 	bl	8008040 <strlen>
 8012380:	f04f 0a00 	mov.w	sl, #0
 8012384:	4604      	mov	r4, r0
 8012386:	f04f 0b00 	mov.w	fp, #0
 801238a:	961b      	str	r6, [sp, #108]	; 0x6c
 801238c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801238e:	781a      	ldrb	r2, [r3, #0]
 8012390:	2a0d      	cmp	r2, #13
 8012392:	d832      	bhi.n	80123fa <_strtod_l+0x9a>
 8012394:	2a09      	cmp	r2, #9
 8012396:	d236      	bcs.n	8012406 <_strtod_l+0xa6>
 8012398:	2a00      	cmp	r2, #0
 801239a:	d03e      	beq.n	801241a <_strtod_l+0xba>
 801239c:	2300      	movs	r3, #0
 801239e:	930d      	str	r3, [sp, #52]	; 0x34
 80123a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80123a2:	782b      	ldrb	r3, [r5, #0]
 80123a4:	2b30      	cmp	r3, #48	; 0x30
 80123a6:	f040 80ac 	bne.w	8012502 <_strtod_l+0x1a2>
 80123aa:	786b      	ldrb	r3, [r5, #1]
 80123ac:	2b58      	cmp	r3, #88	; 0x58
 80123ae:	d001      	beq.n	80123b4 <_strtod_l+0x54>
 80123b0:	2b78      	cmp	r3, #120	; 0x78
 80123b2:	d167      	bne.n	8012484 <_strtod_l+0x124>
 80123b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b6:	9301      	str	r3, [sp, #4]
 80123b8:	ab1c      	add	r3, sp, #112	; 0x70
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	9702      	str	r7, [sp, #8]
 80123be:	ab1d      	add	r3, sp, #116	; 0x74
 80123c0:	4a88      	ldr	r2, [pc, #544]	; (80125e4 <_strtod_l+0x284>)
 80123c2:	a91b      	add	r1, sp, #108	; 0x6c
 80123c4:	4648      	mov	r0, r9
 80123c6:	f001 ff4c 	bl	8014262 <__gethex>
 80123ca:	f010 0407 	ands.w	r4, r0, #7
 80123ce:	4606      	mov	r6, r0
 80123d0:	d005      	beq.n	80123de <_strtod_l+0x7e>
 80123d2:	2c06      	cmp	r4, #6
 80123d4:	d12b      	bne.n	801242e <_strtod_l+0xce>
 80123d6:	3501      	adds	r5, #1
 80123d8:	2300      	movs	r3, #0
 80123da:	951b      	str	r5, [sp, #108]	; 0x6c
 80123dc:	930d      	str	r3, [sp, #52]	; 0x34
 80123de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f040 859a 	bne.w	8012f1a <_strtod_l+0xbba>
 80123e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123e8:	b1e3      	cbz	r3, 8012424 <_strtod_l+0xc4>
 80123ea:	4652      	mov	r2, sl
 80123ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80123f0:	ec43 2b10 	vmov	d0, r2, r3
 80123f4:	b021      	add	sp, #132	; 0x84
 80123f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fa:	2a2b      	cmp	r2, #43	; 0x2b
 80123fc:	d015      	beq.n	801242a <_strtod_l+0xca>
 80123fe:	2a2d      	cmp	r2, #45	; 0x2d
 8012400:	d004      	beq.n	801240c <_strtod_l+0xac>
 8012402:	2a20      	cmp	r2, #32
 8012404:	d1ca      	bne.n	801239c <_strtod_l+0x3c>
 8012406:	3301      	adds	r3, #1
 8012408:	931b      	str	r3, [sp, #108]	; 0x6c
 801240a:	e7bf      	b.n	801238c <_strtod_l+0x2c>
 801240c:	2201      	movs	r2, #1
 801240e:	920d      	str	r2, [sp, #52]	; 0x34
 8012410:	1c5a      	adds	r2, r3, #1
 8012412:	921b      	str	r2, [sp, #108]	; 0x6c
 8012414:	785b      	ldrb	r3, [r3, #1]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d1c2      	bne.n	80123a0 <_strtod_l+0x40>
 801241a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801241c:	961b      	str	r6, [sp, #108]	; 0x6c
 801241e:	2b00      	cmp	r3, #0
 8012420:	f040 8579 	bne.w	8012f16 <_strtod_l+0xbb6>
 8012424:	4652      	mov	r2, sl
 8012426:	465b      	mov	r3, fp
 8012428:	e7e2      	b.n	80123f0 <_strtod_l+0x90>
 801242a:	2200      	movs	r2, #0
 801242c:	e7ef      	b.n	801240e <_strtod_l+0xae>
 801242e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012430:	b13a      	cbz	r2, 8012442 <_strtod_l+0xe2>
 8012432:	2135      	movs	r1, #53	; 0x35
 8012434:	a81e      	add	r0, sp, #120	; 0x78
 8012436:	f002 fe41 	bl	80150bc <__copybits>
 801243a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801243c:	4648      	mov	r0, r9
 801243e:	f002 faad 	bl	801499c <_Bfree>
 8012442:	3c01      	subs	r4, #1
 8012444:	2c04      	cmp	r4, #4
 8012446:	d806      	bhi.n	8012456 <_strtod_l+0xf6>
 8012448:	e8df f004 	tbb	[pc, r4]
 801244c:	1714030a 	.word	0x1714030a
 8012450:	0a          	.byte	0x0a
 8012451:	00          	.byte	0x00
 8012452:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012456:	0730      	lsls	r0, r6, #28
 8012458:	d5c1      	bpl.n	80123de <_strtod_l+0x7e>
 801245a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801245e:	e7be      	b.n	80123de <_strtod_l+0x7e>
 8012460:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012464:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012466:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801246a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801246e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012472:	e7f0      	b.n	8012456 <_strtod_l+0xf6>
 8012474:	f8df b170 	ldr.w	fp, [pc, #368]	; 80125e8 <_strtod_l+0x288>
 8012478:	e7ed      	b.n	8012456 <_strtod_l+0xf6>
 801247a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801247e:	f04f 3aff 	mov.w	sl, #4294967295
 8012482:	e7e8      	b.n	8012456 <_strtod_l+0xf6>
 8012484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012486:	1c5a      	adds	r2, r3, #1
 8012488:	921b      	str	r2, [sp, #108]	; 0x6c
 801248a:	785b      	ldrb	r3, [r3, #1]
 801248c:	2b30      	cmp	r3, #48	; 0x30
 801248e:	d0f9      	beq.n	8012484 <_strtod_l+0x124>
 8012490:	2b00      	cmp	r3, #0
 8012492:	d0a4      	beq.n	80123de <_strtod_l+0x7e>
 8012494:	2301      	movs	r3, #1
 8012496:	2500      	movs	r5, #0
 8012498:	9306      	str	r3, [sp, #24]
 801249a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801249c:	9308      	str	r3, [sp, #32]
 801249e:	9507      	str	r5, [sp, #28]
 80124a0:	9505      	str	r5, [sp, #20]
 80124a2:	220a      	movs	r2, #10
 80124a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80124a6:	7807      	ldrb	r7, [r0, #0]
 80124a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80124ac:	b2d9      	uxtb	r1, r3
 80124ae:	2909      	cmp	r1, #9
 80124b0:	d929      	bls.n	8012506 <_strtod_l+0x1a6>
 80124b2:	4622      	mov	r2, r4
 80124b4:	f8d8 1000 	ldr.w	r1, [r8]
 80124b8:	f003 f9d7 	bl	801586a <strncmp>
 80124bc:	2800      	cmp	r0, #0
 80124be:	d031      	beq.n	8012524 <_strtod_l+0x1c4>
 80124c0:	2000      	movs	r0, #0
 80124c2:	9c05      	ldr	r4, [sp, #20]
 80124c4:	9004      	str	r0, [sp, #16]
 80124c6:	463b      	mov	r3, r7
 80124c8:	4602      	mov	r2, r0
 80124ca:	2b65      	cmp	r3, #101	; 0x65
 80124cc:	d001      	beq.n	80124d2 <_strtod_l+0x172>
 80124ce:	2b45      	cmp	r3, #69	; 0x45
 80124d0:	d114      	bne.n	80124fc <_strtod_l+0x19c>
 80124d2:	b924      	cbnz	r4, 80124de <_strtod_l+0x17e>
 80124d4:	b910      	cbnz	r0, 80124dc <_strtod_l+0x17c>
 80124d6:	9b06      	ldr	r3, [sp, #24]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d09e      	beq.n	801241a <_strtod_l+0xba>
 80124dc:	2400      	movs	r4, #0
 80124de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80124e0:	1c73      	adds	r3, r6, #1
 80124e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80124e4:	7873      	ldrb	r3, [r6, #1]
 80124e6:	2b2b      	cmp	r3, #43	; 0x2b
 80124e8:	d078      	beq.n	80125dc <_strtod_l+0x27c>
 80124ea:	2b2d      	cmp	r3, #45	; 0x2d
 80124ec:	d070      	beq.n	80125d0 <_strtod_l+0x270>
 80124ee:	f04f 0c00 	mov.w	ip, #0
 80124f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80124f6:	2f09      	cmp	r7, #9
 80124f8:	d97c      	bls.n	80125f4 <_strtod_l+0x294>
 80124fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80124fc:	f04f 0e00 	mov.w	lr, #0
 8012500:	e09a      	b.n	8012638 <_strtod_l+0x2d8>
 8012502:	2300      	movs	r3, #0
 8012504:	e7c7      	b.n	8012496 <_strtod_l+0x136>
 8012506:	9905      	ldr	r1, [sp, #20]
 8012508:	2908      	cmp	r1, #8
 801250a:	bfdd      	ittte	le
 801250c:	9907      	ldrle	r1, [sp, #28]
 801250e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012512:	9307      	strle	r3, [sp, #28]
 8012514:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012518:	9b05      	ldr	r3, [sp, #20]
 801251a:	3001      	adds	r0, #1
 801251c:	3301      	adds	r3, #1
 801251e:	9305      	str	r3, [sp, #20]
 8012520:	901b      	str	r0, [sp, #108]	; 0x6c
 8012522:	e7bf      	b.n	80124a4 <_strtod_l+0x144>
 8012524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012526:	191a      	adds	r2, r3, r4
 8012528:	921b      	str	r2, [sp, #108]	; 0x6c
 801252a:	9a05      	ldr	r2, [sp, #20]
 801252c:	5d1b      	ldrb	r3, [r3, r4]
 801252e:	2a00      	cmp	r2, #0
 8012530:	d037      	beq.n	80125a2 <_strtod_l+0x242>
 8012532:	9c05      	ldr	r4, [sp, #20]
 8012534:	4602      	mov	r2, r0
 8012536:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801253a:	2909      	cmp	r1, #9
 801253c:	d913      	bls.n	8012566 <_strtod_l+0x206>
 801253e:	2101      	movs	r1, #1
 8012540:	9104      	str	r1, [sp, #16]
 8012542:	e7c2      	b.n	80124ca <_strtod_l+0x16a>
 8012544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012546:	1c5a      	adds	r2, r3, #1
 8012548:	921b      	str	r2, [sp, #108]	; 0x6c
 801254a:	785b      	ldrb	r3, [r3, #1]
 801254c:	3001      	adds	r0, #1
 801254e:	2b30      	cmp	r3, #48	; 0x30
 8012550:	d0f8      	beq.n	8012544 <_strtod_l+0x1e4>
 8012552:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012556:	2a08      	cmp	r2, #8
 8012558:	f200 84e4 	bhi.w	8012f24 <_strtod_l+0xbc4>
 801255c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801255e:	9208      	str	r2, [sp, #32]
 8012560:	4602      	mov	r2, r0
 8012562:	2000      	movs	r0, #0
 8012564:	4604      	mov	r4, r0
 8012566:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801256a:	f100 0101 	add.w	r1, r0, #1
 801256e:	d012      	beq.n	8012596 <_strtod_l+0x236>
 8012570:	440a      	add	r2, r1
 8012572:	eb00 0c04 	add.w	ip, r0, r4
 8012576:	4621      	mov	r1, r4
 8012578:	270a      	movs	r7, #10
 801257a:	458c      	cmp	ip, r1
 801257c:	d113      	bne.n	80125a6 <_strtod_l+0x246>
 801257e:	1821      	adds	r1, r4, r0
 8012580:	2908      	cmp	r1, #8
 8012582:	f104 0401 	add.w	r4, r4, #1
 8012586:	4404      	add	r4, r0
 8012588:	dc19      	bgt.n	80125be <_strtod_l+0x25e>
 801258a:	9b07      	ldr	r3, [sp, #28]
 801258c:	210a      	movs	r1, #10
 801258e:	fb01 e303 	mla	r3, r1, r3, lr
 8012592:	9307      	str	r3, [sp, #28]
 8012594:	2100      	movs	r1, #0
 8012596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012598:	1c58      	adds	r0, r3, #1
 801259a:	901b      	str	r0, [sp, #108]	; 0x6c
 801259c:	785b      	ldrb	r3, [r3, #1]
 801259e:	4608      	mov	r0, r1
 80125a0:	e7c9      	b.n	8012536 <_strtod_l+0x1d6>
 80125a2:	9805      	ldr	r0, [sp, #20]
 80125a4:	e7d3      	b.n	801254e <_strtod_l+0x1ee>
 80125a6:	2908      	cmp	r1, #8
 80125a8:	f101 0101 	add.w	r1, r1, #1
 80125ac:	dc03      	bgt.n	80125b6 <_strtod_l+0x256>
 80125ae:	9b07      	ldr	r3, [sp, #28]
 80125b0:	437b      	muls	r3, r7
 80125b2:	9307      	str	r3, [sp, #28]
 80125b4:	e7e1      	b.n	801257a <_strtod_l+0x21a>
 80125b6:	2910      	cmp	r1, #16
 80125b8:	bfd8      	it	le
 80125ba:	437d      	mulle	r5, r7
 80125bc:	e7dd      	b.n	801257a <_strtod_l+0x21a>
 80125be:	2c10      	cmp	r4, #16
 80125c0:	bfdc      	itt	le
 80125c2:	210a      	movle	r1, #10
 80125c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80125c8:	e7e4      	b.n	8012594 <_strtod_l+0x234>
 80125ca:	2301      	movs	r3, #1
 80125cc:	9304      	str	r3, [sp, #16]
 80125ce:	e781      	b.n	80124d4 <_strtod_l+0x174>
 80125d0:	f04f 0c01 	mov.w	ip, #1
 80125d4:	1cb3      	adds	r3, r6, #2
 80125d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80125d8:	78b3      	ldrb	r3, [r6, #2]
 80125da:	e78a      	b.n	80124f2 <_strtod_l+0x192>
 80125dc:	f04f 0c00 	mov.w	ip, #0
 80125e0:	e7f8      	b.n	80125d4 <_strtod_l+0x274>
 80125e2:	bf00      	nop
 80125e4:	08015bc8 	.word	0x08015bc8
 80125e8:	7ff00000 	.word	0x7ff00000
 80125ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80125ee:	1c5f      	adds	r7, r3, #1
 80125f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80125f2:	785b      	ldrb	r3, [r3, #1]
 80125f4:	2b30      	cmp	r3, #48	; 0x30
 80125f6:	d0f9      	beq.n	80125ec <_strtod_l+0x28c>
 80125f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80125fc:	2f08      	cmp	r7, #8
 80125fe:	f63f af7d 	bhi.w	80124fc <_strtod_l+0x19c>
 8012602:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012608:	930a      	str	r3, [sp, #40]	; 0x28
 801260a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801260c:	1c5f      	adds	r7, r3, #1
 801260e:	971b      	str	r7, [sp, #108]	; 0x6c
 8012610:	785b      	ldrb	r3, [r3, #1]
 8012612:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012616:	f1b8 0f09 	cmp.w	r8, #9
 801261a:	d937      	bls.n	801268c <_strtod_l+0x32c>
 801261c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801261e:	1a7f      	subs	r7, r7, r1
 8012620:	2f08      	cmp	r7, #8
 8012622:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012626:	dc37      	bgt.n	8012698 <_strtod_l+0x338>
 8012628:	45be      	cmp	lr, r7
 801262a:	bfa8      	it	ge
 801262c:	46be      	movge	lr, r7
 801262e:	f1bc 0f00 	cmp.w	ip, #0
 8012632:	d001      	beq.n	8012638 <_strtod_l+0x2d8>
 8012634:	f1ce 0e00 	rsb	lr, lr, #0
 8012638:	2c00      	cmp	r4, #0
 801263a:	d151      	bne.n	80126e0 <_strtod_l+0x380>
 801263c:	2800      	cmp	r0, #0
 801263e:	f47f aece 	bne.w	80123de <_strtod_l+0x7e>
 8012642:	9a06      	ldr	r2, [sp, #24]
 8012644:	2a00      	cmp	r2, #0
 8012646:	f47f aeca 	bne.w	80123de <_strtod_l+0x7e>
 801264a:	9a04      	ldr	r2, [sp, #16]
 801264c:	2a00      	cmp	r2, #0
 801264e:	f47f aee4 	bne.w	801241a <_strtod_l+0xba>
 8012652:	2b4e      	cmp	r3, #78	; 0x4e
 8012654:	d027      	beq.n	80126a6 <_strtod_l+0x346>
 8012656:	dc21      	bgt.n	801269c <_strtod_l+0x33c>
 8012658:	2b49      	cmp	r3, #73	; 0x49
 801265a:	f47f aede 	bne.w	801241a <_strtod_l+0xba>
 801265e:	49a0      	ldr	r1, [pc, #640]	; (80128e0 <_strtod_l+0x580>)
 8012660:	a81b      	add	r0, sp, #108	; 0x6c
 8012662:	f002 f831 	bl	80146c8 <__match>
 8012666:	2800      	cmp	r0, #0
 8012668:	f43f aed7 	beq.w	801241a <_strtod_l+0xba>
 801266c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801266e:	499d      	ldr	r1, [pc, #628]	; (80128e4 <_strtod_l+0x584>)
 8012670:	3b01      	subs	r3, #1
 8012672:	a81b      	add	r0, sp, #108	; 0x6c
 8012674:	931b      	str	r3, [sp, #108]	; 0x6c
 8012676:	f002 f827 	bl	80146c8 <__match>
 801267a:	b910      	cbnz	r0, 8012682 <_strtod_l+0x322>
 801267c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801267e:	3301      	adds	r3, #1
 8012680:	931b      	str	r3, [sp, #108]	; 0x6c
 8012682:	f8df b274 	ldr.w	fp, [pc, #628]	; 80128f8 <_strtod_l+0x598>
 8012686:	f04f 0a00 	mov.w	sl, #0
 801268a:	e6a8      	b.n	80123de <_strtod_l+0x7e>
 801268c:	210a      	movs	r1, #10
 801268e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012692:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012696:	e7b8      	b.n	801260a <_strtod_l+0x2aa>
 8012698:	46be      	mov	lr, r7
 801269a:	e7c8      	b.n	801262e <_strtod_l+0x2ce>
 801269c:	2b69      	cmp	r3, #105	; 0x69
 801269e:	d0de      	beq.n	801265e <_strtod_l+0x2fe>
 80126a0:	2b6e      	cmp	r3, #110	; 0x6e
 80126a2:	f47f aeba 	bne.w	801241a <_strtod_l+0xba>
 80126a6:	4990      	ldr	r1, [pc, #576]	; (80128e8 <_strtod_l+0x588>)
 80126a8:	a81b      	add	r0, sp, #108	; 0x6c
 80126aa:	f002 f80d 	bl	80146c8 <__match>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	f43f aeb3 	beq.w	801241a <_strtod_l+0xba>
 80126b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b28      	cmp	r3, #40	; 0x28
 80126ba:	d10e      	bne.n	80126da <_strtod_l+0x37a>
 80126bc:	aa1e      	add	r2, sp, #120	; 0x78
 80126be:	498b      	ldr	r1, [pc, #556]	; (80128ec <_strtod_l+0x58c>)
 80126c0:	a81b      	add	r0, sp, #108	; 0x6c
 80126c2:	f002 f815 	bl	80146f0 <__hexnan>
 80126c6:	2805      	cmp	r0, #5
 80126c8:	d107      	bne.n	80126da <_strtod_l+0x37a>
 80126ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80126cc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80126d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80126d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80126d8:	e681      	b.n	80123de <_strtod_l+0x7e>
 80126da:	f8df b224 	ldr.w	fp, [pc, #548]	; 8012900 <_strtod_l+0x5a0>
 80126de:	e7d2      	b.n	8012686 <_strtod_l+0x326>
 80126e0:	ebae 0302 	sub.w	r3, lr, r2
 80126e4:	9306      	str	r3, [sp, #24]
 80126e6:	9b05      	ldr	r3, [sp, #20]
 80126e8:	9807      	ldr	r0, [sp, #28]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	bf08      	it	eq
 80126ee:	4623      	moveq	r3, r4
 80126f0:	2c10      	cmp	r4, #16
 80126f2:	9305      	str	r3, [sp, #20]
 80126f4:	46a0      	mov	r8, r4
 80126f6:	bfa8      	it	ge
 80126f8:	f04f 0810 	movge.w	r8, #16
 80126fc:	f7f5 fe3a 	bl	8008374 <__aeabi_ui2d>
 8012700:	2c09      	cmp	r4, #9
 8012702:	4682      	mov	sl, r0
 8012704:	468b      	mov	fp, r1
 8012706:	dc13      	bgt.n	8012730 <_strtod_l+0x3d0>
 8012708:	9b06      	ldr	r3, [sp, #24]
 801270a:	2b00      	cmp	r3, #0
 801270c:	f43f ae67 	beq.w	80123de <_strtod_l+0x7e>
 8012710:	9b06      	ldr	r3, [sp, #24]
 8012712:	dd7a      	ble.n	801280a <_strtod_l+0x4aa>
 8012714:	2b16      	cmp	r3, #22
 8012716:	dc61      	bgt.n	80127dc <_strtod_l+0x47c>
 8012718:	4a75      	ldr	r2, [pc, #468]	; (80128f0 <_strtod_l+0x590>)
 801271a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801271e:	e9de 0100 	ldrd	r0, r1, [lr]
 8012722:	4652      	mov	r2, sl
 8012724:	465b      	mov	r3, fp
 8012726:	f7f5 fe9f 	bl	8008468 <__aeabi_dmul>
 801272a:	4682      	mov	sl, r0
 801272c:	468b      	mov	fp, r1
 801272e:	e656      	b.n	80123de <_strtod_l+0x7e>
 8012730:	4b6f      	ldr	r3, [pc, #444]	; (80128f0 <_strtod_l+0x590>)
 8012732:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012736:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801273a:	f7f5 fe95 	bl	8008468 <__aeabi_dmul>
 801273e:	4606      	mov	r6, r0
 8012740:	4628      	mov	r0, r5
 8012742:	460f      	mov	r7, r1
 8012744:	f7f5 fe16 	bl	8008374 <__aeabi_ui2d>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	4630      	mov	r0, r6
 801274e:	4639      	mov	r1, r7
 8012750:	f7f5 fcd4 	bl	80080fc <__adddf3>
 8012754:	2c0f      	cmp	r4, #15
 8012756:	4682      	mov	sl, r0
 8012758:	468b      	mov	fp, r1
 801275a:	ddd5      	ble.n	8012708 <_strtod_l+0x3a8>
 801275c:	9b06      	ldr	r3, [sp, #24]
 801275e:	eba4 0808 	sub.w	r8, r4, r8
 8012762:	4498      	add	r8, r3
 8012764:	f1b8 0f00 	cmp.w	r8, #0
 8012768:	f340 8096 	ble.w	8012898 <_strtod_l+0x538>
 801276c:	f018 030f 	ands.w	r3, r8, #15
 8012770:	d00a      	beq.n	8012788 <_strtod_l+0x428>
 8012772:	495f      	ldr	r1, [pc, #380]	; (80128f0 <_strtod_l+0x590>)
 8012774:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012778:	4652      	mov	r2, sl
 801277a:	465b      	mov	r3, fp
 801277c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012780:	f7f5 fe72 	bl	8008468 <__aeabi_dmul>
 8012784:	4682      	mov	sl, r0
 8012786:	468b      	mov	fp, r1
 8012788:	f038 080f 	bics.w	r8, r8, #15
 801278c:	d073      	beq.n	8012876 <_strtod_l+0x516>
 801278e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012792:	dd47      	ble.n	8012824 <_strtod_l+0x4c4>
 8012794:	2400      	movs	r4, #0
 8012796:	46a0      	mov	r8, r4
 8012798:	9407      	str	r4, [sp, #28]
 801279a:	9405      	str	r4, [sp, #20]
 801279c:	2322      	movs	r3, #34	; 0x22
 801279e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80128f8 <_strtod_l+0x598>
 80127a2:	f8c9 3000 	str.w	r3, [r9]
 80127a6:	f04f 0a00 	mov.w	sl, #0
 80127aa:	9b07      	ldr	r3, [sp, #28]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f43f ae16 	beq.w	80123de <_strtod_l+0x7e>
 80127b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80127b4:	4648      	mov	r0, r9
 80127b6:	f002 f8f1 	bl	801499c <_Bfree>
 80127ba:	9905      	ldr	r1, [sp, #20]
 80127bc:	4648      	mov	r0, r9
 80127be:	f002 f8ed 	bl	801499c <_Bfree>
 80127c2:	4641      	mov	r1, r8
 80127c4:	4648      	mov	r0, r9
 80127c6:	f002 f8e9 	bl	801499c <_Bfree>
 80127ca:	9907      	ldr	r1, [sp, #28]
 80127cc:	4648      	mov	r0, r9
 80127ce:	f002 f8e5 	bl	801499c <_Bfree>
 80127d2:	4621      	mov	r1, r4
 80127d4:	4648      	mov	r0, r9
 80127d6:	f002 f8e1 	bl	801499c <_Bfree>
 80127da:	e600      	b.n	80123de <_strtod_l+0x7e>
 80127dc:	9a06      	ldr	r2, [sp, #24]
 80127de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80127e2:	4293      	cmp	r3, r2
 80127e4:	dbba      	blt.n	801275c <_strtod_l+0x3fc>
 80127e6:	4d42      	ldr	r5, [pc, #264]	; (80128f0 <_strtod_l+0x590>)
 80127e8:	f1c4 040f 	rsb	r4, r4, #15
 80127ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80127f0:	4652      	mov	r2, sl
 80127f2:	465b      	mov	r3, fp
 80127f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127f8:	f7f5 fe36 	bl	8008468 <__aeabi_dmul>
 80127fc:	9b06      	ldr	r3, [sp, #24]
 80127fe:	1b1c      	subs	r4, r3, r4
 8012800:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012804:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012808:	e78d      	b.n	8012726 <_strtod_l+0x3c6>
 801280a:	f113 0f16 	cmn.w	r3, #22
 801280e:	dba5      	blt.n	801275c <_strtod_l+0x3fc>
 8012810:	4a37      	ldr	r2, [pc, #220]	; (80128f0 <_strtod_l+0x590>)
 8012812:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012816:	e9d2 2300 	ldrd	r2, r3, [r2]
 801281a:	4650      	mov	r0, sl
 801281c:	4659      	mov	r1, fp
 801281e:	f7f5 ff4d 	bl	80086bc <__aeabi_ddiv>
 8012822:	e782      	b.n	801272a <_strtod_l+0x3ca>
 8012824:	2300      	movs	r3, #0
 8012826:	4e33      	ldr	r6, [pc, #204]	; (80128f4 <_strtod_l+0x594>)
 8012828:	ea4f 1828 	mov.w	r8, r8, asr #4
 801282c:	4650      	mov	r0, sl
 801282e:	4659      	mov	r1, fp
 8012830:	461d      	mov	r5, r3
 8012832:	f1b8 0f01 	cmp.w	r8, #1
 8012836:	dc21      	bgt.n	801287c <_strtod_l+0x51c>
 8012838:	b10b      	cbz	r3, 801283e <_strtod_l+0x4de>
 801283a:	4682      	mov	sl, r0
 801283c:	468b      	mov	fp, r1
 801283e:	4b2d      	ldr	r3, [pc, #180]	; (80128f4 <_strtod_l+0x594>)
 8012840:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012844:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012848:	4652      	mov	r2, sl
 801284a:	465b      	mov	r3, fp
 801284c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012850:	f7f5 fe0a 	bl	8008468 <__aeabi_dmul>
 8012854:	4b28      	ldr	r3, [pc, #160]	; (80128f8 <_strtod_l+0x598>)
 8012856:	460a      	mov	r2, r1
 8012858:	400b      	ands	r3, r1
 801285a:	4928      	ldr	r1, [pc, #160]	; (80128fc <_strtod_l+0x59c>)
 801285c:	428b      	cmp	r3, r1
 801285e:	4682      	mov	sl, r0
 8012860:	d898      	bhi.n	8012794 <_strtod_l+0x434>
 8012862:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012866:	428b      	cmp	r3, r1
 8012868:	bf86      	itte	hi
 801286a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012904 <_strtod_l+0x5a4>
 801286e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012872:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012876:	2300      	movs	r3, #0
 8012878:	9304      	str	r3, [sp, #16]
 801287a:	e077      	b.n	801296c <_strtod_l+0x60c>
 801287c:	f018 0f01 	tst.w	r8, #1
 8012880:	d006      	beq.n	8012890 <_strtod_l+0x530>
 8012882:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	f7f5 fded 	bl	8008468 <__aeabi_dmul>
 801288e:	2301      	movs	r3, #1
 8012890:	3501      	adds	r5, #1
 8012892:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012896:	e7cc      	b.n	8012832 <_strtod_l+0x4d2>
 8012898:	d0ed      	beq.n	8012876 <_strtod_l+0x516>
 801289a:	f1c8 0800 	rsb	r8, r8, #0
 801289e:	f018 020f 	ands.w	r2, r8, #15
 80128a2:	d00a      	beq.n	80128ba <_strtod_l+0x55a>
 80128a4:	4b12      	ldr	r3, [pc, #72]	; (80128f0 <_strtod_l+0x590>)
 80128a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128aa:	4650      	mov	r0, sl
 80128ac:	4659      	mov	r1, fp
 80128ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b2:	f7f5 ff03 	bl	80086bc <__aeabi_ddiv>
 80128b6:	4682      	mov	sl, r0
 80128b8:	468b      	mov	fp, r1
 80128ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80128be:	d0da      	beq.n	8012876 <_strtod_l+0x516>
 80128c0:	f1b8 0f1f 	cmp.w	r8, #31
 80128c4:	dd20      	ble.n	8012908 <_strtod_l+0x5a8>
 80128c6:	2400      	movs	r4, #0
 80128c8:	46a0      	mov	r8, r4
 80128ca:	9407      	str	r4, [sp, #28]
 80128cc:	9405      	str	r4, [sp, #20]
 80128ce:	2322      	movs	r3, #34	; 0x22
 80128d0:	f04f 0a00 	mov.w	sl, #0
 80128d4:	f04f 0b00 	mov.w	fp, #0
 80128d8:	f8c9 3000 	str.w	r3, [r9]
 80128dc:	e765      	b.n	80127aa <_strtod_l+0x44a>
 80128de:	bf00      	nop
 80128e0:	08015b91 	.word	0x08015b91
 80128e4:	08015c1b 	.word	0x08015c1b
 80128e8:	08015b99 	.word	0x08015b99
 80128ec:	08015bdc 	.word	0x08015bdc
 80128f0:	08015cc0 	.word	0x08015cc0
 80128f4:	08015c98 	.word	0x08015c98
 80128f8:	7ff00000 	.word	0x7ff00000
 80128fc:	7ca00000 	.word	0x7ca00000
 8012900:	fff80000 	.word	0xfff80000
 8012904:	7fefffff 	.word	0x7fefffff
 8012908:	f018 0310 	ands.w	r3, r8, #16
 801290c:	bf18      	it	ne
 801290e:	236a      	movne	r3, #106	; 0x6a
 8012910:	4da0      	ldr	r5, [pc, #640]	; (8012b94 <_strtod_l+0x834>)
 8012912:	9304      	str	r3, [sp, #16]
 8012914:	4650      	mov	r0, sl
 8012916:	4659      	mov	r1, fp
 8012918:	2300      	movs	r3, #0
 801291a:	f1b8 0f00 	cmp.w	r8, #0
 801291e:	f300 810a 	bgt.w	8012b36 <_strtod_l+0x7d6>
 8012922:	b10b      	cbz	r3, 8012928 <_strtod_l+0x5c8>
 8012924:	4682      	mov	sl, r0
 8012926:	468b      	mov	fp, r1
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	b1bb      	cbz	r3, 801295c <_strtod_l+0x5fc>
 801292c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012930:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012934:	2b00      	cmp	r3, #0
 8012936:	4659      	mov	r1, fp
 8012938:	dd10      	ble.n	801295c <_strtod_l+0x5fc>
 801293a:	2b1f      	cmp	r3, #31
 801293c:	f340 8107 	ble.w	8012b4e <_strtod_l+0x7ee>
 8012940:	2b34      	cmp	r3, #52	; 0x34
 8012942:	bfde      	ittt	le
 8012944:	3b20      	suble	r3, #32
 8012946:	f04f 32ff 	movle.w	r2, #4294967295
 801294a:	fa02 f303 	lslle.w	r3, r2, r3
 801294e:	f04f 0a00 	mov.w	sl, #0
 8012952:	bfcc      	ite	gt
 8012954:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012958:	ea03 0b01 	andle.w	fp, r3, r1
 801295c:	2200      	movs	r2, #0
 801295e:	2300      	movs	r3, #0
 8012960:	4650      	mov	r0, sl
 8012962:	4659      	mov	r1, fp
 8012964:	f7f5 ffe8 	bl	8008938 <__aeabi_dcmpeq>
 8012968:	2800      	cmp	r0, #0
 801296a:	d1ac      	bne.n	80128c6 <_strtod_l+0x566>
 801296c:	9b07      	ldr	r3, [sp, #28]
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	9a05      	ldr	r2, [sp, #20]
 8012972:	9908      	ldr	r1, [sp, #32]
 8012974:	4623      	mov	r3, r4
 8012976:	4648      	mov	r0, r9
 8012978:	f002 f862 	bl	8014a40 <__s2b>
 801297c:	9007      	str	r0, [sp, #28]
 801297e:	2800      	cmp	r0, #0
 8012980:	f43f af08 	beq.w	8012794 <_strtod_l+0x434>
 8012984:	9a06      	ldr	r2, [sp, #24]
 8012986:	9b06      	ldr	r3, [sp, #24]
 8012988:	2a00      	cmp	r2, #0
 801298a:	f1c3 0300 	rsb	r3, r3, #0
 801298e:	bfa8      	it	ge
 8012990:	2300      	movge	r3, #0
 8012992:	930e      	str	r3, [sp, #56]	; 0x38
 8012994:	2400      	movs	r4, #0
 8012996:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801299a:	9316      	str	r3, [sp, #88]	; 0x58
 801299c:	46a0      	mov	r8, r4
 801299e:	9b07      	ldr	r3, [sp, #28]
 80129a0:	4648      	mov	r0, r9
 80129a2:	6859      	ldr	r1, [r3, #4]
 80129a4:	f001 ffc6 	bl	8014934 <_Balloc>
 80129a8:	9005      	str	r0, [sp, #20]
 80129aa:	2800      	cmp	r0, #0
 80129ac:	f43f aef6 	beq.w	801279c <_strtod_l+0x43c>
 80129b0:	9b07      	ldr	r3, [sp, #28]
 80129b2:	691a      	ldr	r2, [r3, #16]
 80129b4:	3202      	adds	r2, #2
 80129b6:	f103 010c 	add.w	r1, r3, #12
 80129ba:	0092      	lsls	r2, r2, #2
 80129bc:	300c      	adds	r0, #12
 80129be:	f7fe fdbd 	bl	801153c <memcpy>
 80129c2:	aa1e      	add	r2, sp, #120	; 0x78
 80129c4:	a91d      	add	r1, sp, #116	; 0x74
 80129c6:	ec4b ab10 	vmov	d0, sl, fp
 80129ca:	4648      	mov	r0, r9
 80129cc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80129d0:	f002 faf2 	bl	8014fb8 <__d2b>
 80129d4:	901c      	str	r0, [sp, #112]	; 0x70
 80129d6:	2800      	cmp	r0, #0
 80129d8:	f43f aee0 	beq.w	801279c <_strtod_l+0x43c>
 80129dc:	2101      	movs	r1, #1
 80129de:	4648      	mov	r0, r9
 80129e0:	f002 f8ba 	bl	8014b58 <__i2b>
 80129e4:	4680      	mov	r8, r0
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f43f aed8 	beq.w	801279c <_strtod_l+0x43c>
 80129ec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80129ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80129f0:	2e00      	cmp	r6, #0
 80129f2:	bfab      	itete	ge
 80129f4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80129f6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80129f8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80129fa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80129fc:	bfac      	ite	ge
 80129fe:	18f7      	addge	r7, r6, r3
 8012a00:	1b9d      	sublt	r5, r3, r6
 8012a02:	9b04      	ldr	r3, [sp, #16]
 8012a04:	1af6      	subs	r6, r6, r3
 8012a06:	4416      	add	r6, r2
 8012a08:	4b63      	ldr	r3, [pc, #396]	; (8012b98 <_strtod_l+0x838>)
 8012a0a:	3e01      	subs	r6, #1
 8012a0c:	429e      	cmp	r6, r3
 8012a0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012a12:	f280 80af 	bge.w	8012b74 <_strtod_l+0x814>
 8012a16:	1b9b      	subs	r3, r3, r6
 8012a18:	2b1f      	cmp	r3, #31
 8012a1a:	eba2 0203 	sub.w	r2, r2, r3
 8012a1e:	f04f 0101 	mov.w	r1, #1
 8012a22:	f300 809b 	bgt.w	8012b5c <_strtod_l+0x7fc>
 8012a26:	fa01 f303 	lsl.w	r3, r1, r3
 8012a2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8012a30:	18be      	adds	r6, r7, r2
 8012a32:	9b04      	ldr	r3, [sp, #16]
 8012a34:	42b7      	cmp	r7, r6
 8012a36:	4415      	add	r5, r2
 8012a38:	441d      	add	r5, r3
 8012a3a:	463b      	mov	r3, r7
 8012a3c:	bfa8      	it	ge
 8012a3e:	4633      	movge	r3, r6
 8012a40:	42ab      	cmp	r3, r5
 8012a42:	bfa8      	it	ge
 8012a44:	462b      	movge	r3, r5
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	bfc2      	ittt	gt
 8012a4a:	1af6      	subgt	r6, r6, r3
 8012a4c:	1aed      	subgt	r5, r5, r3
 8012a4e:	1aff      	subgt	r7, r7, r3
 8012a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a52:	b1bb      	cbz	r3, 8012a84 <_strtod_l+0x724>
 8012a54:	4641      	mov	r1, r8
 8012a56:	461a      	mov	r2, r3
 8012a58:	4648      	mov	r0, r9
 8012a5a:	f002 f91d 	bl	8014c98 <__pow5mult>
 8012a5e:	4680      	mov	r8, r0
 8012a60:	2800      	cmp	r0, #0
 8012a62:	f43f ae9b 	beq.w	801279c <_strtod_l+0x43c>
 8012a66:	4601      	mov	r1, r0
 8012a68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a6a:	4648      	mov	r0, r9
 8012a6c:	f002 f87d 	bl	8014b6a <__multiply>
 8012a70:	900c      	str	r0, [sp, #48]	; 0x30
 8012a72:	2800      	cmp	r0, #0
 8012a74:	f43f ae92 	beq.w	801279c <_strtod_l+0x43c>
 8012a78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012a7a:	4648      	mov	r0, r9
 8012a7c:	f001 ff8e 	bl	801499c <_Bfree>
 8012a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a82:	931c      	str	r3, [sp, #112]	; 0x70
 8012a84:	2e00      	cmp	r6, #0
 8012a86:	dc7a      	bgt.n	8012b7e <_strtod_l+0x81e>
 8012a88:	9b06      	ldr	r3, [sp, #24]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	dd08      	ble.n	8012aa0 <_strtod_l+0x740>
 8012a8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a90:	9905      	ldr	r1, [sp, #20]
 8012a92:	4648      	mov	r0, r9
 8012a94:	f002 f900 	bl	8014c98 <__pow5mult>
 8012a98:	9005      	str	r0, [sp, #20]
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	f43f ae7e 	beq.w	801279c <_strtod_l+0x43c>
 8012aa0:	2d00      	cmp	r5, #0
 8012aa2:	dd08      	ble.n	8012ab6 <_strtod_l+0x756>
 8012aa4:	462a      	mov	r2, r5
 8012aa6:	9905      	ldr	r1, [sp, #20]
 8012aa8:	4648      	mov	r0, r9
 8012aaa:	f002 f943 	bl	8014d34 <__lshift>
 8012aae:	9005      	str	r0, [sp, #20]
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	f43f ae73 	beq.w	801279c <_strtod_l+0x43c>
 8012ab6:	2f00      	cmp	r7, #0
 8012ab8:	dd08      	ble.n	8012acc <_strtod_l+0x76c>
 8012aba:	4641      	mov	r1, r8
 8012abc:	463a      	mov	r2, r7
 8012abe:	4648      	mov	r0, r9
 8012ac0:	f002 f938 	bl	8014d34 <__lshift>
 8012ac4:	4680      	mov	r8, r0
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	f43f ae68 	beq.w	801279c <_strtod_l+0x43c>
 8012acc:	9a05      	ldr	r2, [sp, #20]
 8012ace:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ad0:	4648      	mov	r0, r9
 8012ad2:	f002 f99d 	bl	8014e10 <__mdiff>
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	f43f ae5f 	beq.w	801279c <_strtod_l+0x43c>
 8012ade:	68c3      	ldr	r3, [r0, #12]
 8012ae0:	930c      	str	r3, [sp, #48]	; 0x30
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60c3      	str	r3, [r0, #12]
 8012ae6:	4641      	mov	r1, r8
 8012ae8:	f002 f978 	bl	8014ddc <__mcmp>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	da55      	bge.n	8012b9c <_strtod_l+0x83c>
 8012af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012af2:	b9e3      	cbnz	r3, 8012b2e <_strtod_l+0x7ce>
 8012af4:	f1ba 0f00 	cmp.w	sl, #0
 8012af8:	d119      	bne.n	8012b2e <_strtod_l+0x7ce>
 8012afa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012afe:	b9b3      	cbnz	r3, 8012b2e <_strtod_l+0x7ce>
 8012b00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012b04:	0d1b      	lsrs	r3, r3, #20
 8012b06:	051b      	lsls	r3, r3, #20
 8012b08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012b0c:	d90f      	bls.n	8012b2e <_strtod_l+0x7ce>
 8012b0e:	6963      	ldr	r3, [r4, #20]
 8012b10:	b913      	cbnz	r3, 8012b18 <_strtod_l+0x7b8>
 8012b12:	6923      	ldr	r3, [r4, #16]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	dd0a      	ble.n	8012b2e <_strtod_l+0x7ce>
 8012b18:	4621      	mov	r1, r4
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	4648      	mov	r0, r9
 8012b1e:	f002 f909 	bl	8014d34 <__lshift>
 8012b22:	4641      	mov	r1, r8
 8012b24:	4604      	mov	r4, r0
 8012b26:	f002 f959 	bl	8014ddc <__mcmp>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	dc67      	bgt.n	8012bfe <_strtod_l+0x89e>
 8012b2e:	9b04      	ldr	r3, [sp, #16]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d171      	bne.n	8012c18 <_strtod_l+0x8b8>
 8012b34:	e63d      	b.n	80127b2 <_strtod_l+0x452>
 8012b36:	f018 0f01 	tst.w	r8, #1
 8012b3a:	d004      	beq.n	8012b46 <_strtod_l+0x7e6>
 8012b3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b40:	f7f5 fc92 	bl	8008468 <__aeabi_dmul>
 8012b44:	2301      	movs	r3, #1
 8012b46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b4a:	3508      	adds	r5, #8
 8012b4c:	e6e5      	b.n	801291a <_strtod_l+0x5ba>
 8012b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b52:	fa02 f303 	lsl.w	r3, r2, r3
 8012b56:	ea03 0a0a 	and.w	sl, r3, sl
 8012b5a:	e6ff      	b.n	801295c <_strtod_l+0x5fc>
 8012b5c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012b60:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012b64:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012b68:	36e2      	adds	r6, #226	; 0xe2
 8012b6a:	fa01 f306 	lsl.w	r3, r1, r6
 8012b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8012b70:	910f      	str	r1, [sp, #60]	; 0x3c
 8012b72:	e75d      	b.n	8012a30 <_strtod_l+0x6d0>
 8012b74:	2300      	movs	r3, #0
 8012b76:	930a      	str	r3, [sp, #40]	; 0x28
 8012b78:	2301      	movs	r3, #1
 8012b7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b7c:	e758      	b.n	8012a30 <_strtod_l+0x6d0>
 8012b7e:	4632      	mov	r2, r6
 8012b80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012b82:	4648      	mov	r0, r9
 8012b84:	f002 f8d6 	bl	8014d34 <__lshift>
 8012b88:	901c      	str	r0, [sp, #112]	; 0x70
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	f47f af7c 	bne.w	8012a88 <_strtod_l+0x728>
 8012b90:	e604      	b.n	801279c <_strtod_l+0x43c>
 8012b92:	bf00      	nop
 8012b94:	08015bf0 	.word	0x08015bf0
 8012b98:	fffffc02 	.word	0xfffffc02
 8012b9c:	465d      	mov	r5, fp
 8012b9e:	f040 8086 	bne.w	8012cae <_strtod_l+0x94e>
 8012ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ba8:	b32a      	cbz	r2, 8012bf6 <_strtod_l+0x896>
 8012baa:	4aaf      	ldr	r2, [pc, #700]	; (8012e68 <_strtod_l+0xb08>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d153      	bne.n	8012c58 <_strtod_l+0x8f8>
 8012bb0:	9b04      	ldr	r3, [sp, #16]
 8012bb2:	4650      	mov	r0, sl
 8012bb4:	b1d3      	cbz	r3, 8012bec <_strtod_l+0x88c>
 8012bb6:	4aad      	ldr	r2, [pc, #692]	; (8012e6c <_strtod_l+0xb0c>)
 8012bb8:	402a      	ands	r2, r5
 8012bba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8012bc2:	d816      	bhi.n	8012bf2 <_strtod_l+0x892>
 8012bc4:	0d12      	lsrs	r2, r2, #20
 8012bc6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012bca:	fa01 f303 	lsl.w	r3, r1, r3
 8012bce:	4298      	cmp	r0, r3
 8012bd0:	d142      	bne.n	8012c58 <_strtod_l+0x8f8>
 8012bd2:	4ba7      	ldr	r3, [pc, #668]	; (8012e70 <_strtod_l+0xb10>)
 8012bd4:	429d      	cmp	r5, r3
 8012bd6:	d102      	bne.n	8012bde <_strtod_l+0x87e>
 8012bd8:	3001      	adds	r0, #1
 8012bda:	f43f addf 	beq.w	801279c <_strtod_l+0x43c>
 8012bde:	4ba3      	ldr	r3, [pc, #652]	; (8012e6c <_strtod_l+0xb0c>)
 8012be0:	402b      	ands	r3, r5
 8012be2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012be6:	f04f 0a00 	mov.w	sl, #0
 8012bea:	e7a0      	b.n	8012b2e <_strtod_l+0x7ce>
 8012bec:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf0:	e7ed      	b.n	8012bce <_strtod_l+0x86e>
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	e7eb      	b.n	8012bce <_strtod_l+0x86e>
 8012bf6:	bb7b      	cbnz	r3, 8012c58 <_strtod_l+0x8f8>
 8012bf8:	f1ba 0f00 	cmp.w	sl, #0
 8012bfc:	d12c      	bne.n	8012c58 <_strtod_l+0x8f8>
 8012bfe:	9904      	ldr	r1, [sp, #16]
 8012c00:	4a9a      	ldr	r2, [pc, #616]	; (8012e6c <_strtod_l+0xb0c>)
 8012c02:	465b      	mov	r3, fp
 8012c04:	b1f1      	cbz	r1, 8012c44 <_strtod_l+0x8e4>
 8012c06:	ea02 010b 	and.w	r1, r2, fp
 8012c0a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012c0e:	dc19      	bgt.n	8012c44 <_strtod_l+0x8e4>
 8012c10:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012c14:	f77f ae5b 	ble.w	80128ce <_strtod_l+0x56e>
 8012c18:	4a96      	ldr	r2, [pc, #600]	; (8012e74 <_strtod_l+0xb14>)
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012c20:	4650      	mov	r0, sl
 8012c22:	4659      	mov	r1, fp
 8012c24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012c28:	f7f5 fc1e 	bl	8008468 <__aeabi_dmul>
 8012c2c:	4682      	mov	sl, r0
 8012c2e:	468b      	mov	fp, r1
 8012c30:	2900      	cmp	r1, #0
 8012c32:	f47f adbe 	bne.w	80127b2 <_strtod_l+0x452>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	f47f adbb 	bne.w	80127b2 <_strtod_l+0x452>
 8012c3c:	2322      	movs	r3, #34	; 0x22
 8012c3e:	f8c9 3000 	str.w	r3, [r9]
 8012c42:	e5b6      	b.n	80127b2 <_strtod_l+0x452>
 8012c44:	4013      	ands	r3, r2
 8012c46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c4a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012c4e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012c52:	f04f 3aff 	mov.w	sl, #4294967295
 8012c56:	e76a      	b.n	8012b2e <_strtod_l+0x7ce>
 8012c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c5a:	b193      	cbz	r3, 8012c82 <_strtod_l+0x922>
 8012c5c:	422b      	tst	r3, r5
 8012c5e:	f43f af66 	beq.w	8012b2e <_strtod_l+0x7ce>
 8012c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c64:	9a04      	ldr	r2, [sp, #16]
 8012c66:	4650      	mov	r0, sl
 8012c68:	4659      	mov	r1, fp
 8012c6a:	b173      	cbz	r3, 8012c8a <_strtod_l+0x92a>
 8012c6c:	f7ff fb5a 	bl	8012324 <sulp>
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c78:	f7f5 fa40 	bl	80080fc <__adddf3>
 8012c7c:	4682      	mov	sl, r0
 8012c7e:	468b      	mov	fp, r1
 8012c80:	e755      	b.n	8012b2e <_strtod_l+0x7ce>
 8012c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c84:	ea13 0f0a 	tst.w	r3, sl
 8012c88:	e7e9      	b.n	8012c5e <_strtod_l+0x8fe>
 8012c8a:	f7ff fb4b 	bl	8012324 <sulp>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	460b      	mov	r3, r1
 8012c92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012c96:	f7f5 fa2f 	bl	80080f8 <__aeabi_dsub>
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	4682      	mov	sl, r0
 8012ca0:	468b      	mov	fp, r1
 8012ca2:	f7f5 fe49 	bl	8008938 <__aeabi_dcmpeq>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	f47f ae11 	bne.w	80128ce <_strtod_l+0x56e>
 8012cac:	e73f      	b.n	8012b2e <_strtod_l+0x7ce>
 8012cae:	4641      	mov	r1, r8
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f002 f9d0 	bl	8015056 <__ratio>
 8012cb6:	ec57 6b10 	vmov	r6, r7, d0
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012cc0:	ee10 0a10 	vmov	r0, s0
 8012cc4:	4639      	mov	r1, r7
 8012cc6:	f7f5 fe4b 	bl	8008960 <__aeabi_dcmple>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d077      	beq.n	8012dbe <_strtod_l+0xa5e>
 8012cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d04a      	beq.n	8012d6a <_strtod_l+0xa0a>
 8012cd4:	4b68      	ldr	r3, [pc, #416]	; (8012e78 <_strtod_l+0xb18>)
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012cdc:	4f66      	ldr	r7, [pc, #408]	; (8012e78 <_strtod_l+0xb18>)
 8012cde:	2600      	movs	r6, #0
 8012ce0:	4b62      	ldr	r3, [pc, #392]	; (8012e6c <_strtod_l+0xb0c>)
 8012ce2:	402b      	ands	r3, r5
 8012ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ce8:	4b64      	ldr	r3, [pc, #400]	; (8012e7c <_strtod_l+0xb1c>)
 8012cea:	429a      	cmp	r2, r3
 8012cec:	f040 80ce 	bne.w	8012e8c <_strtod_l+0xb2c>
 8012cf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012cf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012cf8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8012cfc:	ec4b ab10 	vmov	d0, sl, fp
 8012d00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012d04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012d08:	f002 f8e0 	bl	8014ecc <__ulp>
 8012d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d10:	ec53 2b10 	vmov	r2, r3, d0
 8012d14:	f7f5 fba8 	bl	8008468 <__aeabi_dmul>
 8012d18:	4652      	mov	r2, sl
 8012d1a:	465b      	mov	r3, fp
 8012d1c:	f7f5 f9ee 	bl	80080fc <__adddf3>
 8012d20:	460b      	mov	r3, r1
 8012d22:	4952      	ldr	r1, [pc, #328]	; (8012e6c <_strtod_l+0xb0c>)
 8012d24:	4a56      	ldr	r2, [pc, #344]	; (8012e80 <_strtod_l+0xb20>)
 8012d26:	4019      	ands	r1, r3
 8012d28:	4291      	cmp	r1, r2
 8012d2a:	4682      	mov	sl, r0
 8012d2c:	d95b      	bls.n	8012de6 <_strtod_l+0xa86>
 8012d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d30:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d103      	bne.n	8012d40 <_strtod_l+0x9e0>
 8012d38:	9b08      	ldr	r3, [sp, #32]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	f43f ad2e 	beq.w	801279c <_strtod_l+0x43c>
 8012d40:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012e70 <_strtod_l+0xb10>
 8012d44:	f04f 3aff 	mov.w	sl, #4294967295
 8012d48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012d4a:	4648      	mov	r0, r9
 8012d4c:	f001 fe26 	bl	801499c <_Bfree>
 8012d50:	9905      	ldr	r1, [sp, #20]
 8012d52:	4648      	mov	r0, r9
 8012d54:	f001 fe22 	bl	801499c <_Bfree>
 8012d58:	4641      	mov	r1, r8
 8012d5a:	4648      	mov	r0, r9
 8012d5c:	f001 fe1e 	bl	801499c <_Bfree>
 8012d60:	4621      	mov	r1, r4
 8012d62:	4648      	mov	r0, r9
 8012d64:	f001 fe1a 	bl	801499c <_Bfree>
 8012d68:	e619      	b.n	801299e <_strtod_l+0x63e>
 8012d6a:	f1ba 0f00 	cmp.w	sl, #0
 8012d6e:	d11a      	bne.n	8012da6 <_strtod_l+0xa46>
 8012d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d74:	b9eb      	cbnz	r3, 8012db2 <_strtod_l+0xa52>
 8012d76:	2200      	movs	r2, #0
 8012d78:	4b3f      	ldr	r3, [pc, #252]	; (8012e78 <_strtod_l+0xb18>)
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4639      	mov	r1, r7
 8012d7e:	f7f5 fde5 	bl	800894c <__aeabi_dcmplt>
 8012d82:	b9c8      	cbnz	r0, 8012db8 <_strtod_l+0xa58>
 8012d84:	4630      	mov	r0, r6
 8012d86:	4639      	mov	r1, r7
 8012d88:	2200      	movs	r2, #0
 8012d8a:	4b3e      	ldr	r3, [pc, #248]	; (8012e84 <_strtod_l+0xb24>)
 8012d8c:	f7f5 fb6c 	bl	8008468 <__aeabi_dmul>
 8012d90:	4606      	mov	r6, r0
 8012d92:	460f      	mov	r7, r1
 8012d94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012d98:	9618      	str	r6, [sp, #96]	; 0x60
 8012d9a:	9319      	str	r3, [sp, #100]	; 0x64
 8012d9c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012da0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012da4:	e79c      	b.n	8012ce0 <_strtod_l+0x980>
 8012da6:	f1ba 0f01 	cmp.w	sl, #1
 8012daa:	d102      	bne.n	8012db2 <_strtod_l+0xa52>
 8012dac:	2d00      	cmp	r5, #0
 8012dae:	f43f ad8e 	beq.w	80128ce <_strtod_l+0x56e>
 8012db2:	2200      	movs	r2, #0
 8012db4:	4b34      	ldr	r3, [pc, #208]	; (8012e88 <_strtod_l+0xb28>)
 8012db6:	e78f      	b.n	8012cd8 <_strtod_l+0x978>
 8012db8:	2600      	movs	r6, #0
 8012dba:	4f32      	ldr	r7, [pc, #200]	; (8012e84 <_strtod_l+0xb24>)
 8012dbc:	e7ea      	b.n	8012d94 <_strtod_l+0xa34>
 8012dbe:	4b31      	ldr	r3, [pc, #196]	; (8012e84 <_strtod_l+0xb24>)
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	4639      	mov	r1, r7
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f7f5 fb4f 	bl	8008468 <__aeabi_dmul>
 8012dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dcc:	4606      	mov	r6, r0
 8012dce:	460f      	mov	r7, r1
 8012dd0:	b933      	cbnz	r3, 8012de0 <_strtod_l+0xa80>
 8012dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dd6:	9010      	str	r0, [sp, #64]	; 0x40
 8012dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8012dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012dde:	e7df      	b.n	8012da0 <_strtod_l+0xa40>
 8012de0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012de4:	e7f9      	b.n	8012dda <_strtod_l+0xa7a>
 8012de6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012dea:	9b04      	ldr	r3, [sp, #16]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1ab      	bne.n	8012d48 <_strtod_l+0x9e8>
 8012df0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012df4:	0d1b      	lsrs	r3, r3, #20
 8012df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012df8:	051b      	lsls	r3, r3, #20
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	465d      	mov	r5, fp
 8012dfe:	d1a3      	bne.n	8012d48 <_strtod_l+0x9e8>
 8012e00:	4639      	mov	r1, r7
 8012e02:	4630      	mov	r0, r6
 8012e04:	f7f5 fde0 	bl	80089c8 <__aeabi_d2iz>
 8012e08:	f7f5 fac4 	bl	8008394 <__aeabi_i2d>
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	4602      	mov	r2, r0
 8012e10:	4639      	mov	r1, r7
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7f5 f970 	bl	80080f8 <__aeabi_dsub>
 8012e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	460f      	mov	r7, r1
 8012e1e:	b933      	cbnz	r3, 8012e2e <_strtod_l+0xace>
 8012e20:	f1ba 0f00 	cmp.w	sl, #0
 8012e24:	d103      	bne.n	8012e2e <_strtod_l+0xace>
 8012e26:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8012e2a:	2d00      	cmp	r5, #0
 8012e2c:	d06d      	beq.n	8012f0a <_strtod_l+0xbaa>
 8012e2e:	a30a      	add	r3, pc, #40	; (adr r3, 8012e58 <_strtod_l+0xaf8>)
 8012e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e34:	4630      	mov	r0, r6
 8012e36:	4639      	mov	r1, r7
 8012e38:	f7f5 fd88 	bl	800894c <__aeabi_dcmplt>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	f47f acb8 	bne.w	80127b2 <_strtod_l+0x452>
 8012e42:	a307      	add	r3, pc, #28	; (adr r3, 8012e60 <_strtod_l+0xb00>)
 8012e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e48:	4630      	mov	r0, r6
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	f7f5 fd9c 	bl	8008988 <__aeabi_dcmpgt>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	f43f af79 	beq.w	8012d48 <_strtod_l+0x9e8>
 8012e56:	e4ac      	b.n	80127b2 <_strtod_l+0x452>
 8012e58:	94a03595 	.word	0x94a03595
 8012e5c:	3fdfffff 	.word	0x3fdfffff
 8012e60:	35afe535 	.word	0x35afe535
 8012e64:	3fe00000 	.word	0x3fe00000
 8012e68:	000fffff 	.word	0x000fffff
 8012e6c:	7ff00000 	.word	0x7ff00000
 8012e70:	7fefffff 	.word	0x7fefffff
 8012e74:	39500000 	.word	0x39500000
 8012e78:	3ff00000 	.word	0x3ff00000
 8012e7c:	7fe00000 	.word	0x7fe00000
 8012e80:	7c9fffff 	.word	0x7c9fffff
 8012e84:	3fe00000 	.word	0x3fe00000
 8012e88:	bff00000 	.word	0xbff00000
 8012e8c:	9b04      	ldr	r3, [sp, #16]
 8012e8e:	b333      	cbz	r3, 8012ede <_strtod_l+0xb7e>
 8012e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e96:	d822      	bhi.n	8012ede <_strtod_l+0xb7e>
 8012e98:	a327      	add	r3, pc, #156	; (adr r3, 8012f38 <_strtod_l+0xbd8>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	4639      	mov	r1, r7
 8012ea2:	f7f5 fd5d 	bl	8008960 <__aeabi_dcmple>
 8012ea6:	b1a0      	cbz	r0, 8012ed2 <_strtod_l+0xb72>
 8012ea8:	4639      	mov	r1, r7
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f7f5 fdb4 	bl	8008a18 <__aeabi_d2uiz>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	bf08      	it	eq
 8012eb4:	2001      	moveq	r0, #1
 8012eb6:	f7f5 fa5d 	bl	8008374 <__aeabi_ui2d>
 8012eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	460f      	mov	r7, r1
 8012ec0:	bb03      	cbnz	r3, 8012f04 <_strtod_l+0xba4>
 8012ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ec6:	9012      	str	r0, [sp, #72]	; 0x48
 8012ec8:	9313      	str	r3, [sp, #76]	; 0x4c
 8012eca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012ece:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ed4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ed6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ede:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012ee2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012ee6:	f001 fff1 	bl	8014ecc <__ulp>
 8012eea:	4650      	mov	r0, sl
 8012eec:	ec53 2b10 	vmov	r2, r3, d0
 8012ef0:	4659      	mov	r1, fp
 8012ef2:	f7f5 fab9 	bl	8008468 <__aeabi_dmul>
 8012ef6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012efa:	f7f5 f8ff 	bl	80080fc <__adddf3>
 8012efe:	4682      	mov	sl, r0
 8012f00:	468b      	mov	fp, r1
 8012f02:	e772      	b.n	8012dea <_strtod_l+0xa8a>
 8012f04:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012f08:	e7df      	b.n	8012eca <_strtod_l+0xb6a>
 8012f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8012f40 <_strtod_l+0xbe0>)
 8012f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f10:	f7f5 fd1c 	bl	800894c <__aeabi_dcmplt>
 8012f14:	e79c      	b.n	8012e50 <_strtod_l+0xaf0>
 8012f16:	2300      	movs	r3, #0
 8012f18:	930d      	str	r3, [sp, #52]	; 0x34
 8012f1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	f7ff ba61 	b.w	80123e6 <_strtod_l+0x86>
 8012f24:	2b65      	cmp	r3, #101	; 0x65
 8012f26:	f04f 0200 	mov.w	r2, #0
 8012f2a:	f43f ab4e 	beq.w	80125ca <_strtod_l+0x26a>
 8012f2e:	2101      	movs	r1, #1
 8012f30:	4614      	mov	r4, r2
 8012f32:	9104      	str	r1, [sp, #16]
 8012f34:	f7ff bacb 	b.w	80124ce <_strtod_l+0x16e>
 8012f38:	ffc00000 	.word	0xffc00000
 8012f3c:	41dfffff 	.word	0x41dfffff
 8012f40:	94a03595 	.word	0x94a03595
 8012f44:	3fcfffff 	.word	0x3fcfffff

08012f48 <_strtod_r>:
 8012f48:	4b05      	ldr	r3, [pc, #20]	; (8012f60 <_strtod_r+0x18>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	b410      	push	{r4}
 8012f4e:	6a1b      	ldr	r3, [r3, #32]
 8012f50:	4c04      	ldr	r4, [pc, #16]	; (8012f64 <_strtod_r+0x1c>)
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	bf08      	it	eq
 8012f56:	4623      	moveq	r3, r4
 8012f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f5c:	f7ff ba00 	b.w	8012360 <_strtod_l>
 8012f60:	20000018 	.word	0x20000018
 8012f64:	2000007c 	.word	0x2000007c

08012f68 <_strtol_l.isra.0>:
 8012f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f6c:	4680      	mov	r8, r0
 8012f6e:	4689      	mov	r9, r1
 8012f70:	4692      	mov	sl, r2
 8012f72:	461e      	mov	r6, r3
 8012f74:	460f      	mov	r7, r1
 8012f76:	463d      	mov	r5, r7
 8012f78:	9808      	ldr	r0, [sp, #32]
 8012f7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f7e:	f001 fc47 	bl	8014810 <__locale_ctype_ptr_l>
 8012f82:	4420      	add	r0, r4
 8012f84:	7843      	ldrb	r3, [r0, #1]
 8012f86:	f013 0308 	ands.w	r3, r3, #8
 8012f8a:	d132      	bne.n	8012ff2 <_strtol_l.isra.0+0x8a>
 8012f8c:	2c2d      	cmp	r4, #45	; 0x2d
 8012f8e:	d132      	bne.n	8012ff6 <_strtol_l.isra.0+0x8e>
 8012f90:	787c      	ldrb	r4, [r7, #1]
 8012f92:	1cbd      	adds	r5, r7, #2
 8012f94:	2201      	movs	r2, #1
 8012f96:	2e00      	cmp	r6, #0
 8012f98:	d05d      	beq.n	8013056 <_strtol_l.isra.0+0xee>
 8012f9a:	2e10      	cmp	r6, #16
 8012f9c:	d109      	bne.n	8012fb2 <_strtol_l.isra.0+0x4a>
 8012f9e:	2c30      	cmp	r4, #48	; 0x30
 8012fa0:	d107      	bne.n	8012fb2 <_strtol_l.isra.0+0x4a>
 8012fa2:	782b      	ldrb	r3, [r5, #0]
 8012fa4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012fa8:	2b58      	cmp	r3, #88	; 0x58
 8012faa:	d14f      	bne.n	801304c <_strtol_l.isra.0+0xe4>
 8012fac:	786c      	ldrb	r4, [r5, #1]
 8012fae:	2610      	movs	r6, #16
 8012fb0:	3502      	adds	r5, #2
 8012fb2:	2a00      	cmp	r2, #0
 8012fb4:	bf14      	ite	ne
 8012fb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012fba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012fbe:	2700      	movs	r7, #0
 8012fc0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012fca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012fce:	2b09      	cmp	r3, #9
 8012fd0:	d817      	bhi.n	8013002 <_strtol_l.isra.0+0x9a>
 8012fd2:	461c      	mov	r4, r3
 8012fd4:	42a6      	cmp	r6, r4
 8012fd6:	dd23      	ble.n	8013020 <_strtol_l.isra.0+0xb8>
 8012fd8:	1c7b      	adds	r3, r7, #1
 8012fda:	d007      	beq.n	8012fec <_strtol_l.isra.0+0x84>
 8012fdc:	4584      	cmp	ip, r0
 8012fde:	d31c      	bcc.n	801301a <_strtol_l.isra.0+0xb2>
 8012fe0:	d101      	bne.n	8012fe6 <_strtol_l.isra.0+0x7e>
 8012fe2:	45a6      	cmp	lr, r4
 8012fe4:	db19      	blt.n	801301a <_strtol_l.isra.0+0xb2>
 8012fe6:	fb00 4006 	mla	r0, r0, r6, r4
 8012fea:	2701      	movs	r7, #1
 8012fec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ff0:	e7eb      	b.n	8012fca <_strtol_l.isra.0+0x62>
 8012ff2:	462f      	mov	r7, r5
 8012ff4:	e7bf      	b.n	8012f76 <_strtol_l.isra.0+0xe>
 8012ff6:	2c2b      	cmp	r4, #43	; 0x2b
 8012ff8:	bf04      	itt	eq
 8012ffa:	1cbd      	addeq	r5, r7, #2
 8012ffc:	787c      	ldrbeq	r4, [r7, #1]
 8012ffe:	461a      	mov	r2, r3
 8013000:	e7c9      	b.n	8012f96 <_strtol_l.isra.0+0x2e>
 8013002:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013006:	2b19      	cmp	r3, #25
 8013008:	d801      	bhi.n	801300e <_strtol_l.isra.0+0xa6>
 801300a:	3c37      	subs	r4, #55	; 0x37
 801300c:	e7e2      	b.n	8012fd4 <_strtol_l.isra.0+0x6c>
 801300e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013012:	2b19      	cmp	r3, #25
 8013014:	d804      	bhi.n	8013020 <_strtol_l.isra.0+0xb8>
 8013016:	3c57      	subs	r4, #87	; 0x57
 8013018:	e7dc      	b.n	8012fd4 <_strtol_l.isra.0+0x6c>
 801301a:	f04f 37ff 	mov.w	r7, #4294967295
 801301e:	e7e5      	b.n	8012fec <_strtol_l.isra.0+0x84>
 8013020:	1c7b      	adds	r3, r7, #1
 8013022:	d108      	bne.n	8013036 <_strtol_l.isra.0+0xce>
 8013024:	2322      	movs	r3, #34	; 0x22
 8013026:	f8c8 3000 	str.w	r3, [r8]
 801302a:	4608      	mov	r0, r1
 801302c:	f1ba 0f00 	cmp.w	sl, #0
 8013030:	d107      	bne.n	8013042 <_strtol_l.isra.0+0xda>
 8013032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013036:	b102      	cbz	r2, 801303a <_strtol_l.isra.0+0xd2>
 8013038:	4240      	negs	r0, r0
 801303a:	f1ba 0f00 	cmp.w	sl, #0
 801303e:	d0f8      	beq.n	8013032 <_strtol_l.isra.0+0xca>
 8013040:	b10f      	cbz	r7, 8013046 <_strtol_l.isra.0+0xde>
 8013042:	f105 39ff 	add.w	r9, r5, #4294967295
 8013046:	f8ca 9000 	str.w	r9, [sl]
 801304a:	e7f2      	b.n	8013032 <_strtol_l.isra.0+0xca>
 801304c:	2430      	movs	r4, #48	; 0x30
 801304e:	2e00      	cmp	r6, #0
 8013050:	d1af      	bne.n	8012fb2 <_strtol_l.isra.0+0x4a>
 8013052:	2608      	movs	r6, #8
 8013054:	e7ad      	b.n	8012fb2 <_strtol_l.isra.0+0x4a>
 8013056:	2c30      	cmp	r4, #48	; 0x30
 8013058:	d0a3      	beq.n	8012fa2 <_strtol_l.isra.0+0x3a>
 801305a:	260a      	movs	r6, #10
 801305c:	e7a9      	b.n	8012fb2 <_strtol_l.isra.0+0x4a>
	...

08013060 <_strtol_r>:
 8013060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013062:	4c06      	ldr	r4, [pc, #24]	; (801307c <_strtol_r+0x1c>)
 8013064:	4d06      	ldr	r5, [pc, #24]	; (8013080 <_strtol_r+0x20>)
 8013066:	6824      	ldr	r4, [r4, #0]
 8013068:	6a24      	ldr	r4, [r4, #32]
 801306a:	2c00      	cmp	r4, #0
 801306c:	bf08      	it	eq
 801306e:	462c      	moveq	r4, r5
 8013070:	9400      	str	r4, [sp, #0]
 8013072:	f7ff ff79 	bl	8012f68 <_strtol_l.isra.0>
 8013076:	b003      	add	sp, #12
 8013078:	bd30      	pop	{r4, r5, pc}
 801307a:	bf00      	nop
 801307c:	20000018 	.word	0x20000018
 8013080:	2000007c 	.word	0x2000007c

08013084 <_vsiprintf_r>:
 8013084:	b500      	push	{lr}
 8013086:	b09b      	sub	sp, #108	; 0x6c
 8013088:	9100      	str	r1, [sp, #0]
 801308a:	9104      	str	r1, [sp, #16]
 801308c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013090:	9105      	str	r1, [sp, #20]
 8013092:	9102      	str	r1, [sp, #8]
 8013094:	4905      	ldr	r1, [pc, #20]	; (80130ac <_vsiprintf_r+0x28>)
 8013096:	9103      	str	r1, [sp, #12]
 8013098:	4669      	mov	r1, sp
 801309a:	f002 f95b 	bl	8015354 <_svfiprintf_r>
 801309e:	9b00      	ldr	r3, [sp, #0]
 80130a0:	2200      	movs	r2, #0
 80130a2:	701a      	strb	r2, [r3, #0]
 80130a4:	b01b      	add	sp, #108	; 0x6c
 80130a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80130aa:	bf00      	nop
 80130ac:	ffff0208 	.word	0xffff0208

080130b0 <vsiprintf>:
 80130b0:	4613      	mov	r3, r2
 80130b2:	460a      	mov	r2, r1
 80130b4:	4601      	mov	r1, r0
 80130b6:	4802      	ldr	r0, [pc, #8]	; (80130c0 <vsiprintf+0x10>)
 80130b8:	6800      	ldr	r0, [r0, #0]
 80130ba:	f7ff bfe3 	b.w	8013084 <_vsiprintf_r>
 80130be:	bf00      	nop
 80130c0:	20000018 	.word	0x20000018

080130c4 <__swbuf_r>:
 80130c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c6:	460e      	mov	r6, r1
 80130c8:	4614      	mov	r4, r2
 80130ca:	4605      	mov	r5, r0
 80130cc:	b118      	cbz	r0, 80130d6 <__swbuf_r+0x12>
 80130ce:	6983      	ldr	r3, [r0, #24]
 80130d0:	b90b      	cbnz	r3, 80130d6 <__swbuf_r+0x12>
 80130d2:	f000 ffed 	bl	80140b0 <__sinit>
 80130d6:	4b21      	ldr	r3, [pc, #132]	; (801315c <__swbuf_r+0x98>)
 80130d8:	429c      	cmp	r4, r3
 80130da:	d12a      	bne.n	8013132 <__swbuf_r+0x6e>
 80130dc:	686c      	ldr	r4, [r5, #4]
 80130de:	69a3      	ldr	r3, [r4, #24]
 80130e0:	60a3      	str	r3, [r4, #8]
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	071a      	lsls	r2, r3, #28
 80130e6:	d52e      	bpl.n	8013146 <__swbuf_r+0x82>
 80130e8:	6923      	ldr	r3, [r4, #16]
 80130ea:	b363      	cbz	r3, 8013146 <__swbuf_r+0x82>
 80130ec:	6923      	ldr	r3, [r4, #16]
 80130ee:	6820      	ldr	r0, [r4, #0]
 80130f0:	1ac0      	subs	r0, r0, r3
 80130f2:	6963      	ldr	r3, [r4, #20]
 80130f4:	b2f6      	uxtb	r6, r6
 80130f6:	4283      	cmp	r3, r0
 80130f8:	4637      	mov	r7, r6
 80130fa:	dc04      	bgt.n	8013106 <__swbuf_r+0x42>
 80130fc:	4621      	mov	r1, r4
 80130fe:	4628      	mov	r0, r5
 8013100:	f000 ff6c 	bl	8013fdc <_fflush_r>
 8013104:	bb28      	cbnz	r0, 8013152 <__swbuf_r+0x8e>
 8013106:	68a3      	ldr	r3, [r4, #8]
 8013108:	3b01      	subs	r3, #1
 801310a:	60a3      	str	r3, [r4, #8]
 801310c:	6823      	ldr	r3, [r4, #0]
 801310e:	1c5a      	adds	r2, r3, #1
 8013110:	6022      	str	r2, [r4, #0]
 8013112:	701e      	strb	r6, [r3, #0]
 8013114:	6963      	ldr	r3, [r4, #20]
 8013116:	3001      	adds	r0, #1
 8013118:	4283      	cmp	r3, r0
 801311a:	d004      	beq.n	8013126 <__swbuf_r+0x62>
 801311c:	89a3      	ldrh	r3, [r4, #12]
 801311e:	07db      	lsls	r3, r3, #31
 8013120:	d519      	bpl.n	8013156 <__swbuf_r+0x92>
 8013122:	2e0a      	cmp	r6, #10
 8013124:	d117      	bne.n	8013156 <__swbuf_r+0x92>
 8013126:	4621      	mov	r1, r4
 8013128:	4628      	mov	r0, r5
 801312a:	f000 ff57 	bl	8013fdc <_fflush_r>
 801312e:	b190      	cbz	r0, 8013156 <__swbuf_r+0x92>
 8013130:	e00f      	b.n	8013152 <__swbuf_r+0x8e>
 8013132:	4b0b      	ldr	r3, [pc, #44]	; (8013160 <__swbuf_r+0x9c>)
 8013134:	429c      	cmp	r4, r3
 8013136:	d101      	bne.n	801313c <__swbuf_r+0x78>
 8013138:	68ac      	ldr	r4, [r5, #8]
 801313a:	e7d0      	b.n	80130de <__swbuf_r+0x1a>
 801313c:	4b09      	ldr	r3, [pc, #36]	; (8013164 <__swbuf_r+0xa0>)
 801313e:	429c      	cmp	r4, r3
 8013140:	bf08      	it	eq
 8013142:	68ec      	ldreq	r4, [r5, #12]
 8013144:	e7cb      	b.n	80130de <__swbuf_r+0x1a>
 8013146:	4621      	mov	r1, r4
 8013148:	4628      	mov	r0, r5
 801314a:	f000 f80d 	bl	8013168 <__swsetup_r>
 801314e:	2800      	cmp	r0, #0
 8013150:	d0cc      	beq.n	80130ec <__swbuf_r+0x28>
 8013152:	f04f 37ff 	mov.w	r7, #4294967295
 8013156:	4638      	mov	r0, r7
 8013158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801315a:	bf00      	nop
 801315c:	08015c48 	.word	0x08015c48
 8013160:	08015c68 	.word	0x08015c68
 8013164:	08015c28 	.word	0x08015c28

08013168 <__swsetup_r>:
 8013168:	4b32      	ldr	r3, [pc, #200]	; (8013234 <__swsetup_r+0xcc>)
 801316a:	b570      	push	{r4, r5, r6, lr}
 801316c:	681d      	ldr	r5, [r3, #0]
 801316e:	4606      	mov	r6, r0
 8013170:	460c      	mov	r4, r1
 8013172:	b125      	cbz	r5, 801317e <__swsetup_r+0x16>
 8013174:	69ab      	ldr	r3, [r5, #24]
 8013176:	b913      	cbnz	r3, 801317e <__swsetup_r+0x16>
 8013178:	4628      	mov	r0, r5
 801317a:	f000 ff99 	bl	80140b0 <__sinit>
 801317e:	4b2e      	ldr	r3, [pc, #184]	; (8013238 <__swsetup_r+0xd0>)
 8013180:	429c      	cmp	r4, r3
 8013182:	d10f      	bne.n	80131a4 <__swsetup_r+0x3c>
 8013184:	686c      	ldr	r4, [r5, #4]
 8013186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801318a:	b29a      	uxth	r2, r3
 801318c:	0715      	lsls	r5, r2, #28
 801318e:	d42c      	bmi.n	80131ea <__swsetup_r+0x82>
 8013190:	06d0      	lsls	r0, r2, #27
 8013192:	d411      	bmi.n	80131b8 <__swsetup_r+0x50>
 8013194:	2209      	movs	r2, #9
 8013196:	6032      	str	r2, [r6, #0]
 8013198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801319c:	81a3      	strh	r3, [r4, #12]
 801319e:	f04f 30ff 	mov.w	r0, #4294967295
 80131a2:	e03e      	b.n	8013222 <__swsetup_r+0xba>
 80131a4:	4b25      	ldr	r3, [pc, #148]	; (801323c <__swsetup_r+0xd4>)
 80131a6:	429c      	cmp	r4, r3
 80131a8:	d101      	bne.n	80131ae <__swsetup_r+0x46>
 80131aa:	68ac      	ldr	r4, [r5, #8]
 80131ac:	e7eb      	b.n	8013186 <__swsetup_r+0x1e>
 80131ae:	4b24      	ldr	r3, [pc, #144]	; (8013240 <__swsetup_r+0xd8>)
 80131b0:	429c      	cmp	r4, r3
 80131b2:	bf08      	it	eq
 80131b4:	68ec      	ldreq	r4, [r5, #12]
 80131b6:	e7e6      	b.n	8013186 <__swsetup_r+0x1e>
 80131b8:	0751      	lsls	r1, r2, #29
 80131ba:	d512      	bpl.n	80131e2 <__swsetup_r+0x7a>
 80131bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131be:	b141      	cbz	r1, 80131d2 <__swsetup_r+0x6a>
 80131c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131c4:	4299      	cmp	r1, r3
 80131c6:	d002      	beq.n	80131ce <__swsetup_r+0x66>
 80131c8:	4630      	mov	r0, r6
 80131ca:	f001 ffc1 	bl	8015150 <_free_r>
 80131ce:	2300      	movs	r3, #0
 80131d0:	6363      	str	r3, [r4, #52]	; 0x34
 80131d2:	89a3      	ldrh	r3, [r4, #12]
 80131d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80131d8:	81a3      	strh	r3, [r4, #12]
 80131da:	2300      	movs	r3, #0
 80131dc:	6063      	str	r3, [r4, #4]
 80131de:	6923      	ldr	r3, [r4, #16]
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	f043 0308 	orr.w	r3, r3, #8
 80131e8:	81a3      	strh	r3, [r4, #12]
 80131ea:	6923      	ldr	r3, [r4, #16]
 80131ec:	b94b      	cbnz	r3, 8013202 <__swsetup_r+0x9a>
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80131f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131f8:	d003      	beq.n	8013202 <__swsetup_r+0x9a>
 80131fa:	4621      	mov	r1, r4
 80131fc:	4630      	mov	r0, r6
 80131fe:	f001 fb3f 	bl	8014880 <__smakebuf_r>
 8013202:	89a2      	ldrh	r2, [r4, #12]
 8013204:	f012 0301 	ands.w	r3, r2, #1
 8013208:	d00c      	beq.n	8013224 <__swsetup_r+0xbc>
 801320a:	2300      	movs	r3, #0
 801320c:	60a3      	str	r3, [r4, #8]
 801320e:	6963      	ldr	r3, [r4, #20]
 8013210:	425b      	negs	r3, r3
 8013212:	61a3      	str	r3, [r4, #24]
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	b953      	cbnz	r3, 801322e <__swsetup_r+0xc6>
 8013218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801321c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013220:	d1ba      	bne.n	8013198 <__swsetup_r+0x30>
 8013222:	bd70      	pop	{r4, r5, r6, pc}
 8013224:	0792      	lsls	r2, r2, #30
 8013226:	bf58      	it	pl
 8013228:	6963      	ldrpl	r3, [r4, #20]
 801322a:	60a3      	str	r3, [r4, #8]
 801322c:	e7f2      	b.n	8013214 <__swsetup_r+0xac>
 801322e:	2000      	movs	r0, #0
 8013230:	e7f7      	b.n	8013222 <__swsetup_r+0xba>
 8013232:	bf00      	nop
 8013234:	20000018 	.word	0x20000018
 8013238:	08015c48 	.word	0x08015c48
 801323c:	08015c68 	.word	0x08015c68
 8013240:	08015c28 	.word	0x08015c28

08013244 <quorem>:
 8013244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013248:	6903      	ldr	r3, [r0, #16]
 801324a:	690c      	ldr	r4, [r1, #16]
 801324c:	42a3      	cmp	r3, r4
 801324e:	4680      	mov	r8, r0
 8013250:	f2c0 8082 	blt.w	8013358 <quorem+0x114>
 8013254:	3c01      	subs	r4, #1
 8013256:	f101 0714 	add.w	r7, r1, #20
 801325a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801325e:	f100 0614 	add.w	r6, r0, #20
 8013262:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013266:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801326a:	eb06 030c 	add.w	r3, r6, ip
 801326e:	3501      	adds	r5, #1
 8013270:	eb07 090c 	add.w	r9, r7, ip
 8013274:	9301      	str	r3, [sp, #4]
 8013276:	fbb0 f5f5 	udiv	r5, r0, r5
 801327a:	b395      	cbz	r5, 80132e2 <quorem+0x9e>
 801327c:	f04f 0a00 	mov.w	sl, #0
 8013280:	4638      	mov	r0, r7
 8013282:	46b6      	mov	lr, r6
 8013284:	46d3      	mov	fp, sl
 8013286:	f850 2b04 	ldr.w	r2, [r0], #4
 801328a:	b293      	uxth	r3, r2
 801328c:	fb05 a303 	mla	r3, r5, r3, sl
 8013290:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013294:	b29b      	uxth	r3, r3
 8013296:	ebab 0303 	sub.w	r3, fp, r3
 801329a:	0c12      	lsrs	r2, r2, #16
 801329c:	f8de b000 	ldr.w	fp, [lr]
 80132a0:	fb05 a202 	mla	r2, r5, r2, sl
 80132a4:	fa13 f38b 	uxtah	r3, r3, fp
 80132a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80132ac:	fa1f fb82 	uxth.w	fp, r2
 80132b0:	f8de 2000 	ldr.w	r2, [lr]
 80132b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80132b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132bc:	b29b      	uxth	r3, r3
 80132be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132c2:	4581      	cmp	r9, r0
 80132c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80132c8:	f84e 3b04 	str.w	r3, [lr], #4
 80132cc:	d2db      	bcs.n	8013286 <quorem+0x42>
 80132ce:	f856 300c 	ldr.w	r3, [r6, ip]
 80132d2:	b933      	cbnz	r3, 80132e2 <quorem+0x9e>
 80132d4:	9b01      	ldr	r3, [sp, #4]
 80132d6:	3b04      	subs	r3, #4
 80132d8:	429e      	cmp	r6, r3
 80132da:	461a      	mov	r2, r3
 80132dc:	d330      	bcc.n	8013340 <quorem+0xfc>
 80132de:	f8c8 4010 	str.w	r4, [r8, #16]
 80132e2:	4640      	mov	r0, r8
 80132e4:	f001 fd7a 	bl	8014ddc <__mcmp>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	db25      	blt.n	8013338 <quorem+0xf4>
 80132ec:	3501      	adds	r5, #1
 80132ee:	4630      	mov	r0, r6
 80132f0:	f04f 0c00 	mov.w	ip, #0
 80132f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80132f8:	f8d0 e000 	ldr.w	lr, [r0]
 80132fc:	b293      	uxth	r3, r2
 80132fe:	ebac 0303 	sub.w	r3, ip, r3
 8013302:	0c12      	lsrs	r2, r2, #16
 8013304:	fa13 f38e 	uxtah	r3, r3, lr
 8013308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801330c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013310:	b29b      	uxth	r3, r3
 8013312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013316:	45b9      	cmp	r9, r7
 8013318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801331c:	f840 3b04 	str.w	r3, [r0], #4
 8013320:	d2e8      	bcs.n	80132f4 <quorem+0xb0>
 8013322:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013326:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801332a:	b92a      	cbnz	r2, 8013338 <quorem+0xf4>
 801332c:	3b04      	subs	r3, #4
 801332e:	429e      	cmp	r6, r3
 8013330:	461a      	mov	r2, r3
 8013332:	d30b      	bcc.n	801334c <quorem+0x108>
 8013334:	f8c8 4010 	str.w	r4, [r8, #16]
 8013338:	4628      	mov	r0, r5
 801333a:	b003      	add	sp, #12
 801333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013340:	6812      	ldr	r2, [r2, #0]
 8013342:	3b04      	subs	r3, #4
 8013344:	2a00      	cmp	r2, #0
 8013346:	d1ca      	bne.n	80132de <quorem+0x9a>
 8013348:	3c01      	subs	r4, #1
 801334a:	e7c5      	b.n	80132d8 <quorem+0x94>
 801334c:	6812      	ldr	r2, [r2, #0]
 801334e:	3b04      	subs	r3, #4
 8013350:	2a00      	cmp	r2, #0
 8013352:	d1ef      	bne.n	8013334 <quorem+0xf0>
 8013354:	3c01      	subs	r4, #1
 8013356:	e7ea      	b.n	801332e <quorem+0xea>
 8013358:	2000      	movs	r0, #0
 801335a:	e7ee      	b.n	801333a <quorem+0xf6>
 801335c:	0000      	movs	r0, r0
	...

08013360 <_dtoa_r>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	ec57 6b10 	vmov	r6, r7, d0
 8013368:	b097      	sub	sp, #92	; 0x5c
 801336a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801336c:	9106      	str	r1, [sp, #24]
 801336e:	4604      	mov	r4, r0
 8013370:	920b      	str	r2, [sp, #44]	; 0x2c
 8013372:	9312      	str	r3, [sp, #72]	; 0x48
 8013374:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013378:	e9cd 6700 	strd	r6, r7, [sp]
 801337c:	b93d      	cbnz	r5, 801338e <_dtoa_r+0x2e>
 801337e:	2010      	movs	r0, #16
 8013380:	f001 fabe 	bl	8014900 <malloc>
 8013384:	6260      	str	r0, [r4, #36]	; 0x24
 8013386:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801338a:	6005      	str	r5, [r0, #0]
 801338c:	60c5      	str	r5, [r0, #12]
 801338e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013390:	6819      	ldr	r1, [r3, #0]
 8013392:	b151      	cbz	r1, 80133aa <_dtoa_r+0x4a>
 8013394:	685a      	ldr	r2, [r3, #4]
 8013396:	604a      	str	r2, [r1, #4]
 8013398:	2301      	movs	r3, #1
 801339a:	4093      	lsls	r3, r2
 801339c:	608b      	str	r3, [r1, #8]
 801339e:	4620      	mov	r0, r4
 80133a0:	f001 fafc 	bl	801499c <_Bfree>
 80133a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133a6:	2200      	movs	r2, #0
 80133a8:	601a      	str	r2, [r3, #0]
 80133aa:	1e3b      	subs	r3, r7, #0
 80133ac:	bfbb      	ittet	lt
 80133ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80133b2:	9301      	strlt	r3, [sp, #4]
 80133b4:	2300      	movge	r3, #0
 80133b6:	2201      	movlt	r2, #1
 80133b8:	bfac      	ite	ge
 80133ba:	f8c8 3000 	strge.w	r3, [r8]
 80133be:	f8c8 2000 	strlt.w	r2, [r8]
 80133c2:	4baf      	ldr	r3, [pc, #700]	; (8013680 <_dtoa_r+0x320>)
 80133c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80133c8:	ea33 0308 	bics.w	r3, r3, r8
 80133cc:	d114      	bne.n	80133f8 <_dtoa_r+0x98>
 80133ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80133d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80133d4:	6013      	str	r3, [r2, #0]
 80133d6:	9b00      	ldr	r3, [sp, #0]
 80133d8:	b923      	cbnz	r3, 80133e4 <_dtoa_r+0x84>
 80133da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80133de:	2800      	cmp	r0, #0
 80133e0:	f000 8542 	beq.w	8013e68 <_dtoa_r+0xb08>
 80133e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8013694 <_dtoa_r+0x334>
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f000 8544 	beq.w	8013e78 <_dtoa_r+0xb18>
 80133f0:	f10b 0303 	add.w	r3, fp, #3
 80133f4:	f000 bd3e 	b.w	8013e74 <_dtoa_r+0xb14>
 80133f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80133fc:	2200      	movs	r2, #0
 80133fe:	2300      	movs	r3, #0
 8013400:	4630      	mov	r0, r6
 8013402:	4639      	mov	r1, r7
 8013404:	f7f5 fa98 	bl	8008938 <__aeabi_dcmpeq>
 8013408:	4681      	mov	r9, r0
 801340a:	b168      	cbz	r0, 8013428 <_dtoa_r+0xc8>
 801340c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801340e:	2301      	movs	r3, #1
 8013410:	6013      	str	r3, [r2, #0]
 8013412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013414:	2b00      	cmp	r3, #0
 8013416:	f000 8524 	beq.w	8013e62 <_dtoa_r+0xb02>
 801341a:	4b9a      	ldr	r3, [pc, #616]	; (8013684 <_dtoa_r+0x324>)
 801341c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801341e:	f103 3bff 	add.w	fp, r3, #4294967295
 8013422:	6013      	str	r3, [r2, #0]
 8013424:	f000 bd28 	b.w	8013e78 <_dtoa_r+0xb18>
 8013428:	aa14      	add	r2, sp, #80	; 0x50
 801342a:	a915      	add	r1, sp, #84	; 0x54
 801342c:	ec47 6b10 	vmov	d0, r6, r7
 8013430:	4620      	mov	r0, r4
 8013432:	f001 fdc1 	bl	8014fb8 <__d2b>
 8013436:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801343a:	9004      	str	r0, [sp, #16]
 801343c:	2d00      	cmp	r5, #0
 801343e:	d07c      	beq.n	801353a <_dtoa_r+0x1da>
 8013440:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013444:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013448:	46b2      	mov	sl, r6
 801344a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801344e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013452:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013456:	2200      	movs	r2, #0
 8013458:	4b8b      	ldr	r3, [pc, #556]	; (8013688 <_dtoa_r+0x328>)
 801345a:	4650      	mov	r0, sl
 801345c:	4659      	mov	r1, fp
 801345e:	f7f4 fe4b 	bl	80080f8 <__aeabi_dsub>
 8013462:	a381      	add	r3, pc, #516	; (adr r3, 8013668 <_dtoa_r+0x308>)
 8013464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013468:	f7f4 fffe 	bl	8008468 <__aeabi_dmul>
 801346c:	a380      	add	r3, pc, #512	; (adr r3, 8013670 <_dtoa_r+0x310>)
 801346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013472:	f7f4 fe43 	bl	80080fc <__adddf3>
 8013476:	4606      	mov	r6, r0
 8013478:	4628      	mov	r0, r5
 801347a:	460f      	mov	r7, r1
 801347c:	f7f4 ff8a 	bl	8008394 <__aeabi_i2d>
 8013480:	a37d      	add	r3, pc, #500	; (adr r3, 8013678 <_dtoa_r+0x318>)
 8013482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013486:	f7f4 ffef 	bl	8008468 <__aeabi_dmul>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	4630      	mov	r0, r6
 8013490:	4639      	mov	r1, r7
 8013492:	f7f4 fe33 	bl	80080fc <__adddf3>
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	f7f5 fa95 	bl	80089c8 <__aeabi_d2iz>
 801349e:	2200      	movs	r2, #0
 80134a0:	4682      	mov	sl, r0
 80134a2:	2300      	movs	r3, #0
 80134a4:	4630      	mov	r0, r6
 80134a6:	4639      	mov	r1, r7
 80134a8:	f7f5 fa50 	bl	800894c <__aeabi_dcmplt>
 80134ac:	b148      	cbz	r0, 80134c2 <_dtoa_r+0x162>
 80134ae:	4650      	mov	r0, sl
 80134b0:	f7f4 ff70 	bl	8008394 <__aeabi_i2d>
 80134b4:	4632      	mov	r2, r6
 80134b6:	463b      	mov	r3, r7
 80134b8:	f7f5 fa3e 	bl	8008938 <__aeabi_dcmpeq>
 80134bc:	b908      	cbnz	r0, 80134c2 <_dtoa_r+0x162>
 80134be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134c2:	f1ba 0f16 	cmp.w	sl, #22
 80134c6:	d859      	bhi.n	801357c <_dtoa_r+0x21c>
 80134c8:	4970      	ldr	r1, [pc, #448]	; (801368c <_dtoa_r+0x32c>)
 80134ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80134ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134d6:	f7f5 fa57 	bl	8008988 <__aeabi_dcmpgt>
 80134da:	2800      	cmp	r0, #0
 80134dc:	d050      	beq.n	8013580 <_dtoa_r+0x220>
 80134de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134e2:	2300      	movs	r3, #0
 80134e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80134e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80134e8:	1b5d      	subs	r5, r3, r5
 80134ea:	f1b5 0801 	subs.w	r8, r5, #1
 80134ee:	bf49      	itett	mi
 80134f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80134f4:	2300      	movpl	r3, #0
 80134f6:	9305      	strmi	r3, [sp, #20]
 80134f8:	f04f 0800 	movmi.w	r8, #0
 80134fc:	bf58      	it	pl
 80134fe:	9305      	strpl	r3, [sp, #20]
 8013500:	f1ba 0f00 	cmp.w	sl, #0
 8013504:	db3e      	blt.n	8013584 <_dtoa_r+0x224>
 8013506:	2300      	movs	r3, #0
 8013508:	44d0      	add	r8, sl
 801350a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801350e:	9307      	str	r3, [sp, #28]
 8013510:	9b06      	ldr	r3, [sp, #24]
 8013512:	2b09      	cmp	r3, #9
 8013514:	f200 8090 	bhi.w	8013638 <_dtoa_r+0x2d8>
 8013518:	2b05      	cmp	r3, #5
 801351a:	bfc4      	itt	gt
 801351c:	3b04      	subgt	r3, #4
 801351e:	9306      	strgt	r3, [sp, #24]
 8013520:	9b06      	ldr	r3, [sp, #24]
 8013522:	f1a3 0302 	sub.w	r3, r3, #2
 8013526:	bfcc      	ite	gt
 8013528:	2500      	movgt	r5, #0
 801352a:	2501      	movle	r5, #1
 801352c:	2b03      	cmp	r3, #3
 801352e:	f200 808f 	bhi.w	8013650 <_dtoa_r+0x2f0>
 8013532:	e8df f003 	tbb	[pc, r3]
 8013536:	7f7d      	.short	0x7f7d
 8013538:	7131      	.short	0x7131
 801353a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801353e:	441d      	add	r5, r3
 8013540:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013544:	2820      	cmp	r0, #32
 8013546:	dd13      	ble.n	8013570 <_dtoa_r+0x210>
 8013548:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801354c:	9b00      	ldr	r3, [sp, #0]
 801354e:	fa08 f800 	lsl.w	r8, r8, r0
 8013552:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013556:	fa23 f000 	lsr.w	r0, r3, r0
 801355a:	ea48 0000 	orr.w	r0, r8, r0
 801355e:	f7f4 ff09 	bl	8008374 <__aeabi_ui2d>
 8013562:	2301      	movs	r3, #1
 8013564:	4682      	mov	sl, r0
 8013566:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801356a:	3d01      	subs	r5, #1
 801356c:	9313      	str	r3, [sp, #76]	; 0x4c
 801356e:	e772      	b.n	8013456 <_dtoa_r+0xf6>
 8013570:	9b00      	ldr	r3, [sp, #0]
 8013572:	f1c0 0020 	rsb	r0, r0, #32
 8013576:	fa03 f000 	lsl.w	r0, r3, r0
 801357a:	e7f0      	b.n	801355e <_dtoa_r+0x1fe>
 801357c:	2301      	movs	r3, #1
 801357e:	e7b1      	b.n	80134e4 <_dtoa_r+0x184>
 8013580:	900f      	str	r0, [sp, #60]	; 0x3c
 8013582:	e7b0      	b.n	80134e6 <_dtoa_r+0x186>
 8013584:	9b05      	ldr	r3, [sp, #20]
 8013586:	eba3 030a 	sub.w	r3, r3, sl
 801358a:	9305      	str	r3, [sp, #20]
 801358c:	f1ca 0300 	rsb	r3, sl, #0
 8013590:	9307      	str	r3, [sp, #28]
 8013592:	2300      	movs	r3, #0
 8013594:	930e      	str	r3, [sp, #56]	; 0x38
 8013596:	e7bb      	b.n	8013510 <_dtoa_r+0x1b0>
 8013598:	2301      	movs	r3, #1
 801359a:	930a      	str	r3, [sp, #40]	; 0x28
 801359c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801359e:	2b00      	cmp	r3, #0
 80135a0:	dd59      	ble.n	8013656 <_dtoa_r+0x2f6>
 80135a2:	9302      	str	r3, [sp, #8]
 80135a4:	4699      	mov	r9, r3
 80135a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80135a8:	2200      	movs	r2, #0
 80135aa:	6072      	str	r2, [r6, #4]
 80135ac:	2204      	movs	r2, #4
 80135ae:	f102 0014 	add.w	r0, r2, #20
 80135b2:	4298      	cmp	r0, r3
 80135b4:	6871      	ldr	r1, [r6, #4]
 80135b6:	d953      	bls.n	8013660 <_dtoa_r+0x300>
 80135b8:	4620      	mov	r0, r4
 80135ba:	f001 f9bb 	bl	8014934 <_Balloc>
 80135be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135c0:	6030      	str	r0, [r6, #0]
 80135c2:	f1b9 0f0e 	cmp.w	r9, #14
 80135c6:	f8d3 b000 	ldr.w	fp, [r3]
 80135ca:	f200 80e6 	bhi.w	801379a <_dtoa_r+0x43a>
 80135ce:	2d00      	cmp	r5, #0
 80135d0:	f000 80e3 	beq.w	801379a <_dtoa_r+0x43a>
 80135d4:	ed9d 7b00 	vldr	d7, [sp]
 80135d8:	f1ba 0f00 	cmp.w	sl, #0
 80135dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80135e0:	dd74      	ble.n	80136cc <_dtoa_r+0x36c>
 80135e2:	4a2a      	ldr	r2, [pc, #168]	; (801368c <_dtoa_r+0x32c>)
 80135e4:	f00a 030f 	and.w	r3, sl, #15
 80135e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80135ec:	ed93 7b00 	vldr	d7, [r3]
 80135f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80135f4:	06f0      	lsls	r0, r6, #27
 80135f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80135fa:	d565      	bpl.n	80136c8 <_dtoa_r+0x368>
 80135fc:	4b24      	ldr	r3, [pc, #144]	; (8013690 <_dtoa_r+0x330>)
 80135fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013602:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013606:	f7f5 f859 	bl	80086bc <__aeabi_ddiv>
 801360a:	e9cd 0100 	strd	r0, r1, [sp]
 801360e:	f006 060f 	and.w	r6, r6, #15
 8013612:	2503      	movs	r5, #3
 8013614:	4f1e      	ldr	r7, [pc, #120]	; (8013690 <_dtoa_r+0x330>)
 8013616:	e04c      	b.n	80136b2 <_dtoa_r+0x352>
 8013618:	2301      	movs	r3, #1
 801361a:	930a      	str	r3, [sp, #40]	; 0x28
 801361c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801361e:	4453      	add	r3, sl
 8013620:	f103 0901 	add.w	r9, r3, #1
 8013624:	9302      	str	r3, [sp, #8]
 8013626:	464b      	mov	r3, r9
 8013628:	2b01      	cmp	r3, #1
 801362a:	bfb8      	it	lt
 801362c:	2301      	movlt	r3, #1
 801362e:	e7ba      	b.n	80135a6 <_dtoa_r+0x246>
 8013630:	2300      	movs	r3, #0
 8013632:	e7b2      	b.n	801359a <_dtoa_r+0x23a>
 8013634:	2300      	movs	r3, #0
 8013636:	e7f0      	b.n	801361a <_dtoa_r+0x2ba>
 8013638:	2501      	movs	r5, #1
 801363a:	2300      	movs	r3, #0
 801363c:	9306      	str	r3, [sp, #24]
 801363e:	950a      	str	r5, [sp, #40]	; 0x28
 8013640:	f04f 33ff 	mov.w	r3, #4294967295
 8013644:	9302      	str	r3, [sp, #8]
 8013646:	4699      	mov	r9, r3
 8013648:	2200      	movs	r2, #0
 801364a:	2312      	movs	r3, #18
 801364c:	920b      	str	r2, [sp, #44]	; 0x2c
 801364e:	e7aa      	b.n	80135a6 <_dtoa_r+0x246>
 8013650:	2301      	movs	r3, #1
 8013652:	930a      	str	r3, [sp, #40]	; 0x28
 8013654:	e7f4      	b.n	8013640 <_dtoa_r+0x2e0>
 8013656:	2301      	movs	r3, #1
 8013658:	9302      	str	r3, [sp, #8]
 801365a:	4699      	mov	r9, r3
 801365c:	461a      	mov	r2, r3
 801365e:	e7f5      	b.n	801364c <_dtoa_r+0x2ec>
 8013660:	3101      	adds	r1, #1
 8013662:	6071      	str	r1, [r6, #4]
 8013664:	0052      	lsls	r2, r2, #1
 8013666:	e7a2      	b.n	80135ae <_dtoa_r+0x24e>
 8013668:	636f4361 	.word	0x636f4361
 801366c:	3fd287a7 	.word	0x3fd287a7
 8013670:	8b60c8b3 	.word	0x8b60c8b3
 8013674:	3fc68a28 	.word	0x3fc68a28
 8013678:	509f79fb 	.word	0x509f79fb
 801367c:	3fd34413 	.word	0x3fd34413
 8013680:	7ff00000 	.word	0x7ff00000
 8013684:	08015b9d 	.word	0x08015b9d
 8013688:	3ff80000 	.word	0x3ff80000
 801368c:	08015cc0 	.word	0x08015cc0
 8013690:	08015c98 	.word	0x08015c98
 8013694:	08015c21 	.word	0x08015c21
 8013698:	07f1      	lsls	r1, r6, #31
 801369a:	d508      	bpl.n	80136ae <_dtoa_r+0x34e>
 801369c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80136a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80136a4:	f7f4 fee0 	bl	8008468 <__aeabi_dmul>
 80136a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80136ac:	3501      	adds	r5, #1
 80136ae:	1076      	asrs	r6, r6, #1
 80136b0:	3708      	adds	r7, #8
 80136b2:	2e00      	cmp	r6, #0
 80136b4:	d1f0      	bne.n	8013698 <_dtoa_r+0x338>
 80136b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80136ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136be:	f7f4 fffd 	bl	80086bc <__aeabi_ddiv>
 80136c2:	e9cd 0100 	strd	r0, r1, [sp]
 80136c6:	e01a      	b.n	80136fe <_dtoa_r+0x39e>
 80136c8:	2502      	movs	r5, #2
 80136ca:	e7a3      	b.n	8013614 <_dtoa_r+0x2b4>
 80136cc:	f000 80a0 	beq.w	8013810 <_dtoa_r+0x4b0>
 80136d0:	f1ca 0600 	rsb	r6, sl, #0
 80136d4:	4b9f      	ldr	r3, [pc, #636]	; (8013954 <_dtoa_r+0x5f4>)
 80136d6:	4fa0      	ldr	r7, [pc, #640]	; (8013958 <_dtoa_r+0x5f8>)
 80136d8:	f006 020f 	and.w	r2, r6, #15
 80136dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80136e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80136e8:	f7f4 febe 	bl	8008468 <__aeabi_dmul>
 80136ec:	e9cd 0100 	strd	r0, r1, [sp]
 80136f0:	1136      	asrs	r6, r6, #4
 80136f2:	2300      	movs	r3, #0
 80136f4:	2502      	movs	r5, #2
 80136f6:	2e00      	cmp	r6, #0
 80136f8:	d17f      	bne.n	80137fa <_dtoa_r+0x49a>
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d1e1      	bne.n	80136c2 <_dtoa_r+0x362>
 80136fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 8087 	beq.w	8013814 <_dtoa_r+0x4b4>
 8013706:	e9dd 6700 	ldrd	r6, r7, [sp]
 801370a:	2200      	movs	r2, #0
 801370c:	4b93      	ldr	r3, [pc, #588]	; (801395c <_dtoa_r+0x5fc>)
 801370e:	4630      	mov	r0, r6
 8013710:	4639      	mov	r1, r7
 8013712:	f7f5 f91b 	bl	800894c <__aeabi_dcmplt>
 8013716:	2800      	cmp	r0, #0
 8013718:	d07c      	beq.n	8013814 <_dtoa_r+0x4b4>
 801371a:	f1b9 0f00 	cmp.w	r9, #0
 801371e:	d079      	beq.n	8013814 <_dtoa_r+0x4b4>
 8013720:	9b02      	ldr	r3, [sp, #8]
 8013722:	2b00      	cmp	r3, #0
 8013724:	dd35      	ble.n	8013792 <_dtoa_r+0x432>
 8013726:	f10a 33ff 	add.w	r3, sl, #4294967295
 801372a:	9308      	str	r3, [sp, #32]
 801372c:	4639      	mov	r1, r7
 801372e:	2200      	movs	r2, #0
 8013730:	4b8b      	ldr	r3, [pc, #556]	; (8013960 <_dtoa_r+0x600>)
 8013732:	4630      	mov	r0, r6
 8013734:	f7f4 fe98 	bl	8008468 <__aeabi_dmul>
 8013738:	e9cd 0100 	strd	r0, r1, [sp]
 801373c:	9f02      	ldr	r7, [sp, #8]
 801373e:	3501      	adds	r5, #1
 8013740:	4628      	mov	r0, r5
 8013742:	f7f4 fe27 	bl	8008394 <__aeabi_i2d>
 8013746:	e9dd 2300 	ldrd	r2, r3, [sp]
 801374a:	f7f4 fe8d 	bl	8008468 <__aeabi_dmul>
 801374e:	2200      	movs	r2, #0
 8013750:	4b84      	ldr	r3, [pc, #528]	; (8013964 <_dtoa_r+0x604>)
 8013752:	f7f4 fcd3 	bl	80080fc <__adddf3>
 8013756:	4605      	mov	r5, r0
 8013758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801375c:	2f00      	cmp	r7, #0
 801375e:	d15d      	bne.n	801381c <_dtoa_r+0x4bc>
 8013760:	2200      	movs	r2, #0
 8013762:	4b81      	ldr	r3, [pc, #516]	; (8013968 <_dtoa_r+0x608>)
 8013764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013768:	f7f4 fcc6 	bl	80080f8 <__aeabi_dsub>
 801376c:	462a      	mov	r2, r5
 801376e:	4633      	mov	r3, r6
 8013770:	e9cd 0100 	strd	r0, r1, [sp]
 8013774:	f7f5 f908 	bl	8008988 <__aeabi_dcmpgt>
 8013778:	2800      	cmp	r0, #0
 801377a:	f040 8288 	bne.w	8013c8e <_dtoa_r+0x92e>
 801377e:	462a      	mov	r2, r5
 8013780:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013788:	f7f5 f8e0 	bl	800894c <__aeabi_dcmplt>
 801378c:	2800      	cmp	r0, #0
 801378e:	f040 827c 	bne.w	8013c8a <_dtoa_r+0x92a>
 8013792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013796:	e9cd 2300 	strd	r2, r3, [sp]
 801379a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801379c:	2b00      	cmp	r3, #0
 801379e:	f2c0 8150 	blt.w	8013a42 <_dtoa_r+0x6e2>
 80137a2:	f1ba 0f0e 	cmp.w	sl, #14
 80137a6:	f300 814c 	bgt.w	8013a42 <_dtoa_r+0x6e2>
 80137aa:	4b6a      	ldr	r3, [pc, #424]	; (8013954 <_dtoa_r+0x5f4>)
 80137ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80137b0:	ed93 7b00 	vldr	d7, [r3]
 80137b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137bc:	f280 80d8 	bge.w	8013970 <_dtoa_r+0x610>
 80137c0:	f1b9 0f00 	cmp.w	r9, #0
 80137c4:	f300 80d4 	bgt.w	8013970 <_dtoa_r+0x610>
 80137c8:	f040 825e 	bne.w	8013c88 <_dtoa_r+0x928>
 80137cc:	2200      	movs	r2, #0
 80137ce:	4b66      	ldr	r3, [pc, #408]	; (8013968 <_dtoa_r+0x608>)
 80137d0:	ec51 0b17 	vmov	r0, r1, d7
 80137d4:	f7f4 fe48 	bl	8008468 <__aeabi_dmul>
 80137d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137dc:	f7f5 f8ca 	bl	8008974 <__aeabi_dcmpge>
 80137e0:	464f      	mov	r7, r9
 80137e2:	464e      	mov	r6, r9
 80137e4:	2800      	cmp	r0, #0
 80137e6:	f040 8234 	bne.w	8013c52 <_dtoa_r+0x8f2>
 80137ea:	2331      	movs	r3, #49	; 0x31
 80137ec:	f10b 0501 	add.w	r5, fp, #1
 80137f0:	f88b 3000 	strb.w	r3, [fp]
 80137f4:	f10a 0a01 	add.w	sl, sl, #1
 80137f8:	e22f      	b.n	8013c5a <_dtoa_r+0x8fa>
 80137fa:	07f2      	lsls	r2, r6, #31
 80137fc:	d505      	bpl.n	801380a <_dtoa_r+0x4aa>
 80137fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013802:	f7f4 fe31 	bl	8008468 <__aeabi_dmul>
 8013806:	3501      	adds	r5, #1
 8013808:	2301      	movs	r3, #1
 801380a:	1076      	asrs	r6, r6, #1
 801380c:	3708      	adds	r7, #8
 801380e:	e772      	b.n	80136f6 <_dtoa_r+0x396>
 8013810:	2502      	movs	r5, #2
 8013812:	e774      	b.n	80136fe <_dtoa_r+0x39e>
 8013814:	f8cd a020 	str.w	sl, [sp, #32]
 8013818:	464f      	mov	r7, r9
 801381a:	e791      	b.n	8013740 <_dtoa_r+0x3e0>
 801381c:	4b4d      	ldr	r3, [pc, #308]	; (8013954 <_dtoa_r+0x5f4>)
 801381e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013822:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8013826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013828:	2b00      	cmp	r3, #0
 801382a:	d047      	beq.n	80138bc <_dtoa_r+0x55c>
 801382c:	4602      	mov	r2, r0
 801382e:	460b      	mov	r3, r1
 8013830:	2000      	movs	r0, #0
 8013832:	494e      	ldr	r1, [pc, #312]	; (801396c <_dtoa_r+0x60c>)
 8013834:	f7f4 ff42 	bl	80086bc <__aeabi_ddiv>
 8013838:	462a      	mov	r2, r5
 801383a:	4633      	mov	r3, r6
 801383c:	f7f4 fc5c 	bl	80080f8 <__aeabi_dsub>
 8013840:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013844:	465d      	mov	r5, fp
 8013846:	e9dd 0100 	ldrd	r0, r1, [sp]
 801384a:	f7f5 f8bd 	bl	80089c8 <__aeabi_d2iz>
 801384e:	4606      	mov	r6, r0
 8013850:	f7f4 fda0 	bl	8008394 <__aeabi_i2d>
 8013854:	4602      	mov	r2, r0
 8013856:	460b      	mov	r3, r1
 8013858:	e9dd 0100 	ldrd	r0, r1, [sp]
 801385c:	f7f4 fc4c 	bl	80080f8 <__aeabi_dsub>
 8013860:	3630      	adds	r6, #48	; 0x30
 8013862:	f805 6b01 	strb.w	r6, [r5], #1
 8013866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801386a:	e9cd 0100 	strd	r0, r1, [sp]
 801386e:	f7f5 f86d 	bl	800894c <__aeabi_dcmplt>
 8013872:	2800      	cmp	r0, #0
 8013874:	d163      	bne.n	801393e <_dtoa_r+0x5de>
 8013876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801387a:	2000      	movs	r0, #0
 801387c:	4937      	ldr	r1, [pc, #220]	; (801395c <_dtoa_r+0x5fc>)
 801387e:	f7f4 fc3b 	bl	80080f8 <__aeabi_dsub>
 8013882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013886:	f7f5 f861 	bl	800894c <__aeabi_dcmplt>
 801388a:	2800      	cmp	r0, #0
 801388c:	f040 80b7 	bne.w	80139fe <_dtoa_r+0x69e>
 8013890:	eba5 030b 	sub.w	r3, r5, fp
 8013894:	429f      	cmp	r7, r3
 8013896:	f77f af7c 	ble.w	8013792 <_dtoa_r+0x432>
 801389a:	2200      	movs	r2, #0
 801389c:	4b30      	ldr	r3, [pc, #192]	; (8013960 <_dtoa_r+0x600>)
 801389e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80138a2:	f7f4 fde1 	bl	8008468 <__aeabi_dmul>
 80138a6:	2200      	movs	r2, #0
 80138a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80138ac:	4b2c      	ldr	r3, [pc, #176]	; (8013960 <_dtoa_r+0x600>)
 80138ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138b2:	f7f4 fdd9 	bl	8008468 <__aeabi_dmul>
 80138b6:	e9cd 0100 	strd	r0, r1, [sp]
 80138ba:	e7c4      	b.n	8013846 <_dtoa_r+0x4e6>
 80138bc:	462a      	mov	r2, r5
 80138be:	4633      	mov	r3, r6
 80138c0:	f7f4 fdd2 	bl	8008468 <__aeabi_dmul>
 80138c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80138c8:	eb0b 0507 	add.w	r5, fp, r7
 80138cc:	465e      	mov	r6, fp
 80138ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138d2:	f7f5 f879 	bl	80089c8 <__aeabi_d2iz>
 80138d6:	4607      	mov	r7, r0
 80138d8:	f7f4 fd5c 	bl	8008394 <__aeabi_i2d>
 80138dc:	3730      	adds	r7, #48	; 0x30
 80138de:	4602      	mov	r2, r0
 80138e0:	460b      	mov	r3, r1
 80138e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138e6:	f7f4 fc07 	bl	80080f8 <__aeabi_dsub>
 80138ea:	f806 7b01 	strb.w	r7, [r6], #1
 80138ee:	42ae      	cmp	r6, r5
 80138f0:	e9cd 0100 	strd	r0, r1, [sp]
 80138f4:	f04f 0200 	mov.w	r2, #0
 80138f8:	d126      	bne.n	8013948 <_dtoa_r+0x5e8>
 80138fa:	4b1c      	ldr	r3, [pc, #112]	; (801396c <_dtoa_r+0x60c>)
 80138fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013900:	f7f4 fbfc 	bl	80080fc <__adddf3>
 8013904:	4602      	mov	r2, r0
 8013906:	460b      	mov	r3, r1
 8013908:	e9dd 0100 	ldrd	r0, r1, [sp]
 801390c:	f7f5 f83c 	bl	8008988 <__aeabi_dcmpgt>
 8013910:	2800      	cmp	r0, #0
 8013912:	d174      	bne.n	80139fe <_dtoa_r+0x69e>
 8013914:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013918:	2000      	movs	r0, #0
 801391a:	4914      	ldr	r1, [pc, #80]	; (801396c <_dtoa_r+0x60c>)
 801391c:	f7f4 fbec 	bl	80080f8 <__aeabi_dsub>
 8013920:	4602      	mov	r2, r0
 8013922:	460b      	mov	r3, r1
 8013924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013928:	f7f5 f810 	bl	800894c <__aeabi_dcmplt>
 801392c:	2800      	cmp	r0, #0
 801392e:	f43f af30 	beq.w	8013792 <_dtoa_r+0x432>
 8013932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013936:	2b30      	cmp	r3, #48	; 0x30
 8013938:	f105 32ff 	add.w	r2, r5, #4294967295
 801393c:	d002      	beq.n	8013944 <_dtoa_r+0x5e4>
 801393e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013942:	e04a      	b.n	80139da <_dtoa_r+0x67a>
 8013944:	4615      	mov	r5, r2
 8013946:	e7f4      	b.n	8013932 <_dtoa_r+0x5d2>
 8013948:	4b05      	ldr	r3, [pc, #20]	; (8013960 <_dtoa_r+0x600>)
 801394a:	f7f4 fd8d 	bl	8008468 <__aeabi_dmul>
 801394e:	e9cd 0100 	strd	r0, r1, [sp]
 8013952:	e7bc      	b.n	80138ce <_dtoa_r+0x56e>
 8013954:	08015cc0 	.word	0x08015cc0
 8013958:	08015c98 	.word	0x08015c98
 801395c:	3ff00000 	.word	0x3ff00000
 8013960:	40240000 	.word	0x40240000
 8013964:	401c0000 	.word	0x401c0000
 8013968:	40140000 	.word	0x40140000
 801396c:	3fe00000 	.word	0x3fe00000
 8013970:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013974:	465d      	mov	r5, fp
 8013976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801397a:	4630      	mov	r0, r6
 801397c:	4639      	mov	r1, r7
 801397e:	f7f4 fe9d 	bl	80086bc <__aeabi_ddiv>
 8013982:	f7f5 f821 	bl	80089c8 <__aeabi_d2iz>
 8013986:	4680      	mov	r8, r0
 8013988:	f7f4 fd04 	bl	8008394 <__aeabi_i2d>
 801398c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013990:	f7f4 fd6a 	bl	8008468 <__aeabi_dmul>
 8013994:	4602      	mov	r2, r0
 8013996:	460b      	mov	r3, r1
 8013998:	4630      	mov	r0, r6
 801399a:	4639      	mov	r1, r7
 801399c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80139a0:	f7f4 fbaa 	bl	80080f8 <__aeabi_dsub>
 80139a4:	f805 6b01 	strb.w	r6, [r5], #1
 80139a8:	eba5 060b 	sub.w	r6, r5, fp
 80139ac:	45b1      	cmp	r9, r6
 80139ae:	4602      	mov	r2, r0
 80139b0:	460b      	mov	r3, r1
 80139b2:	d139      	bne.n	8013a28 <_dtoa_r+0x6c8>
 80139b4:	f7f4 fba2 	bl	80080fc <__adddf3>
 80139b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139bc:	4606      	mov	r6, r0
 80139be:	460f      	mov	r7, r1
 80139c0:	f7f4 ffe2 	bl	8008988 <__aeabi_dcmpgt>
 80139c4:	b9c8      	cbnz	r0, 80139fa <_dtoa_r+0x69a>
 80139c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139ca:	4630      	mov	r0, r6
 80139cc:	4639      	mov	r1, r7
 80139ce:	f7f4 ffb3 	bl	8008938 <__aeabi_dcmpeq>
 80139d2:	b110      	cbz	r0, 80139da <_dtoa_r+0x67a>
 80139d4:	f018 0f01 	tst.w	r8, #1
 80139d8:	d10f      	bne.n	80139fa <_dtoa_r+0x69a>
 80139da:	9904      	ldr	r1, [sp, #16]
 80139dc:	4620      	mov	r0, r4
 80139de:	f000 ffdd 	bl	801499c <_Bfree>
 80139e2:	2300      	movs	r3, #0
 80139e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139e6:	702b      	strb	r3, [r5, #0]
 80139e8:	f10a 0301 	add.w	r3, sl, #1
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 8241 	beq.w	8013e78 <_dtoa_r+0xb18>
 80139f6:	601d      	str	r5, [r3, #0]
 80139f8:	e23e      	b.n	8013e78 <_dtoa_r+0xb18>
 80139fa:	f8cd a020 	str.w	sl, [sp, #32]
 80139fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013a02:	2a39      	cmp	r2, #57	; 0x39
 8013a04:	f105 33ff 	add.w	r3, r5, #4294967295
 8013a08:	d108      	bne.n	8013a1c <_dtoa_r+0x6bc>
 8013a0a:	459b      	cmp	fp, r3
 8013a0c:	d10a      	bne.n	8013a24 <_dtoa_r+0x6c4>
 8013a0e:	9b08      	ldr	r3, [sp, #32]
 8013a10:	3301      	adds	r3, #1
 8013a12:	9308      	str	r3, [sp, #32]
 8013a14:	2330      	movs	r3, #48	; 0x30
 8013a16:	f88b 3000 	strb.w	r3, [fp]
 8013a1a:	465b      	mov	r3, fp
 8013a1c:	781a      	ldrb	r2, [r3, #0]
 8013a1e:	3201      	adds	r2, #1
 8013a20:	701a      	strb	r2, [r3, #0]
 8013a22:	e78c      	b.n	801393e <_dtoa_r+0x5de>
 8013a24:	461d      	mov	r5, r3
 8013a26:	e7ea      	b.n	80139fe <_dtoa_r+0x69e>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4b9b      	ldr	r3, [pc, #620]	; (8013c98 <_dtoa_r+0x938>)
 8013a2c:	f7f4 fd1c 	bl	8008468 <__aeabi_dmul>
 8013a30:	2200      	movs	r2, #0
 8013a32:	2300      	movs	r3, #0
 8013a34:	4606      	mov	r6, r0
 8013a36:	460f      	mov	r7, r1
 8013a38:	f7f4 ff7e 	bl	8008938 <__aeabi_dcmpeq>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d09a      	beq.n	8013976 <_dtoa_r+0x616>
 8013a40:	e7cb      	b.n	80139da <_dtoa_r+0x67a>
 8013a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a44:	2a00      	cmp	r2, #0
 8013a46:	f000 808b 	beq.w	8013b60 <_dtoa_r+0x800>
 8013a4a:	9a06      	ldr	r2, [sp, #24]
 8013a4c:	2a01      	cmp	r2, #1
 8013a4e:	dc6e      	bgt.n	8013b2e <_dtoa_r+0x7ce>
 8013a50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a52:	2a00      	cmp	r2, #0
 8013a54:	d067      	beq.n	8013b26 <_dtoa_r+0x7c6>
 8013a56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013a5a:	9f07      	ldr	r7, [sp, #28]
 8013a5c:	9d05      	ldr	r5, [sp, #20]
 8013a5e:	9a05      	ldr	r2, [sp, #20]
 8013a60:	2101      	movs	r1, #1
 8013a62:	441a      	add	r2, r3
 8013a64:	4620      	mov	r0, r4
 8013a66:	9205      	str	r2, [sp, #20]
 8013a68:	4498      	add	r8, r3
 8013a6a:	f001 f875 	bl	8014b58 <__i2b>
 8013a6e:	4606      	mov	r6, r0
 8013a70:	2d00      	cmp	r5, #0
 8013a72:	dd0c      	ble.n	8013a8e <_dtoa_r+0x72e>
 8013a74:	f1b8 0f00 	cmp.w	r8, #0
 8013a78:	dd09      	ble.n	8013a8e <_dtoa_r+0x72e>
 8013a7a:	4545      	cmp	r5, r8
 8013a7c:	9a05      	ldr	r2, [sp, #20]
 8013a7e:	462b      	mov	r3, r5
 8013a80:	bfa8      	it	ge
 8013a82:	4643      	movge	r3, r8
 8013a84:	1ad2      	subs	r2, r2, r3
 8013a86:	9205      	str	r2, [sp, #20]
 8013a88:	1aed      	subs	r5, r5, r3
 8013a8a:	eba8 0803 	sub.w	r8, r8, r3
 8013a8e:	9b07      	ldr	r3, [sp, #28]
 8013a90:	b1eb      	cbz	r3, 8013ace <_dtoa_r+0x76e>
 8013a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d067      	beq.n	8013b68 <_dtoa_r+0x808>
 8013a98:	b18f      	cbz	r7, 8013abe <_dtoa_r+0x75e>
 8013a9a:	4631      	mov	r1, r6
 8013a9c:	463a      	mov	r2, r7
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f001 f8fa 	bl	8014c98 <__pow5mult>
 8013aa4:	9a04      	ldr	r2, [sp, #16]
 8013aa6:	4601      	mov	r1, r0
 8013aa8:	4606      	mov	r6, r0
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f001 f85d 	bl	8014b6a <__multiply>
 8013ab0:	9904      	ldr	r1, [sp, #16]
 8013ab2:	9008      	str	r0, [sp, #32]
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f000 ff71 	bl	801499c <_Bfree>
 8013aba:	9b08      	ldr	r3, [sp, #32]
 8013abc:	9304      	str	r3, [sp, #16]
 8013abe:	9b07      	ldr	r3, [sp, #28]
 8013ac0:	1bda      	subs	r2, r3, r7
 8013ac2:	d004      	beq.n	8013ace <_dtoa_r+0x76e>
 8013ac4:	9904      	ldr	r1, [sp, #16]
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f001 f8e6 	bl	8014c98 <__pow5mult>
 8013acc:	9004      	str	r0, [sp, #16]
 8013ace:	2101      	movs	r1, #1
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f001 f841 	bl	8014b58 <__i2b>
 8013ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad8:	4607      	mov	r7, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	f000 81d0 	beq.w	8013e80 <_dtoa_r+0xb20>
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	4601      	mov	r1, r0
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f001 f8d7 	bl	8014c98 <__pow5mult>
 8013aea:	9b06      	ldr	r3, [sp, #24]
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	4607      	mov	r7, r0
 8013af0:	dc40      	bgt.n	8013b74 <_dtoa_r+0x814>
 8013af2:	9b00      	ldr	r3, [sp, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d139      	bne.n	8013b6c <_dtoa_r+0x80c>
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d136      	bne.n	8013b70 <_dtoa_r+0x810>
 8013b02:	9b01      	ldr	r3, [sp, #4]
 8013b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b08:	0d1b      	lsrs	r3, r3, #20
 8013b0a:	051b      	lsls	r3, r3, #20
 8013b0c:	b12b      	cbz	r3, 8013b1a <_dtoa_r+0x7ba>
 8013b0e:	9b05      	ldr	r3, [sp, #20]
 8013b10:	3301      	adds	r3, #1
 8013b12:	9305      	str	r3, [sp, #20]
 8013b14:	f108 0801 	add.w	r8, r8, #1
 8013b18:	2301      	movs	r3, #1
 8013b1a:	9307      	str	r3, [sp, #28]
 8013b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d12a      	bne.n	8013b78 <_dtoa_r+0x818>
 8013b22:	2001      	movs	r0, #1
 8013b24:	e030      	b.n	8013b88 <_dtoa_r+0x828>
 8013b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013b2c:	e795      	b.n	8013a5a <_dtoa_r+0x6fa>
 8013b2e:	9b07      	ldr	r3, [sp, #28]
 8013b30:	f109 37ff 	add.w	r7, r9, #4294967295
 8013b34:	42bb      	cmp	r3, r7
 8013b36:	bfbf      	itttt	lt
 8013b38:	9b07      	ldrlt	r3, [sp, #28]
 8013b3a:	9707      	strlt	r7, [sp, #28]
 8013b3c:	1afa      	sublt	r2, r7, r3
 8013b3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013b40:	bfbb      	ittet	lt
 8013b42:	189b      	addlt	r3, r3, r2
 8013b44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013b46:	1bdf      	subge	r7, r3, r7
 8013b48:	2700      	movlt	r7, #0
 8013b4a:	f1b9 0f00 	cmp.w	r9, #0
 8013b4e:	bfb5      	itete	lt
 8013b50:	9b05      	ldrlt	r3, [sp, #20]
 8013b52:	9d05      	ldrge	r5, [sp, #20]
 8013b54:	eba3 0509 	sublt.w	r5, r3, r9
 8013b58:	464b      	movge	r3, r9
 8013b5a:	bfb8      	it	lt
 8013b5c:	2300      	movlt	r3, #0
 8013b5e:	e77e      	b.n	8013a5e <_dtoa_r+0x6fe>
 8013b60:	9f07      	ldr	r7, [sp, #28]
 8013b62:	9d05      	ldr	r5, [sp, #20]
 8013b64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013b66:	e783      	b.n	8013a70 <_dtoa_r+0x710>
 8013b68:	9a07      	ldr	r2, [sp, #28]
 8013b6a:	e7ab      	b.n	8013ac4 <_dtoa_r+0x764>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e7d4      	b.n	8013b1a <_dtoa_r+0x7ba>
 8013b70:	9b00      	ldr	r3, [sp, #0]
 8013b72:	e7d2      	b.n	8013b1a <_dtoa_r+0x7ba>
 8013b74:	2300      	movs	r3, #0
 8013b76:	9307      	str	r3, [sp, #28]
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013b7e:	6918      	ldr	r0, [r3, #16]
 8013b80:	f000 ff9c 	bl	8014abc <__hi0bits>
 8013b84:	f1c0 0020 	rsb	r0, r0, #32
 8013b88:	4440      	add	r0, r8
 8013b8a:	f010 001f 	ands.w	r0, r0, #31
 8013b8e:	d047      	beq.n	8013c20 <_dtoa_r+0x8c0>
 8013b90:	f1c0 0320 	rsb	r3, r0, #32
 8013b94:	2b04      	cmp	r3, #4
 8013b96:	dd3b      	ble.n	8013c10 <_dtoa_r+0x8b0>
 8013b98:	9b05      	ldr	r3, [sp, #20]
 8013b9a:	f1c0 001c 	rsb	r0, r0, #28
 8013b9e:	4403      	add	r3, r0
 8013ba0:	9305      	str	r3, [sp, #20]
 8013ba2:	4405      	add	r5, r0
 8013ba4:	4480      	add	r8, r0
 8013ba6:	9b05      	ldr	r3, [sp, #20]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	dd05      	ble.n	8013bb8 <_dtoa_r+0x858>
 8013bac:	461a      	mov	r2, r3
 8013bae:	9904      	ldr	r1, [sp, #16]
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f001 f8bf 	bl	8014d34 <__lshift>
 8013bb6:	9004      	str	r0, [sp, #16]
 8013bb8:	f1b8 0f00 	cmp.w	r8, #0
 8013bbc:	dd05      	ble.n	8013bca <_dtoa_r+0x86a>
 8013bbe:	4639      	mov	r1, r7
 8013bc0:	4642      	mov	r2, r8
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f001 f8b6 	bl	8014d34 <__lshift>
 8013bc8:	4607      	mov	r7, r0
 8013bca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013bcc:	b353      	cbz	r3, 8013c24 <_dtoa_r+0x8c4>
 8013bce:	4639      	mov	r1, r7
 8013bd0:	9804      	ldr	r0, [sp, #16]
 8013bd2:	f001 f903 	bl	8014ddc <__mcmp>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	da24      	bge.n	8013c24 <_dtoa_r+0x8c4>
 8013bda:	2300      	movs	r3, #0
 8013bdc:	220a      	movs	r2, #10
 8013bde:	9904      	ldr	r1, [sp, #16]
 8013be0:	4620      	mov	r0, r4
 8013be2:	f000 fef2 	bl	80149ca <__multadd>
 8013be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013be8:	9004      	str	r0, [sp, #16]
 8013bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	f000 814d 	beq.w	8013e8e <_dtoa_r+0xb2e>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	4631      	mov	r1, r6
 8013bf8:	220a      	movs	r2, #10
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f000 fee5 	bl	80149ca <__multadd>
 8013c00:	9b02      	ldr	r3, [sp, #8]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	4606      	mov	r6, r0
 8013c06:	dc4f      	bgt.n	8013ca8 <_dtoa_r+0x948>
 8013c08:	9b06      	ldr	r3, [sp, #24]
 8013c0a:	2b02      	cmp	r3, #2
 8013c0c:	dd4c      	ble.n	8013ca8 <_dtoa_r+0x948>
 8013c0e:	e011      	b.n	8013c34 <_dtoa_r+0x8d4>
 8013c10:	d0c9      	beq.n	8013ba6 <_dtoa_r+0x846>
 8013c12:	9a05      	ldr	r2, [sp, #20]
 8013c14:	331c      	adds	r3, #28
 8013c16:	441a      	add	r2, r3
 8013c18:	9205      	str	r2, [sp, #20]
 8013c1a:	441d      	add	r5, r3
 8013c1c:	4498      	add	r8, r3
 8013c1e:	e7c2      	b.n	8013ba6 <_dtoa_r+0x846>
 8013c20:	4603      	mov	r3, r0
 8013c22:	e7f6      	b.n	8013c12 <_dtoa_r+0x8b2>
 8013c24:	f1b9 0f00 	cmp.w	r9, #0
 8013c28:	dc38      	bgt.n	8013c9c <_dtoa_r+0x93c>
 8013c2a:	9b06      	ldr	r3, [sp, #24]
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	dd35      	ble.n	8013c9c <_dtoa_r+0x93c>
 8013c30:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c34:	9b02      	ldr	r3, [sp, #8]
 8013c36:	b963      	cbnz	r3, 8013c52 <_dtoa_r+0x8f2>
 8013c38:	4639      	mov	r1, r7
 8013c3a:	2205      	movs	r2, #5
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f000 fec4 	bl	80149ca <__multadd>
 8013c42:	4601      	mov	r1, r0
 8013c44:	4607      	mov	r7, r0
 8013c46:	9804      	ldr	r0, [sp, #16]
 8013c48:	f001 f8c8 	bl	8014ddc <__mcmp>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	f73f adcc 	bgt.w	80137ea <_dtoa_r+0x48a>
 8013c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c54:	465d      	mov	r5, fp
 8013c56:	ea6f 0a03 	mvn.w	sl, r3
 8013c5a:	f04f 0900 	mov.w	r9, #0
 8013c5e:	4639      	mov	r1, r7
 8013c60:	4620      	mov	r0, r4
 8013c62:	f000 fe9b 	bl	801499c <_Bfree>
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	f43f aeb7 	beq.w	80139da <_dtoa_r+0x67a>
 8013c6c:	f1b9 0f00 	cmp.w	r9, #0
 8013c70:	d005      	beq.n	8013c7e <_dtoa_r+0x91e>
 8013c72:	45b1      	cmp	r9, r6
 8013c74:	d003      	beq.n	8013c7e <_dtoa_r+0x91e>
 8013c76:	4649      	mov	r1, r9
 8013c78:	4620      	mov	r0, r4
 8013c7a:	f000 fe8f 	bl	801499c <_Bfree>
 8013c7e:	4631      	mov	r1, r6
 8013c80:	4620      	mov	r0, r4
 8013c82:	f000 fe8b 	bl	801499c <_Bfree>
 8013c86:	e6a8      	b.n	80139da <_dtoa_r+0x67a>
 8013c88:	2700      	movs	r7, #0
 8013c8a:	463e      	mov	r6, r7
 8013c8c:	e7e1      	b.n	8013c52 <_dtoa_r+0x8f2>
 8013c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013c92:	463e      	mov	r6, r7
 8013c94:	e5a9      	b.n	80137ea <_dtoa_r+0x48a>
 8013c96:	bf00      	nop
 8013c98:	40240000 	.word	0x40240000
 8013c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	f000 80fa 	beq.w	8013e9c <_dtoa_r+0xb3c>
 8013ca8:	2d00      	cmp	r5, #0
 8013caa:	dd05      	ble.n	8013cb8 <_dtoa_r+0x958>
 8013cac:	4631      	mov	r1, r6
 8013cae:	462a      	mov	r2, r5
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f001 f83f 	bl	8014d34 <__lshift>
 8013cb6:	4606      	mov	r6, r0
 8013cb8:	9b07      	ldr	r3, [sp, #28]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d04c      	beq.n	8013d58 <_dtoa_r+0x9f8>
 8013cbe:	6871      	ldr	r1, [r6, #4]
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f000 fe37 	bl	8014934 <_Balloc>
 8013cc6:	6932      	ldr	r2, [r6, #16]
 8013cc8:	3202      	adds	r2, #2
 8013cca:	4605      	mov	r5, r0
 8013ccc:	0092      	lsls	r2, r2, #2
 8013cce:	f106 010c 	add.w	r1, r6, #12
 8013cd2:	300c      	adds	r0, #12
 8013cd4:	f7fd fc32 	bl	801153c <memcpy>
 8013cd8:	2201      	movs	r2, #1
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f001 f829 	bl	8014d34 <__lshift>
 8013ce2:	9b00      	ldr	r3, [sp, #0]
 8013ce4:	f8cd b014 	str.w	fp, [sp, #20]
 8013ce8:	f003 0301 	and.w	r3, r3, #1
 8013cec:	46b1      	mov	r9, r6
 8013cee:	9307      	str	r3, [sp, #28]
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	4639      	mov	r1, r7
 8013cf4:	9804      	ldr	r0, [sp, #16]
 8013cf6:	f7ff faa5 	bl	8013244 <quorem>
 8013cfa:	4649      	mov	r1, r9
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013d02:	9804      	ldr	r0, [sp, #16]
 8013d04:	f001 f86a 	bl	8014ddc <__mcmp>
 8013d08:	4632      	mov	r2, r6
 8013d0a:	9000      	str	r0, [sp, #0]
 8013d0c:	4639      	mov	r1, r7
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f001 f87e 	bl	8014e10 <__mdiff>
 8013d14:	68c3      	ldr	r3, [r0, #12]
 8013d16:	4602      	mov	r2, r0
 8013d18:	bb03      	cbnz	r3, 8013d5c <_dtoa_r+0x9fc>
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	9008      	str	r0, [sp, #32]
 8013d1e:	9804      	ldr	r0, [sp, #16]
 8013d20:	f001 f85c 	bl	8014ddc <__mcmp>
 8013d24:	9a08      	ldr	r2, [sp, #32]
 8013d26:	4603      	mov	r3, r0
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	9308      	str	r3, [sp, #32]
 8013d2e:	f000 fe35 	bl	801499c <_Bfree>
 8013d32:	9b08      	ldr	r3, [sp, #32]
 8013d34:	b9a3      	cbnz	r3, 8013d60 <_dtoa_r+0xa00>
 8013d36:	9a06      	ldr	r2, [sp, #24]
 8013d38:	b992      	cbnz	r2, 8013d60 <_dtoa_r+0xa00>
 8013d3a:	9a07      	ldr	r2, [sp, #28]
 8013d3c:	b982      	cbnz	r2, 8013d60 <_dtoa_r+0xa00>
 8013d3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013d42:	d029      	beq.n	8013d98 <_dtoa_r+0xa38>
 8013d44:	9b00      	ldr	r3, [sp, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	dd01      	ble.n	8013d4e <_dtoa_r+0x9ee>
 8013d4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013d4e:	9b05      	ldr	r3, [sp, #20]
 8013d50:	1c5d      	adds	r5, r3, #1
 8013d52:	f883 8000 	strb.w	r8, [r3]
 8013d56:	e782      	b.n	8013c5e <_dtoa_r+0x8fe>
 8013d58:	4630      	mov	r0, r6
 8013d5a:	e7c2      	b.n	8013ce2 <_dtoa_r+0x982>
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	e7e3      	b.n	8013d28 <_dtoa_r+0x9c8>
 8013d60:	9a00      	ldr	r2, [sp, #0]
 8013d62:	2a00      	cmp	r2, #0
 8013d64:	db04      	blt.n	8013d70 <_dtoa_r+0xa10>
 8013d66:	d125      	bne.n	8013db4 <_dtoa_r+0xa54>
 8013d68:	9a06      	ldr	r2, [sp, #24]
 8013d6a:	bb1a      	cbnz	r2, 8013db4 <_dtoa_r+0xa54>
 8013d6c:	9a07      	ldr	r2, [sp, #28]
 8013d6e:	bb0a      	cbnz	r2, 8013db4 <_dtoa_r+0xa54>
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	ddec      	ble.n	8013d4e <_dtoa_r+0x9ee>
 8013d74:	2201      	movs	r2, #1
 8013d76:	9904      	ldr	r1, [sp, #16]
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f000 ffdb 	bl	8014d34 <__lshift>
 8013d7e:	4639      	mov	r1, r7
 8013d80:	9004      	str	r0, [sp, #16]
 8013d82:	f001 f82b 	bl	8014ddc <__mcmp>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	dc03      	bgt.n	8013d92 <_dtoa_r+0xa32>
 8013d8a:	d1e0      	bne.n	8013d4e <_dtoa_r+0x9ee>
 8013d8c:	f018 0f01 	tst.w	r8, #1
 8013d90:	d0dd      	beq.n	8013d4e <_dtoa_r+0x9ee>
 8013d92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013d96:	d1d8      	bne.n	8013d4a <_dtoa_r+0x9ea>
 8013d98:	9b05      	ldr	r3, [sp, #20]
 8013d9a:	9a05      	ldr	r2, [sp, #20]
 8013d9c:	1c5d      	adds	r5, r3, #1
 8013d9e:	2339      	movs	r3, #57	; 0x39
 8013da0:	7013      	strb	r3, [r2, #0]
 8013da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013da6:	2b39      	cmp	r3, #57	; 0x39
 8013da8:	f105 32ff 	add.w	r2, r5, #4294967295
 8013dac:	d04f      	beq.n	8013e4e <_dtoa_r+0xaee>
 8013dae:	3301      	adds	r3, #1
 8013db0:	7013      	strb	r3, [r2, #0]
 8013db2:	e754      	b.n	8013c5e <_dtoa_r+0x8fe>
 8013db4:	9a05      	ldr	r2, [sp, #20]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	f102 0501 	add.w	r5, r2, #1
 8013dbc:	dd06      	ble.n	8013dcc <_dtoa_r+0xa6c>
 8013dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013dc2:	d0e9      	beq.n	8013d98 <_dtoa_r+0xa38>
 8013dc4:	f108 0801 	add.w	r8, r8, #1
 8013dc8:	9b05      	ldr	r3, [sp, #20]
 8013dca:	e7c2      	b.n	8013d52 <_dtoa_r+0x9f2>
 8013dcc:	9a02      	ldr	r2, [sp, #8]
 8013dce:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013dd2:	eba5 030b 	sub.w	r3, r5, fp
 8013dd6:	4293      	cmp	r3, r2
 8013dd8:	d021      	beq.n	8013e1e <_dtoa_r+0xabe>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	220a      	movs	r2, #10
 8013dde:	9904      	ldr	r1, [sp, #16]
 8013de0:	4620      	mov	r0, r4
 8013de2:	f000 fdf2 	bl	80149ca <__multadd>
 8013de6:	45b1      	cmp	r9, r6
 8013de8:	9004      	str	r0, [sp, #16]
 8013dea:	f04f 0300 	mov.w	r3, #0
 8013dee:	f04f 020a 	mov.w	r2, #10
 8013df2:	4649      	mov	r1, r9
 8013df4:	4620      	mov	r0, r4
 8013df6:	d105      	bne.n	8013e04 <_dtoa_r+0xaa4>
 8013df8:	f000 fde7 	bl	80149ca <__multadd>
 8013dfc:	4681      	mov	r9, r0
 8013dfe:	4606      	mov	r6, r0
 8013e00:	9505      	str	r5, [sp, #20]
 8013e02:	e776      	b.n	8013cf2 <_dtoa_r+0x992>
 8013e04:	f000 fde1 	bl	80149ca <__multadd>
 8013e08:	4631      	mov	r1, r6
 8013e0a:	4681      	mov	r9, r0
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	220a      	movs	r2, #10
 8013e10:	4620      	mov	r0, r4
 8013e12:	f000 fdda 	bl	80149ca <__multadd>
 8013e16:	4606      	mov	r6, r0
 8013e18:	e7f2      	b.n	8013e00 <_dtoa_r+0xaa0>
 8013e1a:	f04f 0900 	mov.w	r9, #0
 8013e1e:	2201      	movs	r2, #1
 8013e20:	9904      	ldr	r1, [sp, #16]
 8013e22:	4620      	mov	r0, r4
 8013e24:	f000 ff86 	bl	8014d34 <__lshift>
 8013e28:	4639      	mov	r1, r7
 8013e2a:	9004      	str	r0, [sp, #16]
 8013e2c:	f000 ffd6 	bl	8014ddc <__mcmp>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	dcb6      	bgt.n	8013da2 <_dtoa_r+0xa42>
 8013e34:	d102      	bne.n	8013e3c <_dtoa_r+0xadc>
 8013e36:	f018 0f01 	tst.w	r8, #1
 8013e3a:	d1b2      	bne.n	8013da2 <_dtoa_r+0xa42>
 8013e3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e40:	2b30      	cmp	r3, #48	; 0x30
 8013e42:	f105 32ff 	add.w	r2, r5, #4294967295
 8013e46:	f47f af0a 	bne.w	8013c5e <_dtoa_r+0x8fe>
 8013e4a:	4615      	mov	r5, r2
 8013e4c:	e7f6      	b.n	8013e3c <_dtoa_r+0xadc>
 8013e4e:	4593      	cmp	fp, r2
 8013e50:	d105      	bne.n	8013e5e <_dtoa_r+0xafe>
 8013e52:	2331      	movs	r3, #49	; 0x31
 8013e54:	f10a 0a01 	add.w	sl, sl, #1
 8013e58:	f88b 3000 	strb.w	r3, [fp]
 8013e5c:	e6ff      	b.n	8013c5e <_dtoa_r+0x8fe>
 8013e5e:	4615      	mov	r5, r2
 8013e60:	e79f      	b.n	8013da2 <_dtoa_r+0xa42>
 8013e62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013ec8 <_dtoa_r+0xb68>
 8013e66:	e007      	b.n	8013e78 <_dtoa_r+0xb18>
 8013e68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013ecc <_dtoa_r+0xb6c>
 8013e6e:	b11b      	cbz	r3, 8013e78 <_dtoa_r+0xb18>
 8013e70:	f10b 0308 	add.w	r3, fp, #8
 8013e74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e76:	6013      	str	r3, [r2, #0]
 8013e78:	4658      	mov	r0, fp
 8013e7a:	b017      	add	sp, #92	; 0x5c
 8013e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e80:	9b06      	ldr	r3, [sp, #24]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	f77f ae35 	ble.w	8013af2 <_dtoa_r+0x792>
 8013e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	e649      	b.n	8013b22 <_dtoa_r+0x7c2>
 8013e8e:	9b02      	ldr	r3, [sp, #8]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	dc03      	bgt.n	8013e9c <_dtoa_r+0xb3c>
 8013e94:	9b06      	ldr	r3, [sp, #24]
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	f73f aecc 	bgt.w	8013c34 <_dtoa_r+0x8d4>
 8013e9c:	465d      	mov	r5, fp
 8013e9e:	4639      	mov	r1, r7
 8013ea0:	9804      	ldr	r0, [sp, #16]
 8013ea2:	f7ff f9cf 	bl	8013244 <quorem>
 8013ea6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013eaa:	f805 8b01 	strb.w	r8, [r5], #1
 8013eae:	9a02      	ldr	r2, [sp, #8]
 8013eb0:	eba5 030b 	sub.w	r3, r5, fp
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	ddb0      	ble.n	8013e1a <_dtoa_r+0xaba>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	220a      	movs	r2, #10
 8013ebc:	9904      	ldr	r1, [sp, #16]
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f000 fd83 	bl	80149ca <__multadd>
 8013ec4:	9004      	str	r0, [sp, #16]
 8013ec6:	e7ea      	b.n	8013e9e <_dtoa_r+0xb3e>
 8013ec8:	08015b9c 	.word	0x08015b9c
 8013ecc:	08015c18 	.word	0x08015c18

08013ed0 <__sflush_r>:
 8013ed0:	898a      	ldrh	r2, [r1, #12]
 8013ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed6:	4605      	mov	r5, r0
 8013ed8:	0710      	lsls	r0, r2, #28
 8013eda:	460c      	mov	r4, r1
 8013edc:	d458      	bmi.n	8013f90 <__sflush_r+0xc0>
 8013ede:	684b      	ldr	r3, [r1, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	dc05      	bgt.n	8013ef0 <__sflush_r+0x20>
 8013ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	dc02      	bgt.n	8013ef0 <__sflush_r+0x20>
 8013eea:	2000      	movs	r0, #0
 8013eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ef2:	2e00      	cmp	r6, #0
 8013ef4:	d0f9      	beq.n	8013eea <__sflush_r+0x1a>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013efc:	682f      	ldr	r7, [r5, #0]
 8013efe:	6a21      	ldr	r1, [r4, #32]
 8013f00:	602b      	str	r3, [r5, #0]
 8013f02:	d032      	beq.n	8013f6a <__sflush_r+0x9a>
 8013f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f06:	89a3      	ldrh	r3, [r4, #12]
 8013f08:	075a      	lsls	r2, r3, #29
 8013f0a:	d505      	bpl.n	8013f18 <__sflush_r+0x48>
 8013f0c:	6863      	ldr	r3, [r4, #4]
 8013f0e:	1ac0      	subs	r0, r0, r3
 8013f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f12:	b10b      	cbz	r3, 8013f18 <__sflush_r+0x48>
 8013f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f16:	1ac0      	subs	r0, r0, r3
 8013f18:	2300      	movs	r3, #0
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f1e:	6a21      	ldr	r1, [r4, #32]
 8013f20:	4628      	mov	r0, r5
 8013f22:	47b0      	blx	r6
 8013f24:	1c43      	adds	r3, r0, #1
 8013f26:	89a3      	ldrh	r3, [r4, #12]
 8013f28:	d106      	bne.n	8013f38 <__sflush_r+0x68>
 8013f2a:	6829      	ldr	r1, [r5, #0]
 8013f2c:	291d      	cmp	r1, #29
 8013f2e:	d848      	bhi.n	8013fc2 <__sflush_r+0xf2>
 8013f30:	4a29      	ldr	r2, [pc, #164]	; (8013fd8 <__sflush_r+0x108>)
 8013f32:	40ca      	lsrs	r2, r1
 8013f34:	07d6      	lsls	r6, r2, #31
 8013f36:	d544      	bpl.n	8013fc2 <__sflush_r+0xf2>
 8013f38:	2200      	movs	r2, #0
 8013f3a:	6062      	str	r2, [r4, #4]
 8013f3c:	04d9      	lsls	r1, r3, #19
 8013f3e:	6922      	ldr	r2, [r4, #16]
 8013f40:	6022      	str	r2, [r4, #0]
 8013f42:	d504      	bpl.n	8013f4e <__sflush_r+0x7e>
 8013f44:	1c42      	adds	r2, r0, #1
 8013f46:	d101      	bne.n	8013f4c <__sflush_r+0x7c>
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	b903      	cbnz	r3, 8013f4e <__sflush_r+0x7e>
 8013f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8013f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f50:	602f      	str	r7, [r5, #0]
 8013f52:	2900      	cmp	r1, #0
 8013f54:	d0c9      	beq.n	8013eea <__sflush_r+0x1a>
 8013f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f5a:	4299      	cmp	r1, r3
 8013f5c:	d002      	beq.n	8013f64 <__sflush_r+0x94>
 8013f5e:	4628      	mov	r0, r5
 8013f60:	f001 f8f6 	bl	8015150 <_free_r>
 8013f64:	2000      	movs	r0, #0
 8013f66:	6360      	str	r0, [r4, #52]	; 0x34
 8013f68:	e7c0      	b.n	8013eec <__sflush_r+0x1c>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	47b0      	blx	r6
 8013f70:	1c41      	adds	r1, r0, #1
 8013f72:	d1c8      	bne.n	8013f06 <__sflush_r+0x36>
 8013f74:	682b      	ldr	r3, [r5, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d0c5      	beq.n	8013f06 <__sflush_r+0x36>
 8013f7a:	2b1d      	cmp	r3, #29
 8013f7c:	d001      	beq.n	8013f82 <__sflush_r+0xb2>
 8013f7e:	2b16      	cmp	r3, #22
 8013f80:	d101      	bne.n	8013f86 <__sflush_r+0xb6>
 8013f82:	602f      	str	r7, [r5, #0]
 8013f84:	e7b1      	b.n	8013eea <__sflush_r+0x1a>
 8013f86:	89a3      	ldrh	r3, [r4, #12]
 8013f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f8c:	81a3      	strh	r3, [r4, #12]
 8013f8e:	e7ad      	b.n	8013eec <__sflush_r+0x1c>
 8013f90:	690f      	ldr	r7, [r1, #16]
 8013f92:	2f00      	cmp	r7, #0
 8013f94:	d0a9      	beq.n	8013eea <__sflush_r+0x1a>
 8013f96:	0793      	lsls	r3, r2, #30
 8013f98:	680e      	ldr	r6, [r1, #0]
 8013f9a:	bf08      	it	eq
 8013f9c:	694b      	ldreq	r3, [r1, #20]
 8013f9e:	600f      	str	r7, [r1, #0]
 8013fa0:	bf18      	it	ne
 8013fa2:	2300      	movne	r3, #0
 8013fa4:	eba6 0807 	sub.w	r8, r6, r7
 8013fa8:	608b      	str	r3, [r1, #8]
 8013faa:	f1b8 0f00 	cmp.w	r8, #0
 8013fae:	dd9c      	ble.n	8013eea <__sflush_r+0x1a>
 8013fb0:	4643      	mov	r3, r8
 8013fb2:	463a      	mov	r2, r7
 8013fb4:	6a21      	ldr	r1, [r4, #32]
 8013fb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013fb8:	4628      	mov	r0, r5
 8013fba:	47b0      	blx	r6
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	dc06      	bgt.n	8013fce <__sflush_r+0xfe>
 8013fc0:	89a3      	ldrh	r3, [r4, #12]
 8013fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fc6:	81a3      	strh	r3, [r4, #12]
 8013fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fcc:	e78e      	b.n	8013eec <__sflush_r+0x1c>
 8013fce:	4407      	add	r7, r0
 8013fd0:	eba8 0800 	sub.w	r8, r8, r0
 8013fd4:	e7e9      	b.n	8013faa <__sflush_r+0xda>
 8013fd6:	bf00      	nop
 8013fd8:	20400001 	.word	0x20400001

08013fdc <_fflush_r>:
 8013fdc:	b538      	push	{r3, r4, r5, lr}
 8013fde:	690b      	ldr	r3, [r1, #16]
 8013fe0:	4605      	mov	r5, r0
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	b1db      	cbz	r3, 801401e <_fflush_r+0x42>
 8013fe6:	b118      	cbz	r0, 8013ff0 <_fflush_r+0x14>
 8013fe8:	6983      	ldr	r3, [r0, #24]
 8013fea:	b90b      	cbnz	r3, 8013ff0 <_fflush_r+0x14>
 8013fec:	f000 f860 	bl	80140b0 <__sinit>
 8013ff0:	4b0c      	ldr	r3, [pc, #48]	; (8014024 <_fflush_r+0x48>)
 8013ff2:	429c      	cmp	r4, r3
 8013ff4:	d109      	bne.n	801400a <_fflush_r+0x2e>
 8013ff6:	686c      	ldr	r4, [r5, #4]
 8013ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ffc:	b17b      	cbz	r3, 801401e <_fflush_r+0x42>
 8013ffe:	4621      	mov	r1, r4
 8014000:	4628      	mov	r0, r5
 8014002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014006:	f7ff bf63 	b.w	8013ed0 <__sflush_r>
 801400a:	4b07      	ldr	r3, [pc, #28]	; (8014028 <_fflush_r+0x4c>)
 801400c:	429c      	cmp	r4, r3
 801400e:	d101      	bne.n	8014014 <_fflush_r+0x38>
 8014010:	68ac      	ldr	r4, [r5, #8]
 8014012:	e7f1      	b.n	8013ff8 <_fflush_r+0x1c>
 8014014:	4b05      	ldr	r3, [pc, #20]	; (801402c <_fflush_r+0x50>)
 8014016:	429c      	cmp	r4, r3
 8014018:	bf08      	it	eq
 801401a:	68ec      	ldreq	r4, [r5, #12]
 801401c:	e7ec      	b.n	8013ff8 <_fflush_r+0x1c>
 801401e:	2000      	movs	r0, #0
 8014020:	bd38      	pop	{r3, r4, r5, pc}
 8014022:	bf00      	nop
 8014024:	08015c48 	.word	0x08015c48
 8014028:	08015c68 	.word	0x08015c68
 801402c:	08015c28 	.word	0x08015c28

08014030 <std>:
 8014030:	2300      	movs	r3, #0
 8014032:	b510      	push	{r4, lr}
 8014034:	4604      	mov	r4, r0
 8014036:	e9c0 3300 	strd	r3, r3, [r0]
 801403a:	6083      	str	r3, [r0, #8]
 801403c:	8181      	strh	r1, [r0, #12]
 801403e:	6643      	str	r3, [r0, #100]	; 0x64
 8014040:	81c2      	strh	r2, [r0, #14]
 8014042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014046:	6183      	str	r3, [r0, #24]
 8014048:	4619      	mov	r1, r3
 801404a:	2208      	movs	r2, #8
 801404c:	305c      	adds	r0, #92	; 0x5c
 801404e:	f7fd fa80 	bl	8011552 <memset>
 8014052:	4b05      	ldr	r3, [pc, #20]	; (8014068 <std+0x38>)
 8014054:	6263      	str	r3, [r4, #36]	; 0x24
 8014056:	4b05      	ldr	r3, [pc, #20]	; (801406c <std+0x3c>)
 8014058:	62a3      	str	r3, [r4, #40]	; 0x28
 801405a:	4b05      	ldr	r3, [pc, #20]	; (8014070 <std+0x40>)
 801405c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801405e:	4b05      	ldr	r3, [pc, #20]	; (8014074 <std+0x44>)
 8014060:	6224      	str	r4, [r4, #32]
 8014062:	6323      	str	r3, [r4, #48]	; 0x30
 8014064:	bd10      	pop	{r4, pc}
 8014066:	bf00      	nop
 8014068:	080157e5 	.word	0x080157e5
 801406c:	08015807 	.word	0x08015807
 8014070:	0801583f 	.word	0x0801583f
 8014074:	08015863 	.word	0x08015863

08014078 <_cleanup_r>:
 8014078:	4901      	ldr	r1, [pc, #4]	; (8014080 <_cleanup_r+0x8>)
 801407a:	f000 b885 	b.w	8014188 <_fwalk_reent>
 801407e:	bf00      	nop
 8014080:	08013fdd 	.word	0x08013fdd

08014084 <__sfmoreglue>:
 8014084:	b570      	push	{r4, r5, r6, lr}
 8014086:	1e4a      	subs	r2, r1, #1
 8014088:	2568      	movs	r5, #104	; 0x68
 801408a:	4355      	muls	r5, r2
 801408c:	460e      	mov	r6, r1
 801408e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014092:	f001 f8ab 	bl	80151ec <_malloc_r>
 8014096:	4604      	mov	r4, r0
 8014098:	b140      	cbz	r0, 80140ac <__sfmoreglue+0x28>
 801409a:	2100      	movs	r1, #0
 801409c:	e9c0 1600 	strd	r1, r6, [r0]
 80140a0:	300c      	adds	r0, #12
 80140a2:	60a0      	str	r0, [r4, #8]
 80140a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140a8:	f7fd fa53 	bl	8011552 <memset>
 80140ac:	4620      	mov	r0, r4
 80140ae:	bd70      	pop	{r4, r5, r6, pc}

080140b0 <__sinit>:
 80140b0:	6983      	ldr	r3, [r0, #24]
 80140b2:	b510      	push	{r4, lr}
 80140b4:	4604      	mov	r4, r0
 80140b6:	bb33      	cbnz	r3, 8014106 <__sinit+0x56>
 80140b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80140bc:	6503      	str	r3, [r0, #80]	; 0x50
 80140be:	4b12      	ldr	r3, [pc, #72]	; (8014108 <__sinit+0x58>)
 80140c0:	4a12      	ldr	r2, [pc, #72]	; (801410c <__sinit+0x5c>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	6282      	str	r2, [r0, #40]	; 0x28
 80140c6:	4298      	cmp	r0, r3
 80140c8:	bf04      	itt	eq
 80140ca:	2301      	moveq	r3, #1
 80140cc:	6183      	streq	r3, [r0, #24]
 80140ce:	f000 f81f 	bl	8014110 <__sfp>
 80140d2:	6060      	str	r0, [r4, #4]
 80140d4:	4620      	mov	r0, r4
 80140d6:	f000 f81b 	bl	8014110 <__sfp>
 80140da:	60a0      	str	r0, [r4, #8]
 80140dc:	4620      	mov	r0, r4
 80140de:	f000 f817 	bl	8014110 <__sfp>
 80140e2:	2200      	movs	r2, #0
 80140e4:	60e0      	str	r0, [r4, #12]
 80140e6:	2104      	movs	r1, #4
 80140e8:	6860      	ldr	r0, [r4, #4]
 80140ea:	f7ff ffa1 	bl	8014030 <std>
 80140ee:	2201      	movs	r2, #1
 80140f0:	2109      	movs	r1, #9
 80140f2:	68a0      	ldr	r0, [r4, #8]
 80140f4:	f7ff ff9c 	bl	8014030 <std>
 80140f8:	2202      	movs	r2, #2
 80140fa:	2112      	movs	r1, #18
 80140fc:	68e0      	ldr	r0, [r4, #12]
 80140fe:	f7ff ff97 	bl	8014030 <std>
 8014102:	2301      	movs	r3, #1
 8014104:	61a3      	str	r3, [r4, #24]
 8014106:	bd10      	pop	{r4, pc}
 8014108:	08015b88 	.word	0x08015b88
 801410c:	08014079 	.word	0x08014079

08014110 <__sfp>:
 8014110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014112:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <__sfp+0x70>)
 8014114:	681e      	ldr	r6, [r3, #0]
 8014116:	69b3      	ldr	r3, [r6, #24]
 8014118:	4607      	mov	r7, r0
 801411a:	b913      	cbnz	r3, 8014122 <__sfp+0x12>
 801411c:	4630      	mov	r0, r6
 801411e:	f7ff ffc7 	bl	80140b0 <__sinit>
 8014122:	3648      	adds	r6, #72	; 0x48
 8014124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014128:	3b01      	subs	r3, #1
 801412a:	d503      	bpl.n	8014134 <__sfp+0x24>
 801412c:	6833      	ldr	r3, [r6, #0]
 801412e:	b133      	cbz	r3, 801413e <__sfp+0x2e>
 8014130:	6836      	ldr	r6, [r6, #0]
 8014132:	e7f7      	b.n	8014124 <__sfp+0x14>
 8014134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014138:	b16d      	cbz	r5, 8014156 <__sfp+0x46>
 801413a:	3468      	adds	r4, #104	; 0x68
 801413c:	e7f4      	b.n	8014128 <__sfp+0x18>
 801413e:	2104      	movs	r1, #4
 8014140:	4638      	mov	r0, r7
 8014142:	f7ff ff9f 	bl	8014084 <__sfmoreglue>
 8014146:	6030      	str	r0, [r6, #0]
 8014148:	2800      	cmp	r0, #0
 801414a:	d1f1      	bne.n	8014130 <__sfp+0x20>
 801414c:	230c      	movs	r3, #12
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	4604      	mov	r4, r0
 8014152:	4620      	mov	r0, r4
 8014154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014156:	4b0b      	ldr	r3, [pc, #44]	; (8014184 <__sfp+0x74>)
 8014158:	6665      	str	r5, [r4, #100]	; 0x64
 801415a:	e9c4 5500 	strd	r5, r5, [r4]
 801415e:	60a5      	str	r5, [r4, #8]
 8014160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014168:	2208      	movs	r2, #8
 801416a:	4629      	mov	r1, r5
 801416c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014170:	f7fd f9ef 	bl	8011552 <memset>
 8014174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801417c:	e7e9      	b.n	8014152 <__sfp+0x42>
 801417e:	bf00      	nop
 8014180:	08015b88 	.word	0x08015b88
 8014184:	ffff0001 	.word	0xffff0001

08014188 <_fwalk_reent>:
 8014188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801418c:	4680      	mov	r8, r0
 801418e:	4689      	mov	r9, r1
 8014190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014194:	2600      	movs	r6, #0
 8014196:	b914      	cbnz	r4, 801419e <_fwalk_reent+0x16>
 8014198:	4630      	mov	r0, r6
 801419a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801419e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80141a2:	3f01      	subs	r7, #1
 80141a4:	d501      	bpl.n	80141aa <_fwalk_reent+0x22>
 80141a6:	6824      	ldr	r4, [r4, #0]
 80141a8:	e7f5      	b.n	8014196 <_fwalk_reent+0xe>
 80141aa:	89ab      	ldrh	r3, [r5, #12]
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d907      	bls.n	80141c0 <_fwalk_reent+0x38>
 80141b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141b4:	3301      	adds	r3, #1
 80141b6:	d003      	beq.n	80141c0 <_fwalk_reent+0x38>
 80141b8:	4629      	mov	r1, r5
 80141ba:	4640      	mov	r0, r8
 80141bc:	47c8      	blx	r9
 80141be:	4306      	orrs	r6, r0
 80141c0:	3568      	adds	r5, #104	; 0x68
 80141c2:	e7ee      	b.n	80141a2 <_fwalk_reent+0x1a>

080141c4 <rshift>:
 80141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c6:	6906      	ldr	r6, [r0, #16]
 80141c8:	114b      	asrs	r3, r1, #5
 80141ca:	429e      	cmp	r6, r3
 80141cc:	f100 0414 	add.w	r4, r0, #20
 80141d0:	dd30      	ble.n	8014234 <rshift+0x70>
 80141d2:	f011 011f 	ands.w	r1, r1, #31
 80141d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80141da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80141de:	d108      	bne.n	80141f2 <rshift+0x2e>
 80141e0:	4621      	mov	r1, r4
 80141e2:	42b2      	cmp	r2, r6
 80141e4:	460b      	mov	r3, r1
 80141e6:	d211      	bcs.n	801420c <rshift+0x48>
 80141e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80141ec:	f841 3b04 	str.w	r3, [r1], #4
 80141f0:	e7f7      	b.n	80141e2 <rshift+0x1e>
 80141f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80141f6:	f1c1 0c20 	rsb	ip, r1, #32
 80141fa:	40cd      	lsrs	r5, r1
 80141fc:	3204      	adds	r2, #4
 80141fe:	4623      	mov	r3, r4
 8014200:	42b2      	cmp	r2, r6
 8014202:	4617      	mov	r7, r2
 8014204:	d30c      	bcc.n	8014220 <rshift+0x5c>
 8014206:	601d      	str	r5, [r3, #0]
 8014208:	b105      	cbz	r5, 801420c <rshift+0x48>
 801420a:	3304      	adds	r3, #4
 801420c:	1b1a      	subs	r2, r3, r4
 801420e:	42a3      	cmp	r3, r4
 8014210:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014214:	bf08      	it	eq
 8014216:	2300      	moveq	r3, #0
 8014218:	6102      	str	r2, [r0, #16]
 801421a:	bf08      	it	eq
 801421c:	6143      	streq	r3, [r0, #20]
 801421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014220:	683f      	ldr	r7, [r7, #0]
 8014222:	fa07 f70c 	lsl.w	r7, r7, ip
 8014226:	433d      	orrs	r5, r7
 8014228:	f843 5b04 	str.w	r5, [r3], #4
 801422c:	f852 5b04 	ldr.w	r5, [r2], #4
 8014230:	40cd      	lsrs	r5, r1
 8014232:	e7e5      	b.n	8014200 <rshift+0x3c>
 8014234:	4623      	mov	r3, r4
 8014236:	e7e9      	b.n	801420c <rshift+0x48>

08014238 <__hexdig_fun>:
 8014238:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801423c:	2b09      	cmp	r3, #9
 801423e:	d802      	bhi.n	8014246 <__hexdig_fun+0xe>
 8014240:	3820      	subs	r0, #32
 8014242:	b2c0      	uxtb	r0, r0
 8014244:	4770      	bx	lr
 8014246:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801424a:	2b05      	cmp	r3, #5
 801424c:	d801      	bhi.n	8014252 <__hexdig_fun+0x1a>
 801424e:	3847      	subs	r0, #71	; 0x47
 8014250:	e7f7      	b.n	8014242 <__hexdig_fun+0xa>
 8014252:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014256:	2b05      	cmp	r3, #5
 8014258:	d801      	bhi.n	801425e <__hexdig_fun+0x26>
 801425a:	3827      	subs	r0, #39	; 0x27
 801425c:	e7f1      	b.n	8014242 <__hexdig_fun+0xa>
 801425e:	2000      	movs	r0, #0
 8014260:	4770      	bx	lr

08014262 <__gethex>:
 8014262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014266:	b08b      	sub	sp, #44	; 0x2c
 8014268:	468a      	mov	sl, r1
 801426a:	9002      	str	r0, [sp, #8]
 801426c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801426e:	9306      	str	r3, [sp, #24]
 8014270:	4690      	mov	r8, r2
 8014272:	f000 fad0 	bl	8014816 <__localeconv_l>
 8014276:	6803      	ldr	r3, [r0, #0]
 8014278:	9303      	str	r3, [sp, #12]
 801427a:	4618      	mov	r0, r3
 801427c:	f7f3 fee0 	bl	8008040 <strlen>
 8014280:	9b03      	ldr	r3, [sp, #12]
 8014282:	9001      	str	r0, [sp, #4]
 8014284:	4403      	add	r3, r0
 8014286:	f04f 0b00 	mov.w	fp, #0
 801428a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801428e:	9307      	str	r3, [sp, #28]
 8014290:	f8da 3000 	ldr.w	r3, [sl]
 8014294:	3302      	adds	r3, #2
 8014296:	461f      	mov	r7, r3
 8014298:	f813 0b01 	ldrb.w	r0, [r3], #1
 801429c:	2830      	cmp	r0, #48	; 0x30
 801429e:	d06c      	beq.n	801437a <__gethex+0x118>
 80142a0:	f7ff ffca 	bl	8014238 <__hexdig_fun>
 80142a4:	4604      	mov	r4, r0
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d16a      	bne.n	8014380 <__gethex+0x11e>
 80142aa:	9a01      	ldr	r2, [sp, #4]
 80142ac:	9903      	ldr	r1, [sp, #12]
 80142ae:	4638      	mov	r0, r7
 80142b0:	f001 fadb 	bl	801586a <strncmp>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d166      	bne.n	8014386 <__gethex+0x124>
 80142b8:	9b01      	ldr	r3, [sp, #4]
 80142ba:	5cf8      	ldrb	r0, [r7, r3]
 80142bc:	18fe      	adds	r6, r7, r3
 80142be:	f7ff ffbb 	bl	8014238 <__hexdig_fun>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d062      	beq.n	801438c <__gethex+0x12a>
 80142c6:	4633      	mov	r3, r6
 80142c8:	7818      	ldrb	r0, [r3, #0]
 80142ca:	2830      	cmp	r0, #48	; 0x30
 80142cc:	461f      	mov	r7, r3
 80142ce:	f103 0301 	add.w	r3, r3, #1
 80142d2:	d0f9      	beq.n	80142c8 <__gethex+0x66>
 80142d4:	f7ff ffb0 	bl	8014238 <__hexdig_fun>
 80142d8:	fab0 f580 	clz	r5, r0
 80142dc:	096d      	lsrs	r5, r5, #5
 80142de:	4634      	mov	r4, r6
 80142e0:	f04f 0b01 	mov.w	fp, #1
 80142e4:	463a      	mov	r2, r7
 80142e6:	4616      	mov	r6, r2
 80142e8:	3201      	adds	r2, #1
 80142ea:	7830      	ldrb	r0, [r6, #0]
 80142ec:	f7ff ffa4 	bl	8014238 <__hexdig_fun>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d1f8      	bne.n	80142e6 <__gethex+0x84>
 80142f4:	9a01      	ldr	r2, [sp, #4]
 80142f6:	9903      	ldr	r1, [sp, #12]
 80142f8:	4630      	mov	r0, r6
 80142fa:	f001 fab6 	bl	801586a <strncmp>
 80142fe:	b950      	cbnz	r0, 8014316 <__gethex+0xb4>
 8014300:	b954      	cbnz	r4, 8014318 <__gethex+0xb6>
 8014302:	9b01      	ldr	r3, [sp, #4]
 8014304:	18f4      	adds	r4, r6, r3
 8014306:	4622      	mov	r2, r4
 8014308:	4616      	mov	r6, r2
 801430a:	3201      	adds	r2, #1
 801430c:	7830      	ldrb	r0, [r6, #0]
 801430e:	f7ff ff93 	bl	8014238 <__hexdig_fun>
 8014312:	2800      	cmp	r0, #0
 8014314:	d1f8      	bne.n	8014308 <__gethex+0xa6>
 8014316:	b10c      	cbz	r4, 801431c <__gethex+0xba>
 8014318:	1ba4      	subs	r4, r4, r6
 801431a:	00a4      	lsls	r4, r4, #2
 801431c:	7833      	ldrb	r3, [r6, #0]
 801431e:	2b50      	cmp	r3, #80	; 0x50
 8014320:	d001      	beq.n	8014326 <__gethex+0xc4>
 8014322:	2b70      	cmp	r3, #112	; 0x70
 8014324:	d140      	bne.n	80143a8 <__gethex+0x146>
 8014326:	7873      	ldrb	r3, [r6, #1]
 8014328:	2b2b      	cmp	r3, #43	; 0x2b
 801432a:	d031      	beq.n	8014390 <__gethex+0x12e>
 801432c:	2b2d      	cmp	r3, #45	; 0x2d
 801432e:	d033      	beq.n	8014398 <__gethex+0x136>
 8014330:	1c71      	adds	r1, r6, #1
 8014332:	f04f 0900 	mov.w	r9, #0
 8014336:	7808      	ldrb	r0, [r1, #0]
 8014338:	f7ff ff7e 	bl	8014238 <__hexdig_fun>
 801433c:	1e43      	subs	r3, r0, #1
 801433e:	b2db      	uxtb	r3, r3
 8014340:	2b18      	cmp	r3, #24
 8014342:	d831      	bhi.n	80143a8 <__gethex+0x146>
 8014344:	f1a0 0210 	sub.w	r2, r0, #16
 8014348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801434c:	f7ff ff74 	bl	8014238 <__hexdig_fun>
 8014350:	1e43      	subs	r3, r0, #1
 8014352:	b2db      	uxtb	r3, r3
 8014354:	2b18      	cmp	r3, #24
 8014356:	d922      	bls.n	801439e <__gethex+0x13c>
 8014358:	f1b9 0f00 	cmp.w	r9, #0
 801435c:	d000      	beq.n	8014360 <__gethex+0xfe>
 801435e:	4252      	negs	r2, r2
 8014360:	4414      	add	r4, r2
 8014362:	f8ca 1000 	str.w	r1, [sl]
 8014366:	b30d      	cbz	r5, 80143ac <__gethex+0x14a>
 8014368:	f1bb 0f00 	cmp.w	fp, #0
 801436c:	bf0c      	ite	eq
 801436e:	2706      	moveq	r7, #6
 8014370:	2700      	movne	r7, #0
 8014372:	4638      	mov	r0, r7
 8014374:	b00b      	add	sp, #44	; 0x2c
 8014376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801437a:	f10b 0b01 	add.w	fp, fp, #1
 801437e:	e78a      	b.n	8014296 <__gethex+0x34>
 8014380:	2500      	movs	r5, #0
 8014382:	462c      	mov	r4, r5
 8014384:	e7ae      	b.n	80142e4 <__gethex+0x82>
 8014386:	463e      	mov	r6, r7
 8014388:	2501      	movs	r5, #1
 801438a:	e7c7      	b.n	801431c <__gethex+0xba>
 801438c:	4604      	mov	r4, r0
 801438e:	e7fb      	b.n	8014388 <__gethex+0x126>
 8014390:	f04f 0900 	mov.w	r9, #0
 8014394:	1cb1      	adds	r1, r6, #2
 8014396:	e7ce      	b.n	8014336 <__gethex+0xd4>
 8014398:	f04f 0901 	mov.w	r9, #1
 801439c:	e7fa      	b.n	8014394 <__gethex+0x132>
 801439e:	230a      	movs	r3, #10
 80143a0:	fb03 0202 	mla	r2, r3, r2, r0
 80143a4:	3a10      	subs	r2, #16
 80143a6:	e7cf      	b.n	8014348 <__gethex+0xe6>
 80143a8:	4631      	mov	r1, r6
 80143aa:	e7da      	b.n	8014362 <__gethex+0x100>
 80143ac:	1bf3      	subs	r3, r6, r7
 80143ae:	3b01      	subs	r3, #1
 80143b0:	4629      	mov	r1, r5
 80143b2:	2b07      	cmp	r3, #7
 80143b4:	dc49      	bgt.n	801444a <__gethex+0x1e8>
 80143b6:	9802      	ldr	r0, [sp, #8]
 80143b8:	f000 fabc 	bl	8014934 <_Balloc>
 80143bc:	9b01      	ldr	r3, [sp, #4]
 80143be:	f100 0914 	add.w	r9, r0, #20
 80143c2:	f04f 0b00 	mov.w	fp, #0
 80143c6:	f1c3 0301 	rsb	r3, r3, #1
 80143ca:	4605      	mov	r5, r0
 80143cc:	f8cd 9010 	str.w	r9, [sp, #16]
 80143d0:	46da      	mov	sl, fp
 80143d2:	9308      	str	r3, [sp, #32]
 80143d4:	42b7      	cmp	r7, r6
 80143d6:	d33b      	bcc.n	8014450 <__gethex+0x1ee>
 80143d8:	9804      	ldr	r0, [sp, #16]
 80143da:	f840 ab04 	str.w	sl, [r0], #4
 80143de:	eba0 0009 	sub.w	r0, r0, r9
 80143e2:	1080      	asrs	r0, r0, #2
 80143e4:	6128      	str	r0, [r5, #16]
 80143e6:	0147      	lsls	r7, r0, #5
 80143e8:	4650      	mov	r0, sl
 80143ea:	f000 fb67 	bl	8014abc <__hi0bits>
 80143ee:	f8d8 6000 	ldr.w	r6, [r8]
 80143f2:	1a3f      	subs	r7, r7, r0
 80143f4:	42b7      	cmp	r7, r6
 80143f6:	dd64      	ble.n	80144c2 <__gethex+0x260>
 80143f8:	1bbf      	subs	r7, r7, r6
 80143fa:	4639      	mov	r1, r7
 80143fc:	4628      	mov	r0, r5
 80143fe:	f000 fe77 	bl	80150f0 <__any_on>
 8014402:	4682      	mov	sl, r0
 8014404:	b178      	cbz	r0, 8014426 <__gethex+0x1c4>
 8014406:	1e7b      	subs	r3, r7, #1
 8014408:	1159      	asrs	r1, r3, #5
 801440a:	f003 021f 	and.w	r2, r3, #31
 801440e:	f04f 0a01 	mov.w	sl, #1
 8014412:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014416:	fa0a f202 	lsl.w	r2, sl, r2
 801441a:	420a      	tst	r2, r1
 801441c:	d003      	beq.n	8014426 <__gethex+0x1c4>
 801441e:	4553      	cmp	r3, sl
 8014420:	dc46      	bgt.n	80144b0 <__gethex+0x24e>
 8014422:	f04f 0a02 	mov.w	sl, #2
 8014426:	4639      	mov	r1, r7
 8014428:	4628      	mov	r0, r5
 801442a:	f7ff fecb 	bl	80141c4 <rshift>
 801442e:	443c      	add	r4, r7
 8014430:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014434:	42a3      	cmp	r3, r4
 8014436:	da52      	bge.n	80144de <__gethex+0x27c>
 8014438:	4629      	mov	r1, r5
 801443a:	9802      	ldr	r0, [sp, #8]
 801443c:	f000 faae 	bl	801499c <_Bfree>
 8014440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014442:	2300      	movs	r3, #0
 8014444:	6013      	str	r3, [r2, #0]
 8014446:	27a3      	movs	r7, #163	; 0xa3
 8014448:	e793      	b.n	8014372 <__gethex+0x110>
 801444a:	3101      	adds	r1, #1
 801444c:	105b      	asrs	r3, r3, #1
 801444e:	e7b0      	b.n	80143b2 <__gethex+0x150>
 8014450:	1e73      	subs	r3, r6, #1
 8014452:	9305      	str	r3, [sp, #20]
 8014454:	9a07      	ldr	r2, [sp, #28]
 8014456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801445a:	4293      	cmp	r3, r2
 801445c:	d018      	beq.n	8014490 <__gethex+0x22e>
 801445e:	f1bb 0f20 	cmp.w	fp, #32
 8014462:	d107      	bne.n	8014474 <__gethex+0x212>
 8014464:	9b04      	ldr	r3, [sp, #16]
 8014466:	f8c3 a000 	str.w	sl, [r3]
 801446a:	3304      	adds	r3, #4
 801446c:	f04f 0a00 	mov.w	sl, #0
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	46d3      	mov	fp, sl
 8014474:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014478:	f7ff fede 	bl	8014238 <__hexdig_fun>
 801447c:	f000 000f 	and.w	r0, r0, #15
 8014480:	fa00 f00b 	lsl.w	r0, r0, fp
 8014484:	ea4a 0a00 	orr.w	sl, sl, r0
 8014488:	f10b 0b04 	add.w	fp, fp, #4
 801448c:	9b05      	ldr	r3, [sp, #20]
 801448e:	e00d      	b.n	80144ac <__gethex+0x24a>
 8014490:	9b05      	ldr	r3, [sp, #20]
 8014492:	9a08      	ldr	r2, [sp, #32]
 8014494:	4413      	add	r3, r2
 8014496:	42bb      	cmp	r3, r7
 8014498:	d3e1      	bcc.n	801445e <__gethex+0x1fc>
 801449a:	4618      	mov	r0, r3
 801449c:	9a01      	ldr	r2, [sp, #4]
 801449e:	9903      	ldr	r1, [sp, #12]
 80144a0:	9309      	str	r3, [sp, #36]	; 0x24
 80144a2:	f001 f9e2 	bl	801586a <strncmp>
 80144a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a8:	2800      	cmp	r0, #0
 80144aa:	d1d8      	bne.n	801445e <__gethex+0x1fc>
 80144ac:	461e      	mov	r6, r3
 80144ae:	e791      	b.n	80143d4 <__gethex+0x172>
 80144b0:	1eb9      	subs	r1, r7, #2
 80144b2:	4628      	mov	r0, r5
 80144b4:	f000 fe1c 	bl	80150f0 <__any_on>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d0b2      	beq.n	8014422 <__gethex+0x1c0>
 80144bc:	f04f 0a03 	mov.w	sl, #3
 80144c0:	e7b1      	b.n	8014426 <__gethex+0x1c4>
 80144c2:	da09      	bge.n	80144d8 <__gethex+0x276>
 80144c4:	1bf7      	subs	r7, r6, r7
 80144c6:	4629      	mov	r1, r5
 80144c8:	463a      	mov	r2, r7
 80144ca:	9802      	ldr	r0, [sp, #8]
 80144cc:	f000 fc32 	bl	8014d34 <__lshift>
 80144d0:	1be4      	subs	r4, r4, r7
 80144d2:	4605      	mov	r5, r0
 80144d4:	f100 0914 	add.w	r9, r0, #20
 80144d8:	f04f 0a00 	mov.w	sl, #0
 80144dc:	e7a8      	b.n	8014430 <__gethex+0x1ce>
 80144de:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80144e2:	42a0      	cmp	r0, r4
 80144e4:	dd6a      	ble.n	80145bc <__gethex+0x35a>
 80144e6:	1b04      	subs	r4, r0, r4
 80144e8:	42a6      	cmp	r6, r4
 80144ea:	dc2e      	bgt.n	801454a <__gethex+0x2e8>
 80144ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144f0:	2b02      	cmp	r3, #2
 80144f2:	d022      	beq.n	801453a <__gethex+0x2d8>
 80144f4:	2b03      	cmp	r3, #3
 80144f6:	d024      	beq.n	8014542 <__gethex+0x2e0>
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d115      	bne.n	8014528 <__gethex+0x2c6>
 80144fc:	42a6      	cmp	r6, r4
 80144fe:	d113      	bne.n	8014528 <__gethex+0x2c6>
 8014500:	2e01      	cmp	r6, #1
 8014502:	dc0b      	bgt.n	801451c <__gethex+0x2ba>
 8014504:	9a06      	ldr	r2, [sp, #24]
 8014506:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801450a:	6013      	str	r3, [r2, #0]
 801450c:	2301      	movs	r3, #1
 801450e:	612b      	str	r3, [r5, #16]
 8014510:	f8c9 3000 	str.w	r3, [r9]
 8014514:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014516:	2762      	movs	r7, #98	; 0x62
 8014518:	601d      	str	r5, [r3, #0]
 801451a:	e72a      	b.n	8014372 <__gethex+0x110>
 801451c:	1e71      	subs	r1, r6, #1
 801451e:	4628      	mov	r0, r5
 8014520:	f000 fde6 	bl	80150f0 <__any_on>
 8014524:	2800      	cmp	r0, #0
 8014526:	d1ed      	bne.n	8014504 <__gethex+0x2a2>
 8014528:	4629      	mov	r1, r5
 801452a:	9802      	ldr	r0, [sp, #8]
 801452c:	f000 fa36 	bl	801499c <_Bfree>
 8014530:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014532:	2300      	movs	r3, #0
 8014534:	6013      	str	r3, [r2, #0]
 8014536:	2750      	movs	r7, #80	; 0x50
 8014538:	e71b      	b.n	8014372 <__gethex+0x110>
 801453a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801453c:	2b00      	cmp	r3, #0
 801453e:	d0e1      	beq.n	8014504 <__gethex+0x2a2>
 8014540:	e7f2      	b.n	8014528 <__gethex+0x2c6>
 8014542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014544:	2b00      	cmp	r3, #0
 8014546:	d1dd      	bne.n	8014504 <__gethex+0x2a2>
 8014548:	e7ee      	b.n	8014528 <__gethex+0x2c6>
 801454a:	1e67      	subs	r7, r4, #1
 801454c:	f1ba 0f00 	cmp.w	sl, #0
 8014550:	d131      	bne.n	80145b6 <__gethex+0x354>
 8014552:	b127      	cbz	r7, 801455e <__gethex+0x2fc>
 8014554:	4639      	mov	r1, r7
 8014556:	4628      	mov	r0, r5
 8014558:	f000 fdca 	bl	80150f0 <__any_on>
 801455c:	4682      	mov	sl, r0
 801455e:	117a      	asrs	r2, r7, #5
 8014560:	2301      	movs	r3, #1
 8014562:	f007 071f 	and.w	r7, r7, #31
 8014566:	fa03 f707 	lsl.w	r7, r3, r7
 801456a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801456e:	4621      	mov	r1, r4
 8014570:	421f      	tst	r7, r3
 8014572:	4628      	mov	r0, r5
 8014574:	bf18      	it	ne
 8014576:	f04a 0a02 	orrne.w	sl, sl, #2
 801457a:	1b36      	subs	r6, r6, r4
 801457c:	f7ff fe22 	bl	80141c4 <rshift>
 8014580:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014584:	2702      	movs	r7, #2
 8014586:	f1ba 0f00 	cmp.w	sl, #0
 801458a:	d048      	beq.n	801461e <__gethex+0x3bc>
 801458c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014590:	2b02      	cmp	r3, #2
 8014592:	d015      	beq.n	80145c0 <__gethex+0x35e>
 8014594:	2b03      	cmp	r3, #3
 8014596:	d017      	beq.n	80145c8 <__gethex+0x366>
 8014598:	2b01      	cmp	r3, #1
 801459a:	d109      	bne.n	80145b0 <__gethex+0x34e>
 801459c:	f01a 0f02 	tst.w	sl, #2
 80145a0:	d006      	beq.n	80145b0 <__gethex+0x34e>
 80145a2:	f8d9 3000 	ldr.w	r3, [r9]
 80145a6:	ea4a 0a03 	orr.w	sl, sl, r3
 80145aa:	f01a 0f01 	tst.w	sl, #1
 80145ae:	d10e      	bne.n	80145ce <__gethex+0x36c>
 80145b0:	f047 0710 	orr.w	r7, r7, #16
 80145b4:	e033      	b.n	801461e <__gethex+0x3bc>
 80145b6:	f04f 0a01 	mov.w	sl, #1
 80145ba:	e7d0      	b.n	801455e <__gethex+0x2fc>
 80145bc:	2701      	movs	r7, #1
 80145be:	e7e2      	b.n	8014586 <__gethex+0x324>
 80145c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145c2:	f1c3 0301 	rsb	r3, r3, #1
 80145c6:	9315      	str	r3, [sp, #84]	; 0x54
 80145c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d0f0      	beq.n	80145b0 <__gethex+0x34e>
 80145ce:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80145d2:	f105 0314 	add.w	r3, r5, #20
 80145d6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80145da:	eb03 010a 	add.w	r1, r3, sl
 80145de:	f04f 0c00 	mov.w	ip, #0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80145e8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80145ec:	d01c      	beq.n	8014628 <__gethex+0x3c6>
 80145ee:	3201      	adds	r2, #1
 80145f0:	6002      	str	r2, [r0, #0]
 80145f2:	2f02      	cmp	r7, #2
 80145f4:	f105 0314 	add.w	r3, r5, #20
 80145f8:	d138      	bne.n	801466c <__gethex+0x40a>
 80145fa:	f8d8 2000 	ldr.w	r2, [r8]
 80145fe:	3a01      	subs	r2, #1
 8014600:	42b2      	cmp	r2, r6
 8014602:	d10a      	bne.n	801461a <__gethex+0x3b8>
 8014604:	1171      	asrs	r1, r6, #5
 8014606:	2201      	movs	r2, #1
 8014608:	f006 061f 	and.w	r6, r6, #31
 801460c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014610:	fa02 f606 	lsl.w	r6, r2, r6
 8014614:	421e      	tst	r6, r3
 8014616:	bf18      	it	ne
 8014618:	4617      	movne	r7, r2
 801461a:	f047 0720 	orr.w	r7, r7, #32
 801461e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014620:	601d      	str	r5, [r3, #0]
 8014622:	9b06      	ldr	r3, [sp, #24]
 8014624:	601c      	str	r4, [r3, #0]
 8014626:	e6a4      	b.n	8014372 <__gethex+0x110>
 8014628:	4299      	cmp	r1, r3
 801462a:	f843 cc04 	str.w	ip, [r3, #-4]
 801462e:	d8d8      	bhi.n	80145e2 <__gethex+0x380>
 8014630:	68ab      	ldr	r3, [r5, #8]
 8014632:	4599      	cmp	r9, r3
 8014634:	db12      	blt.n	801465c <__gethex+0x3fa>
 8014636:	6869      	ldr	r1, [r5, #4]
 8014638:	9802      	ldr	r0, [sp, #8]
 801463a:	3101      	adds	r1, #1
 801463c:	f000 f97a 	bl	8014934 <_Balloc>
 8014640:	692a      	ldr	r2, [r5, #16]
 8014642:	3202      	adds	r2, #2
 8014644:	f105 010c 	add.w	r1, r5, #12
 8014648:	4683      	mov	fp, r0
 801464a:	0092      	lsls	r2, r2, #2
 801464c:	300c      	adds	r0, #12
 801464e:	f7fc ff75 	bl	801153c <memcpy>
 8014652:	4629      	mov	r1, r5
 8014654:	9802      	ldr	r0, [sp, #8]
 8014656:	f000 f9a1 	bl	801499c <_Bfree>
 801465a:	465d      	mov	r5, fp
 801465c:	692b      	ldr	r3, [r5, #16]
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014664:	612a      	str	r2, [r5, #16]
 8014666:	2201      	movs	r2, #1
 8014668:	615a      	str	r2, [r3, #20]
 801466a:	e7c2      	b.n	80145f2 <__gethex+0x390>
 801466c:	692a      	ldr	r2, [r5, #16]
 801466e:	454a      	cmp	r2, r9
 8014670:	dd0b      	ble.n	801468a <__gethex+0x428>
 8014672:	2101      	movs	r1, #1
 8014674:	4628      	mov	r0, r5
 8014676:	f7ff fda5 	bl	80141c4 <rshift>
 801467a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801467e:	3401      	adds	r4, #1
 8014680:	42a3      	cmp	r3, r4
 8014682:	f6ff aed9 	blt.w	8014438 <__gethex+0x1d6>
 8014686:	2701      	movs	r7, #1
 8014688:	e7c7      	b.n	801461a <__gethex+0x3b8>
 801468a:	f016 061f 	ands.w	r6, r6, #31
 801468e:	d0fa      	beq.n	8014686 <__gethex+0x424>
 8014690:	449a      	add	sl, r3
 8014692:	f1c6 0620 	rsb	r6, r6, #32
 8014696:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801469a:	f000 fa0f 	bl	8014abc <__hi0bits>
 801469e:	42b0      	cmp	r0, r6
 80146a0:	dbe7      	blt.n	8014672 <__gethex+0x410>
 80146a2:	e7f0      	b.n	8014686 <__gethex+0x424>

080146a4 <L_shift>:
 80146a4:	f1c2 0208 	rsb	r2, r2, #8
 80146a8:	0092      	lsls	r2, r2, #2
 80146aa:	b570      	push	{r4, r5, r6, lr}
 80146ac:	f1c2 0620 	rsb	r6, r2, #32
 80146b0:	6843      	ldr	r3, [r0, #4]
 80146b2:	6804      	ldr	r4, [r0, #0]
 80146b4:	fa03 f506 	lsl.w	r5, r3, r6
 80146b8:	432c      	orrs	r4, r5
 80146ba:	40d3      	lsrs	r3, r2
 80146bc:	6004      	str	r4, [r0, #0]
 80146be:	f840 3f04 	str.w	r3, [r0, #4]!
 80146c2:	4288      	cmp	r0, r1
 80146c4:	d3f4      	bcc.n	80146b0 <L_shift+0xc>
 80146c6:	bd70      	pop	{r4, r5, r6, pc}

080146c8 <__match>:
 80146c8:	b530      	push	{r4, r5, lr}
 80146ca:	6803      	ldr	r3, [r0, #0]
 80146cc:	3301      	adds	r3, #1
 80146ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146d2:	b914      	cbnz	r4, 80146da <__match+0x12>
 80146d4:	6003      	str	r3, [r0, #0]
 80146d6:	2001      	movs	r0, #1
 80146d8:	bd30      	pop	{r4, r5, pc}
 80146da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80146e2:	2d19      	cmp	r5, #25
 80146e4:	bf98      	it	ls
 80146e6:	3220      	addls	r2, #32
 80146e8:	42a2      	cmp	r2, r4
 80146ea:	d0f0      	beq.n	80146ce <__match+0x6>
 80146ec:	2000      	movs	r0, #0
 80146ee:	e7f3      	b.n	80146d8 <__match+0x10>

080146f0 <__hexnan>:
 80146f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f4:	680b      	ldr	r3, [r1, #0]
 80146f6:	6801      	ldr	r1, [r0, #0]
 80146f8:	115f      	asrs	r7, r3, #5
 80146fa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80146fe:	f013 031f 	ands.w	r3, r3, #31
 8014702:	b087      	sub	sp, #28
 8014704:	bf18      	it	ne
 8014706:	3704      	addne	r7, #4
 8014708:	2500      	movs	r5, #0
 801470a:	1f3e      	subs	r6, r7, #4
 801470c:	4682      	mov	sl, r0
 801470e:	4690      	mov	r8, r2
 8014710:	9301      	str	r3, [sp, #4]
 8014712:	f847 5c04 	str.w	r5, [r7, #-4]
 8014716:	46b1      	mov	r9, r6
 8014718:	4634      	mov	r4, r6
 801471a:	9502      	str	r5, [sp, #8]
 801471c:	46ab      	mov	fp, r5
 801471e:	784a      	ldrb	r2, [r1, #1]
 8014720:	1c4b      	adds	r3, r1, #1
 8014722:	9303      	str	r3, [sp, #12]
 8014724:	b342      	cbz	r2, 8014778 <__hexnan+0x88>
 8014726:	4610      	mov	r0, r2
 8014728:	9105      	str	r1, [sp, #20]
 801472a:	9204      	str	r2, [sp, #16]
 801472c:	f7ff fd84 	bl	8014238 <__hexdig_fun>
 8014730:	2800      	cmp	r0, #0
 8014732:	d143      	bne.n	80147bc <__hexnan+0xcc>
 8014734:	9a04      	ldr	r2, [sp, #16]
 8014736:	9905      	ldr	r1, [sp, #20]
 8014738:	2a20      	cmp	r2, #32
 801473a:	d818      	bhi.n	801476e <__hexnan+0x7e>
 801473c:	9b02      	ldr	r3, [sp, #8]
 801473e:	459b      	cmp	fp, r3
 8014740:	dd13      	ble.n	801476a <__hexnan+0x7a>
 8014742:	454c      	cmp	r4, r9
 8014744:	d206      	bcs.n	8014754 <__hexnan+0x64>
 8014746:	2d07      	cmp	r5, #7
 8014748:	dc04      	bgt.n	8014754 <__hexnan+0x64>
 801474a:	462a      	mov	r2, r5
 801474c:	4649      	mov	r1, r9
 801474e:	4620      	mov	r0, r4
 8014750:	f7ff ffa8 	bl	80146a4 <L_shift>
 8014754:	4544      	cmp	r4, r8
 8014756:	d944      	bls.n	80147e2 <__hexnan+0xf2>
 8014758:	2300      	movs	r3, #0
 801475a:	f1a4 0904 	sub.w	r9, r4, #4
 801475e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014762:	f8cd b008 	str.w	fp, [sp, #8]
 8014766:	464c      	mov	r4, r9
 8014768:	461d      	mov	r5, r3
 801476a:	9903      	ldr	r1, [sp, #12]
 801476c:	e7d7      	b.n	801471e <__hexnan+0x2e>
 801476e:	2a29      	cmp	r2, #41	; 0x29
 8014770:	d14a      	bne.n	8014808 <__hexnan+0x118>
 8014772:	3102      	adds	r1, #2
 8014774:	f8ca 1000 	str.w	r1, [sl]
 8014778:	f1bb 0f00 	cmp.w	fp, #0
 801477c:	d044      	beq.n	8014808 <__hexnan+0x118>
 801477e:	454c      	cmp	r4, r9
 8014780:	d206      	bcs.n	8014790 <__hexnan+0xa0>
 8014782:	2d07      	cmp	r5, #7
 8014784:	dc04      	bgt.n	8014790 <__hexnan+0xa0>
 8014786:	462a      	mov	r2, r5
 8014788:	4649      	mov	r1, r9
 801478a:	4620      	mov	r0, r4
 801478c:	f7ff ff8a 	bl	80146a4 <L_shift>
 8014790:	4544      	cmp	r4, r8
 8014792:	d928      	bls.n	80147e6 <__hexnan+0xf6>
 8014794:	4643      	mov	r3, r8
 8014796:	f854 2b04 	ldr.w	r2, [r4], #4
 801479a:	f843 2b04 	str.w	r2, [r3], #4
 801479e:	42a6      	cmp	r6, r4
 80147a0:	d2f9      	bcs.n	8014796 <__hexnan+0xa6>
 80147a2:	2200      	movs	r2, #0
 80147a4:	f843 2b04 	str.w	r2, [r3], #4
 80147a8:	429e      	cmp	r6, r3
 80147aa:	d2fb      	bcs.n	80147a4 <__hexnan+0xb4>
 80147ac:	6833      	ldr	r3, [r6, #0]
 80147ae:	b91b      	cbnz	r3, 80147b8 <__hexnan+0xc8>
 80147b0:	4546      	cmp	r6, r8
 80147b2:	d127      	bne.n	8014804 <__hexnan+0x114>
 80147b4:	2301      	movs	r3, #1
 80147b6:	6033      	str	r3, [r6, #0]
 80147b8:	2005      	movs	r0, #5
 80147ba:	e026      	b.n	801480a <__hexnan+0x11a>
 80147bc:	3501      	adds	r5, #1
 80147be:	2d08      	cmp	r5, #8
 80147c0:	f10b 0b01 	add.w	fp, fp, #1
 80147c4:	dd06      	ble.n	80147d4 <__hexnan+0xe4>
 80147c6:	4544      	cmp	r4, r8
 80147c8:	d9cf      	bls.n	801476a <__hexnan+0x7a>
 80147ca:	2300      	movs	r3, #0
 80147cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80147d0:	2501      	movs	r5, #1
 80147d2:	3c04      	subs	r4, #4
 80147d4:	6822      	ldr	r2, [r4, #0]
 80147d6:	f000 000f 	and.w	r0, r0, #15
 80147da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80147de:	6020      	str	r0, [r4, #0]
 80147e0:	e7c3      	b.n	801476a <__hexnan+0x7a>
 80147e2:	2508      	movs	r5, #8
 80147e4:	e7c1      	b.n	801476a <__hexnan+0x7a>
 80147e6:	9b01      	ldr	r3, [sp, #4]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d0df      	beq.n	80147ac <__hexnan+0xbc>
 80147ec:	f04f 32ff 	mov.w	r2, #4294967295
 80147f0:	f1c3 0320 	rsb	r3, r3, #32
 80147f4:	fa22 f303 	lsr.w	r3, r2, r3
 80147f8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80147fc:	401a      	ands	r2, r3
 80147fe:	f847 2c04 	str.w	r2, [r7, #-4]
 8014802:	e7d3      	b.n	80147ac <__hexnan+0xbc>
 8014804:	3e04      	subs	r6, #4
 8014806:	e7d1      	b.n	80147ac <__hexnan+0xbc>
 8014808:	2004      	movs	r0, #4
 801480a:	b007      	add	sp, #28
 801480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014810 <__locale_ctype_ptr_l>:
 8014810:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014814:	4770      	bx	lr

08014816 <__localeconv_l>:
 8014816:	30f0      	adds	r0, #240	; 0xf0
 8014818:	4770      	bx	lr
	...

0801481c <_localeconv_r>:
 801481c:	4b04      	ldr	r3, [pc, #16]	; (8014830 <_localeconv_r+0x14>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	6a18      	ldr	r0, [r3, #32]
 8014822:	4b04      	ldr	r3, [pc, #16]	; (8014834 <_localeconv_r+0x18>)
 8014824:	2800      	cmp	r0, #0
 8014826:	bf08      	it	eq
 8014828:	4618      	moveq	r0, r3
 801482a:	30f0      	adds	r0, #240	; 0xf0
 801482c:	4770      	bx	lr
 801482e:	bf00      	nop
 8014830:	20000018 	.word	0x20000018
 8014834:	2000007c 	.word	0x2000007c

08014838 <__swhatbuf_r>:
 8014838:	b570      	push	{r4, r5, r6, lr}
 801483a:	460e      	mov	r6, r1
 801483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014840:	2900      	cmp	r1, #0
 8014842:	b096      	sub	sp, #88	; 0x58
 8014844:	4614      	mov	r4, r2
 8014846:	461d      	mov	r5, r3
 8014848:	da07      	bge.n	801485a <__swhatbuf_r+0x22>
 801484a:	2300      	movs	r3, #0
 801484c:	602b      	str	r3, [r5, #0]
 801484e:	89b3      	ldrh	r3, [r6, #12]
 8014850:	061a      	lsls	r2, r3, #24
 8014852:	d410      	bmi.n	8014876 <__swhatbuf_r+0x3e>
 8014854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014858:	e00e      	b.n	8014878 <__swhatbuf_r+0x40>
 801485a:	466a      	mov	r2, sp
 801485c:	f001 f846 	bl	80158ec <_fstat_r>
 8014860:	2800      	cmp	r0, #0
 8014862:	dbf2      	blt.n	801484a <__swhatbuf_r+0x12>
 8014864:	9a01      	ldr	r2, [sp, #4]
 8014866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801486a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801486e:	425a      	negs	r2, r3
 8014870:	415a      	adcs	r2, r3
 8014872:	602a      	str	r2, [r5, #0]
 8014874:	e7ee      	b.n	8014854 <__swhatbuf_r+0x1c>
 8014876:	2340      	movs	r3, #64	; 0x40
 8014878:	2000      	movs	r0, #0
 801487a:	6023      	str	r3, [r4, #0]
 801487c:	b016      	add	sp, #88	; 0x58
 801487e:	bd70      	pop	{r4, r5, r6, pc}

08014880 <__smakebuf_r>:
 8014880:	898b      	ldrh	r3, [r1, #12]
 8014882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014884:	079d      	lsls	r5, r3, #30
 8014886:	4606      	mov	r6, r0
 8014888:	460c      	mov	r4, r1
 801488a:	d507      	bpl.n	801489c <__smakebuf_r+0x1c>
 801488c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014890:	6023      	str	r3, [r4, #0]
 8014892:	6123      	str	r3, [r4, #16]
 8014894:	2301      	movs	r3, #1
 8014896:	6163      	str	r3, [r4, #20]
 8014898:	b002      	add	sp, #8
 801489a:	bd70      	pop	{r4, r5, r6, pc}
 801489c:	ab01      	add	r3, sp, #4
 801489e:	466a      	mov	r2, sp
 80148a0:	f7ff ffca 	bl	8014838 <__swhatbuf_r>
 80148a4:	9900      	ldr	r1, [sp, #0]
 80148a6:	4605      	mov	r5, r0
 80148a8:	4630      	mov	r0, r6
 80148aa:	f000 fc9f 	bl	80151ec <_malloc_r>
 80148ae:	b948      	cbnz	r0, 80148c4 <__smakebuf_r+0x44>
 80148b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b4:	059a      	lsls	r2, r3, #22
 80148b6:	d4ef      	bmi.n	8014898 <__smakebuf_r+0x18>
 80148b8:	f023 0303 	bic.w	r3, r3, #3
 80148bc:	f043 0302 	orr.w	r3, r3, #2
 80148c0:	81a3      	strh	r3, [r4, #12]
 80148c2:	e7e3      	b.n	801488c <__smakebuf_r+0xc>
 80148c4:	4b0d      	ldr	r3, [pc, #52]	; (80148fc <__smakebuf_r+0x7c>)
 80148c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	6020      	str	r0, [r4, #0]
 80148cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	9b00      	ldr	r3, [sp, #0]
 80148d4:	6163      	str	r3, [r4, #20]
 80148d6:	9b01      	ldr	r3, [sp, #4]
 80148d8:	6120      	str	r0, [r4, #16]
 80148da:	b15b      	cbz	r3, 80148f4 <__smakebuf_r+0x74>
 80148dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148e0:	4630      	mov	r0, r6
 80148e2:	f001 f815 	bl	8015910 <_isatty_r>
 80148e6:	b128      	cbz	r0, 80148f4 <__smakebuf_r+0x74>
 80148e8:	89a3      	ldrh	r3, [r4, #12]
 80148ea:	f023 0303 	bic.w	r3, r3, #3
 80148ee:	f043 0301 	orr.w	r3, r3, #1
 80148f2:	81a3      	strh	r3, [r4, #12]
 80148f4:	89a3      	ldrh	r3, [r4, #12]
 80148f6:	431d      	orrs	r5, r3
 80148f8:	81a5      	strh	r5, [r4, #12]
 80148fa:	e7cd      	b.n	8014898 <__smakebuf_r+0x18>
 80148fc:	08014079 	.word	0x08014079

08014900 <malloc>:
 8014900:	4b02      	ldr	r3, [pc, #8]	; (801490c <malloc+0xc>)
 8014902:	4601      	mov	r1, r0
 8014904:	6818      	ldr	r0, [r3, #0]
 8014906:	f000 bc71 	b.w	80151ec <_malloc_r>
 801490a:	bf00      	nop
 801490c:	20000018 	.word	0x20000018

08014910 <__ascii_mbtowc>:
 8014910:	b082      	sub	sp, #8
 8014912:	b901      	cbnz	r1, 8014916 <__ascii_mbtowc+0x6>
 8014914:	a901      	add	r1, sp, #4
 8014916:	b142      	cbz	r2, 801492a <__ascii_mbtowc+0x1a>
 8014918:	b14b      	cbz	r3, 801492e <__ascii_mbtowc+0x1e>
 801491a:	7813      	ldrb	r3, [r2, #0]
 801491c:	600b      	str	r3, [r1, #0]
 801491e:	7812      	ldrb	r2, [r2, #0]
 8014920:	1c10      	adds	r0, r2, #0
 8014922:	bf18      	it	ne
 8014924:	2001      	movne	r0, #1
 8014926:	b002      	add	sp, #8
 8014928:	4770      	bx	lr
 801492a:	4610      	mov	r0, r2
 801492c:	e7fb      	b.n	8014926 <__ascii_mbtowc+0x16>
 801492e:	f06f 0001 	mvn.w	r0, #1
 8014932:	e7f8      	b.n	8014926 <__ascii_mbtowc+0x16>

08014934 <_Balloc>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014938:	4604      	mov	r4, r0
 801493a:	460e      	mov	r6, r1
 801493c:	b93d      	cbnz	r5, 801494e <_Balloc+0x1a>
 801493e:	2010      	movs	r0, #16
 8014940:	f7ff ffde 	bl	8014900 <malloc>
 8014944:	6260      	str	r0, [r4, #36]	; 0x24
 8014946:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801494a:	6005      	str	r5, [r0, #0]
 801494c:	60c5      	str	r5, [r0, #12]
 801494e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014950:	68eb      	ldr	r3, [r5, #12]
 8014952:	b183      	cbz	r3, 8014976 <_Balloc+0x42>
 8014954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801495c:	b9b8      	cbnz	r0, 801498e <_Balloc+0x5a>
 801495e:	2101      	movs	r1, #1
 8014960:	fa01 f506 	lsl.w	r5, r1, r6
 8014964:	1d6a      	adds	r2, r5, #5
 8014966:	0092      	lsls	r2, r2, #2
 8014968:	4620      	mov	r0, r4
 801496a:	f000 fbe2 	bl	8015132 <_calloc_r>
 801496e:	b160      	cbz	r0, 801498a <_Balloc+0x56>
 8014970:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014974:	e00e      	b.n	8014994 <_Balloc+0x60>
 8014976:	2221      	movs	r2, #33	; 0x21
 8014978:	2104      	movs	r1, #4
 801497a:	4620      	mov	r0, r4
 801497c:	f000 fbd9 	bl	8015132 <_calloc_r>
 8014980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014982:	60e8      	str	r0, [r5, #12]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1e4      	bne.n	8014954 <_Balloc+0x20>
 801498a:	2000      	movs	r0, #0
 801498c:	bd70      	pop	{r4, r5, r6, pc}
 801498e:	6802      	ldr	r2, [r0, #0]
 8014990:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014994:	2300      	movs	r3, #0
 8014996:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801499a:	e7f7      	b.n	801498c <_Balloc+0x58>

0801499c <_Bfree>:
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80149a0:	4606      	mov	r6, r0
 80149a2:	460d      	mov	r5, r1
 80149a4:	b93c      	cbnz	r4, 80149b6 <_Bfree+0x1a>
 80149a6:	2010      	movs	r0, #16
 80149a8:	f7ff ffaa 	bl	8014900 <malloc>
 80149ac:	6270      	str	r0, [r6, #36]	; 0x24
 80149ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149b2:	6004      	str	r4, [r0, #0]
 80149b4:	60c4      	str	r4, [r0, #12]
 80149b6:	b13d      	cbz	r5, 80149c8 <_Bfree+0x2c>
 80149b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80149ba:	686a      	ldr	r2, [r5, #4]
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149c2:	6029      	str	r1, [r5, #0]
 80149c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80149c8:	bd70      	pop	{r4, r5, r6, pc}

080149ca <__multadd>:
 80149ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ce:	690d      	ldr	r5, [r1, #16]
 80149d0:	461f      	mov	r7, r3
 80149d2:	4606      	mov	r6, r0
 80149d4:	460c      	mov	r4, r1
 80149d6:	f101 0c14 	add.w	ip, r1, #20
 80149da:	2300      	movs	r3, #0
 80149dc:	f8dc 0000 	ldr.w	r0, [ip]
 80149e0:	b281      	uxth	r1, r0
 80149e2:	fb02 7101 	mla	r1, r2, r1, r7
 80149e6:	0c0f      	lsrs	r7, r1, #16
 80149e8:	0c00      	lsrs	r0, r0, #16
 80149ea:	fb02 7000 	mla	r0, r2, r0, r7
 80149ee:	b289      	uxth	r1, r1
 80149f0:	3301      	adds	r3, #1
 80149f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80149f6:	429d      	cmp	r5, r3
 80149f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80149fc:	f84c 1b04 	str.w	r1, [ip], #4
 8014a00:	dcec      	bgt.n	80149dc <__multadd+0x12>
 8014a02:	b1d7      	cbz	r7, 8014a3a <__multadd+0x70>
 8014a04:	68a3      	ldr	r3, [r4, #8]
 8014a06:	42ab      	cmp	r3, r5
 8014a08:	dc12      	bgt.n	8014a30 <__multadd+0x66>
 8014a0a:	6861      	ldr	r1, [r4, #4]
 8014a0c:	4630      	mov	r0, r6
 8014a0e:	3101      	adds	r1, #1
 8014a10:	f7ff ff90 	bl	8014934 <_Balloc>
 8014a14:	6922      	ldr	r2, [r4, #16]
 8014a16:	3202      	adds	r2, #2
 8014a18:	f104 010c 	add.w	r1, r4, #12
 8014a1c:	4680      	mov	r8, r0
 8014a1e:	0092      	lsls	r2, r2, #2
 8014a20:	300c      	adds	r0, #12
 8014a22:	f7fc fd8b 	bl	801153c <memcpy>
 8014a26:	4621      	mov	r1, r4
 8014a28:	4630      	mov	r0, r6
 8014a2a:	f7ff ffb7 	bl	801499c <_Bfree>
 8014a2e:	4644      	mov	r4, r8
 8014a30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a34:	3501      	adds	r5, #1
 8014a36:	615f      	str	r7, [r3, #20]
 8014a38:	6125      	str	r5, [r4, #16]
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a40 <__s2b>:
 8014a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a44:	460c      	mov	r4, r1
 8014a46:	4615      	mov	r5, r2
 8014a48:	461f      	mov	r7, r3
 8014a4a:	2209      	movs	r2, #9
 8014a4c:	3308      	adds	r3, #8
 8014a4e:	4606      	mov	r6, r0
 8014a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a54:	2100      	movs	r1, #0
 8014a56:	2201      	movs	r2, #1
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	db20      	blt.n	8014a9e <__s2b+0x5e>
 8014a5c:	4630      	mov	r0, r6
 8014a5e:	f7ff ff69 	bl	8014934 <_Balloc>
 8014a62:	9b08      	ldr	r3, [sp, #32]
 8014a64:	6143      	str	r3, [r0, #20]
 8014a66:	2d09      	cmp	r5, #9
 8014a68:	f04f 0301 	mov.w	r3, #1
 8014a6c:	6103      	str	r3, [r0, #16]
 8014a6e:	dd19      	ble.n	8014aa4 <__s2b+0x64>
 8014a70:	f104 0809 	add.w	r8, r4, #9
 8014a74:	46c1      	mov	r9, r8
 8014a76:	442c      	add	r4, r5
 8014a78:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014a7c:	4601      	mov	r1, r0
 8014a7e:	3b30      	subs	r3, #48	; 0x30
 8014a80:	220a      	movs	r2, #10
 8014a82:	4630      	mov	r0, r6
 8014a84:	f7ff ffa1 	bl	80149ca <__multadd>
 8014a88:	45a1      	cmp	r9, r4
 8014a8a:	d1f5      	bne.n	8014a78 <__s2b+0x38>
 8014a8c:	eb08 0405 	add.w	r4, r8, r5
 8014a90:	3c08      	subs	r4, #8
 8014a92:	1b2d      	subs	r5, r5, r4
 8014a94:	1963      	adds	r3, r4, r5
 8014a96:	42bb      	cmp	r3, r7
 8014a98:	db07      	blt.n	8014aaa <__s2b+0x6a>
 8014a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9e:	0052      	lsls	r2, r2, #1
 8014aa0:	3101      	adds	r1, #1
 8014aa2:	e7d9      	b.n	8014a58 <__s2b+0x18>
 8014aa4:	340a      	adds	r4, #10
 8014aa6:	2509      	movs	r5, #9
 8014aa8:	e7f3      	b.n	8014a92 <__s2b+0x52>
 8014aaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014aae:	4601      	mov	r1, r0
 8014ab0:	3b30      	subs	r3, #48	; 0x30
 8014ab2:	220a      	movs	r2, #10
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	f7ff ff88 	bl	80149ca <__multadd>
 8014aba:	e7eb      	b.n	8014a94 <__s2b+0x54>

08014abc <__hi0bits>:
 8014abc:	0c02      	lsrs	r2, r0, #16
 8014abe:	0412      	lsls	r2, r2, #16
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	b9b2      	cbnz	r2, 8014af2 <__hi0bits+0x36>
 8014ac4:	0403      	lsls	r3, r0, #16
 8014ac6:	2010      	movs	r0, #16
 8014ac8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014acc:	bf04      	itt	eq
 8014ace:	021b      	lsleq	r3, r3, #8
 8014ad0:	3008      	addeq	r0, #8
 8014ad2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014ad6:	bf04      	itt	eq
 8014ad8:	011b      	lsleq	r3, r3, #4
 8014ada:	3004      	addeq	r0, #4
 8014adc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014ae0:	bf04      	itt	eq
 8014ae2:	009b      	lsleq	r3, r3, #2
 8014ae4:	3002      	addeq	r0, #2
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	db06      	blt.n	8014af8 <__hi0bits+0x3c>
 8014aea:	005b      	lsls	r3, r3, #1
 8014aec:	d503      	bpl.n	8014af6 <__hi0bits+0x3a>
 8014aee:	3001      	adds	r0, #1
 8014af0:	4770      	bx	lr
 8014af2:	2000      	movs	r0, #0
 8014af4:	e7e8      	b.n	8014ac8 <__hi0bits+0xc>
 8014af6:	2020      	movs	r0, #32
 8014af8:	4770      	bx	lr

08014afa <__lo0bits>:
 8014afa:	6803      	ldr	r3, [r0, #0]
 8014afc:	f013 0207 	ands.w	r2, r3, #7
 8014b00:	4601      	mov	r1, r0
 8014b02:	d00b      	beq.n	8014b1c <__lo0bits+0x22>
 8014b04:	07da      	lsls	r2, r3, #31
 8014b06:	d423      	bmi.n	8014b50 <__lo0bits+0x56>
 8014b08:	0798      	lsls	r0, r3, #30
 8014b0a:	bf49      	itett	mi
 8014b0c:	085b      	lsrmi	r3, r3, #1
 8014b0e:	089b      	lsrpl	r3, r3, #2
 8014b10:	2001      	movmi	r0, #1
 8014b12:	600b      	strmi	r3, [r1, #0]
 8014b14:	bf5c      	itt	pl
 8014b16:	600b      	strpl	r3, [r1, #0]
 8014b18:	2002      	movpl	r0, #2
 8014b1a:	4770      	bx	lr
 8014b1c:	b298      	uxth	r0, r3
 8014b1e:	b9a8      	cbnz	r0, 8014b4c <__lo0bits+0x52>
 8014b20:	0c1b      	lsrs	r3, r3, #16
 8014b22:	2010      	movs	r0, #16
 8014b24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014b28:	bf04      	itt	eq
 8014b2a:	0a1b      	lsreq	r3, r3, #8
 8014b2c:	3008      	addeq	r0, #8
 8014b2e:	071a      	lsls	r2, r3, #28
 8014b30:	bf04      	itt	eq
 8014b32:	091b      	lsreq	r3, r3, #4
 8014b34:	3004      	addeq	r0, #4
 8014b36:	079a      	lsls	r2, r3, #30
 8014b38:	bf04      	itt	eq
 8014b3a:	089b      	lsreq	r3, r3, #2
 8014b3c:	3002      	addeq	r0, #2
 8014b3e:	07da      	lsls	r2, r3, #31
 8014b40:	d402      	bmi.n	8014b48 <__lo0bits+0x4e>
 8014b42:	085b      	lsrs	r3, r3, #1
 8014b44:	d006      	beq.n	8014b54 <__lo0bits+0x5a>
 8014b46:	3001      	adds	r0, #1
 8014b48:	600b      	str	r3, [r1, #0]
 8014b4a:	4770      	bx	lr
 8014b4c:	4610      	mov	r0, r2
 8014b4e:	e7e9      	b.n	8014b24 <__lo0bits+0x2a>
 8014b50:	2000      	movs	r0, #0
 8014b52:	4770      	bx	lr
 8014b54:	2020      	movs	r0, #32
 8014b56:	4770      	bx	lr

08014b58 <__i2b>:
 8014b58:	b510      	push	{r4, lr}
 8014b5a:	460c      	mov	r4, r1
 8014b5c:	2101      	movs	r1, #1
 8014b5e:	f7ff fee9 	bl	8014934 <_Balloc>
 8014b62:	2201      	movs	r2, #1
 8014b64:	6144      	str	r4, [r0, #20]
 8014b66:	6102      	str	r2, [r0, #16]
 8014b68:	bd10      	pop	{r4, pc}

08014b6a <__multiply>:
 8014b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6e:	4614      	mov	r4, r2
 8014b70:	690a      	ldr	r2, [r1, #16]
 8014b72:	6923      	ldr	r3, [r4, #16]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	bfb8      	it	lt
 8014b78:	460b      	movlt	r3, r1
 8014b7a:	4688      	mov	r8, r1
 8014b7c:	bfbc      	itt	lt
 8014b7e:	46a0      	movlt	r8, r4
 8014b80:	461c      	movlt	r4, r3
 8014b82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014b86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014b92:	eb07 0609 	add.w	r6, r7, r9
 8014b96:	42b3      	cmp	r3, r6
 8014b98:	bfb8      	it	lt
 8014b9a:	3101      	addlt	r1, #1
 8014b9c:	f7ff feca 	bl	8014934 <_Balloc>
 8014ba0:	f100 0514 	add.w	r5, r0, #20
 8014ba4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014ba8:	462b      	mov	r3, r5
 8014baa:	2200      	movs	r2, #0
 8014bac:	4573      	cmp	r3, lr
 8014bae:	d316      	bcc.n	8014bde <__multiply+0x74>
 8014bb0:	f104 0214 	add.w	r2, r4, #20
 8014bb4:	f108 0114 	add.w	r1, r8, #20
 8014bb8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014bbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	9b00      	ldr	r3, [sp, #0]
 8014bc4:	9201      	str	r2, [sp, #4]
 8014bc6:	4293      	cmp	r3, r2
 8014bc8:	d80c      	bhi.n	8014be4 <__multiply+0x7a>
 8014bca:	2e00      	cmp	r6, #0
 8014bcc:	dd03      	ble.n	8014bd6 <__multiply+0x6c>
 8014bce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d05d      	beq.n	8014c92 <__multiply+0x128>
 8014bd6:	6106      	str	r6, [r0, #16]
 8014bd8:	b003      	add	sp, #12
 8014bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bde:	f843 2b04 	str.w	r2, [r3], #4
 8014be2:	e7e3      	b.n	8014bac <__multiply+0x42>
 8014be4:	f8b2 b000 	ldrh.w	fp, [r2]
 8014be8:	f1bb 0f00 	cmp.w	fp, #0
 8014bec:	d023      	beq.n	8014c36 <__multiply+0xcc>
 8014bee:	4689      	mov	r9, r1
 8014bf0:	46ac      	mov	ip, r5
 8014bf2:	f04f 0800 	mov.w	r8, #0
 8014bf6:	f859 4b04 	ldr.w	r4, [r9], #4
 8014bfa:	f8dc a000 	ldr.w	sl, [ip]
 8014bfe:	b2a3      	uxth	r3, r4
 8014c00:	fa1f fa8a 	uxth.w	sl, sl
 8014c04:	fb0b a303 	mla	r3, fp, r3, sl
 8014c08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c0c:	f8dc 4000 	ldr.w	r4, [ip]
 8014c10:	4443      	add	r3, r8
 8014c12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014c16:	fb0b 840a 	mla	r4, fp, sl, r8
 8014c1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014c1e:	46e2      	mov	sl, ip
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014c26:	454f      	cmp	r7, r9
 8014c28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014c2c:	f84a 3b04 	str.w	r3, [sl], #4
 8014c30:	d82b      	bhi.n	8014c8a <__multiply+0x120>
 8014c32:	f8cc 8004 	str.w	r8, [ip, #4]
 8014c36:	9b01      	ldr	r3, [sp, #4]
 8014c38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014c3c:	3204      	adds	r2, #4
 8014c3e:	f1ba 0f00 	cmp.w	sl, #0
 8014c42:	d020      	beq.n	8014c86 <__multiply+0x11c>
 8014c44:	682b      	ldr	r3, [r5, #0]
 8014c46:	4689      	mov	r9, r1
 8014c48:	46a8      	mov	r8, r5
 8014c4a:	f04f 0b00 	mov.w	fp, #0
 8014c4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8014c52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014c56:	fb0a 440c 	mla	r4, sl, ip, r4
 8014c5a:	445c      	add	r4, fp
 8014c5c:	46c4      	mov	ip, r8
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014c64:	f84c 3b04 	str.w	r3, [ip], #4
 8014c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014c70:	0c1b      	lsrs	r3, r3, #16
 8014c72:	fb0a b303 	mla	r3, sl, r3, fp
 8014c76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014c7a:	454f      	cmp	r7, r9
 8014c7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014c80:	d805      	bhi.n	8014c8e <__multiply+0x124>
 8014c82:	f8c8 3004 	str.w	r3, [r8, #4]
 8014c86:	3504      	adds	r5, #4
 8014c88:	e79b      	b.n	8014bc2 <__multiply+0x58>
 8014c8a:	46d4      	mov	ip, sl
 8014c8c:	e7b3      	b.n	8014bf6 <__multiply+0x8c>
 8014c8e:	46e0      	mov	r8, ip
 8014c90:	e7dd      	b.n	8014c4e <__multiply+0xe4>
 8014c92:	3e01      	subs	r6, #1
 8014c94:	e799      	b.n	8014bca <__multiply+0x60>
	...

08014c98 <__pow5mult>:
 8014c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c9c:	4615      	mov	r5, r2
 8014c9e:	f012 0203 	ands.w	r2, r2, #3
 8014ca2:	4606      	mov	r6, r0
 8014ca4:	460f      	mov	r7, r1
 8014ca6:	d007      	beq.n	8014cb8 <__pow5mult+0x20>
 8014ca8:	3a01      	subs	r2, #1
 8014caa:	4c21      	ldr	r4, [pc, #132]	; (8014d30 <__pow5mult+0x98>)
 8014cac:	2300      	movs	r3, #0
 8014cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014cb2:	f7ff fe8a 	bl	80149ca <__multadd>
 8014cb6:	4607      	mov	r7, r0
 8014cb8:	10ad      	asrs	r5, r5, #2
 8014cba:	d035      	beq.n	8014d28 <__pow5mult+0x90>
 8014cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014cbe:	b93c      	cbnz	r4, 8014cd0 <__pow5mult+0x38>
 8014cc0:	2010      	movs	r0, #16
 8014cc2:	f7ff fe1d 	bl	8014900 <malloc>
 8014cc6:	6270      	str	r0, [r6, #36]	; 0x24
 8014cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ccc:	6004      	str	r4, [r0, #0]
 8014cce:	60c4      	str	r4, [r0, #12]
 8014cd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014cd8:	b94c      	cbnz	r4, 8014cee <__pow5mult+0x56>
 8014cda:	f240 2171 	movw	r1, #625	; 0x271
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f7ff ff3a 	bl	8014b58 <__i2b>
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cea:	4604      	mov	r4, r0
 8014cec:	6003      	str	r3, [r0, #0]
 8014cee:	f04f 0800 	mov.w	r8, #0
 8014cf2:	07eb      	lsls	r3, r5, #31
 8014cf4:	d50a      	bpl.n	8014d0c <__pow5mult+0x74>
 8014cf6:	4639      	mov	r1, r7
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7ff ff35 	bl	8014b6a <__multiply>
 8014d00:	4639      	mov	r1, r7
 8014d02:	4681      	mov	r9, r0
 8014d04:	4630      	mov	r0, r6
 8014d06:	f7ff fe49 	bl	801499c <_Bfree>
 8014d0a:	464f      	mov	r7, r9
 8014d0c:	106d      	asrs	r5, r5, #1
 8014d0e:	d00b      	beq.n	8014d28 <__pow5mult+0x90>
 8014d10:	6820      	ldr	r0, [r4, #0]
 8014d12:	b938      	cbnz	r0, 8014d24 <__pow5mult+0x8c>
 8014d14:	4622      	mov	r2, r4
 8014d16:	4621      	mov	r1, r4
 8014d18:	4630      	mov	r0, r6
 8014d1a:	f7ff ff26 	bl	8014b6a <__multiply>
 8014d1e:	6020      	str	r0, [r4, #0]
 8014d20:	f8c0 8000 	str.w	r8, [r0]
 8014d24:	4604      	mov	r4, r0
 8014d26:	e7e4      	b.n	8014cf2 <__pow5mult+0x5a>
 8014d28:	4638      	mov	r0, r7
 8014d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d2e:	bf00      	nop
 8014d30:	08015d88 	.word	0x08015d88

08014d34 <__lshift>:
 8014d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d38:	460c      	mov	r4, r1
 8014d3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d3e:	6923      	ldr	r3, [r4, #16]
 8014d40:	6849      	ldr	r1, [r1, #4]
 8014d42:	eb0a 0903 	add.w	r9, sl, r3
 8014d46:	68a3      	ldr	r3, [r4, #8]
 8014d48:	4607      	mov	r7, r0
 8014d4a:	4616      	mov	r6, r2
 8014d4c:	f109 0501 	add.w	r5, r9, #1
 8014d50:	42ab      	cmp	r3, r5
 8014d52:	db32      	blt.n	8014dba <__lshift+0x86>
 8014d54:	4638      	mov	r0, r7
 8014d56:	f7ff fded 	bl	8014934 <_Balloc>
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	4680      	mov	r8, r0
 8014d5e:	f100 0114 	add.w	r1, r0, #20
 8014d62:	461a      	mov	r2, r3
 8014d64:	4553      	cmp	r3, sl
 8014d66:	db2b      	blt.n	8014dc0 <__lshift+0x8c>
 8014d68:	6920      	ldr	r0, [r4, #16]
 8014d6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d6e:	f104 0314 	add.w	r3, r4, #20
 8014d72:	f016 021f 	ands.w	r2, r6, #31
 8014d76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d7e:	d025      	beq.n	8014dcc <__lshift+0x98>
 8014d80:	f1c2 0e20 	rsb	lr, r2, #32
 8014d84:	2000      	movs	r0, #0
 8014d86:	681e      	ldr	r6, [r3, #0]
 8014d88:	468a      	mov	sl, r1
 8014d8a:	4096      	lsls	r6, r2
 8014d8c:	4330      	orrs	r0, r6
 8014d8e:	f84a 0b04 	str.w	r0, [sl], #4
 8014d92:	f853 0b04 	ldr.w	r0, [r3], #4
 8014d96:	459c      	cmp	ip, r3
 8014d98:	fa20 f00e 	lsr.w	r0, r0, lr
 8014d9c:	d814      	bhi.n	8014dc8 <__lshift+0x94>
 8014d9e:	6048      	str	r0, [r1, #4]
 8014da0:	b108      	cbz	r0, 8014da6 <__lshift+0x72>
 8014da2:	f109 0502 	add.w	r5, r9, #2
 8014da6:	3d01      	subs	r5, #1
 8014da8:	4638      	mov	r0, r7
 8014daa:	f8c8 5010 	str.w	r5, [r8, #16]
 8014dae:	4621      	mov	r1, r4
 8014db0:	f7ff fdf4 	bl	801499c <_Bfree>
 8014db4:	4640      	mov	r0, r8
 8014db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dba:	3101      	adds	r1, #1
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	e7c7      	b.n	8014d50 <__lshift+0x1c>
 8014dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	e7cd      	b.n	8014d64 <__lshift+0x30>
 8014dc8:	4651      	mov	r1, sl
 8014dca:	e7dc      	b.n	8014d86 <__lshift+0x52>
 8014dcc:	3904      	subs	r1, #4
 8014dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dd6:	459c      	cmp	ip, r3
 8014dd8:	d8f9      	bhi.n	8014dce <__lshift+0x9a>
 8014dda:	e7e4      	b.n	8014da6 <__lshift+0x72>

08014ddc <__mcmp>:
 8014ddc:	6903      	ldr	r3, [r0, #16]
 8014dde:	690a      	ldr	r2, [r1, #16]
 8014de0:	1a9b      	subs	r3, r3, r2
 8014de2:	b530      	push	{r4, r5, lr}
 8014de4:	d10c      	bne.n	8014e00 <__mcmp+0x24>
 8014de6:	0092      	lsls	r2, r2, #2
 8014de8:	3014      	adds	r0, #20
 8014dea:	3114      	adds	r1, #20
 8014dec:	1884      	adds	r4, r0, r2
 8014dee:	4411      	add	r1, r2
 8014df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014df8:	4295      	cmp	r5, r2
 8014dfa:	d003      	beq.n	8014e04 <__mcmp+0x28>
 8014dfc:	d305      	bcc.n	8014e0a <__mcmp+0x2e>
 8014dfe:	2301      	movs	r3, #1
 8014e00:	4618      	mov	r0, r3
 8014e02:	bd30      	pop	{r4, r5, pc}
 8014e04:	42a0      	cmp	r0, r4
 8014e06:	d3f3      	bcc.n	8014df0 <__mcmp+0x14>
 8014e08:	e7fa      	b.n	8014e00 <__mcmp+0x24>
 8014e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0e:	e7f7      	b.n	8014e00 <__mcmp+0x24>

08014e10 <__mdiff>:
 8014e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e14:	460d      	mov	r5, r1
 8014e16:	4607      	mov	r7, r0
 8014e18:	4611      	mov	r1, r2
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	4614      	mov	r4, r2
 8014e1e:	f7ff ffdd 	bl	8014ddc <__mcmp>
 8014e22:	1e06      	subs	r6, r0, #0
 8014e24:	d108      	bne.n	8014e38 <__mdiff+0x28>
 8014e26:	4631      	mov	r1, r6
 8014e28:	4638      	mov	r0, r7
 8014e2a:	f7ff fd83 	bl	8014934 <_Balloc>
 8014e2e:	2301      	movs	r3, #1
 8014e30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e38:	bfa4      	itt	ge
 8014e3a:	4623      	movge	r3, r4
 8014e3c:	462c      	movge	r4, r5
 8014e3e:	4638      	mov	r0, r7
 8014e40:	6861      	ldr	r1, [r4, #4]
 8014e42:	bfa6      	itte	ge
 8014e44:	461d      	movge	r5, r3
 8014e46:	2600      	movge	r6, #0
 8014e48:	2601      	movlt	r6, #1
 8014e4a:	f7ff fd73 	bl	8014934 <_Balloc>
 8014e4e:	692b      	ldr	r3, [r5, #16]
 8014e50:	60c6      	str	r6, [r0, #12]
 8014e52:	6926      	ldr	r6, [r4, #16]
 8014e54:	f105 0914 	add.w	r9, r5, #20
 8014e58:	f104 0214 	add.w	r2, r4, #20
 8014e5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014e60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014e64:	f100 0514 	add.w	r5, r0, #20
 8014e68:	f04f 0e00 	mov.w	lr, #0
 8014e6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8014e70:	f859 4b04 	ldr.w	r4, [r9], #4
 8014e74:	fa1e f18a 	uxtah	r1, lr, sl
 8014e78:	b2a3      	uxth	r3, r4
 8014e7a:	1ac9      	subs	r1, r1, r3
 8014e7c:	0c23      	lsrs	r3, r4, #16
 8014e7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014e82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014e86:	b289      	uxth	r1, r1
 8014e88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014e8c:	45c8      	cmp	r8, r9
 8014e8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014e92:	4694      	mov	ip, r2
 8014e94:	f845 3b04 	str.w	r3, [r5], #4
 8014e98:	d8e8      	bhi.n	8014e6c <__mdiff+0x5c>
 8014e9a:	45bc      	cmp	ip, r7
 8014e9c:	d304      	bcc.n	8014ea8 <__mdiff+0x98>
 8014e9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014ea2:	b183      	cbz	r3, 8014ec6 <__mdiff+0xb6>
 8014ea4:	6106      	str	r6, [r0, #16]
 8014ea6:	e7c5      	b.n	8014e34 <__mdiff+0x24>
 8014ea8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014eac:	fa1e f381 	uxtah	r3, lr, r1
 8014eb0:	141a      	asrs	r2, r3, #16
 8014eb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ebc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014ec0:	f845 3b04 	str.w	r3, [r5], #4
 8014ec4:	e7e9      	b.n	8014e9a <__mdiff+0x8a>
 8014ec6:	3e01      	subs	r6, #1
 8014ec8:	e7e9      	b.n	8014e9e <__mdiff+0x8e>
	...

08014ecc <__ulp>:
 8014ecc:	4b12      	ldr	r3, [pc, #72]	; (8014f18 <__ulp+0x4c>)
 8014ece:	ee10 2a90 	vmov	r2, s1
 8014ed2:	401a      	ands	r2, r3
 8014ed4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	dd04      	ble.n	8014ee6 <__ulp+0x1a>
 8014edc:	2000      	movs	r0, #0
 8014ede:	4619      	mov	r1, r3
 8014ee0:	ec41 0b10 	vmov	d0, r0, r1
 8014ee4:	4770      	bx	lr
 8014ee6:	425b      	negs	r3, r3
 8014ee8:	151b      	asrs	r3, r3, #20
 8014eea:	2b13      	cmp	r3, #19
 8014eec:	f04f 0000 	mov.w	r0, #0
 8014ef0:	f04f 0100 	mov.w	r1, #0
 8014ef4:	dc04      	bgt.n	8014f00 <__ulp+0x34>
 8014ef6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014efa:	fa42 f103 	asr.w	r1, r2, r3
 8014efe:	e7ef      	b.n	8014ee0 <__ulp+0x14>
 8014f00:	3b14      	subs	r3, #20
 8014f02:	2b1e      	cmp	r3, #30
 8014f04:	f04f 0201 	mov.w	r2, #1
 8014f08:	bfda      	itte	le
 8014f0a:	f1c3 031f 	rsble	r3, r3, #31
 8014f0e:	fa02 f303 	lslle.w	r3, r2, r3
 8014f12:	4613      	movgt	r3, r2
 8014f14:	4618      	mov	r0, r3
 8014f16:	e7e3      	b.n	8014ee0 <__ulp+0x14>
 8014f18:	7ff00000 	.word	0x7ff00000

08014f1c <__b2d>:
 8014f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1e:	6905      	ldr	r5, [r0, #16]
 8014f20:	f100 0714 	add.w	r7, r0, #20
 8014f24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014f28:	1f2e      	subs	r6, r5, #4
 8014f2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f7ff fdc4 	bl	8014abc <__hi0bits>
 8014f34:	f1c0 0320 	rsb	r3, r0, #32
 8014f38:	280a      	cmp	r0, #10
 8014f3a:	600b      	str	r3, [r1, #0]
 8014f3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014fb4 <__b2d+0x98>
 8014f40:	dc14      	bgt.n	8014f6c <__b2d+0x50>
 8014f42:	f1c0 0e0b 	rsb	lr, r0, #11
 8014f46:	fa24 f10e 	lsr.w	r1, r4, lr
 8014f4a:	42b7      	cmp	r7, r6
 8014f4c:	ea41 030c 	orr.w	r3, r1, ip
 8014f50:	bf34      	ite	cc
 8014f52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014f56:	2100      	movcs	r1, #0
 8014f58:	3015      	adds	r0, #21
 8014f5a:	fa04 f000 	lsl.w	r0, r4, r0
 8014f5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014f62:	ea40 0201 	orr.w	r2, r0, r1
 8014f66:	ec43 2b10 	vmov	d0, r2, r3
 8014f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f6c:	42b7      	cmp	r7, r6
 8014f6e:	bf3a      	itte	cc
 8014f70:	f1a5 0608 	subcc.w	r6, r5, #8
 8014f74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014f78:	2100      	movcs	r1, #0
 8014f7a:	380b      	subs	r0, #11
 8014f7c:	d015      	beq.n	8014faa <__b2d+0x8e>
 8014f7e:	4084      	lsls	r4, r0
 8014f80:	f1c0 0520 	rsb	r5, r0, #32
 8014f84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014f88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014f8c:	42be      	cmp	r6, r7
 8014f8e:	fa21 fc05 	lsr.w	ip, r1, r5
 8014f92:	ea44 030c 	orr.w	r3, r4, ip
 8014f96:	bf8c      	ite	hi
 8014f98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014f9c:	2400      	movls	r4, #0
 8014f9e:	fa01 f000 	lsl.w	r0, r1, r0
 8014fa2:	40ec      	lsrs	r4, r5
 8014fa4:	ea40 0204 	orr.w	r2, r0, r4
 8014fa8:	e7dd      	b.n	8014f66 <__b2d+0x4a>
 8014faa:	ea44 030c 	orr.w	r3, r4, ip
 8014fae:	460a      	mov	r2, r1
 8014fb0:	e7d9      	b.n	8014f66 <__b2d+0x4a>
 8014fb2:	bf00      	nop
 8014fb4:	3ff00000 	.word	0x3ff00000

08014fb8 <__d2b>:
 8014fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014fbc:	460e      	mov	r6, r1
 8014fbe:	2101      	movs	r1, #1
 8014fc0:	ec59 8b10 	vmov	r8, r9, d0
 8014fc4:	4615      	mov	r5, r2
 8014fc6:	f7ff fcb5 	bl	8014934 <_Balloc>
 8014fca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014fce:	4607      	mov	r7, r0
 8014fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fd4:	bb34      	cbnz	r4, 8015024 <__d2b+0x6c>
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8014fdc:	d027      	beq.n	801502e <__d2b+0x76>
 8014fde:	a802      	add	r0, sp, #8
 8014fe0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014fe4:	f7ff fd89 	bl	8014afa <__lo0bits>
 8014fe8:	9900      	ldr	r1, [sp, #0]
 8014fea:	b1f0      	cbz	r0, 801502a <__d2b+0x72>
 8014fec:	9a01      	ldr	r2, [sp, #4]
 8014fee:	f1c0 0320 	rsb	r3, r0, #32
 8014ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ff6:	430b      	orrs	r3, r1
 8014ff8:	40c2      	lsrs	r2, r0
 8014ffa:	617b      	str	r3, [r7, #20]
 8014ffc:	9201      	str	r2, [sp, #4]
 8014ffe:	9b01      	ldr	r3, [sp, #4]
 8015000:	61bb      	str	r3, [r7, #24]
 8015002:	2b00      	cmp	r3, #0
 8015004:	bf14      	ite	ne
 8015006:	2102      	movne	r1, #2
 8015008:	2101      	moveq	r1, #1
 801500a:	6139      	str	r1, [r7, #16]
 801500c:	b1c4      	cbz	r4, 8015040 <__d2b+0x88>
 801500e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015012:	4404      	add	r4, r0
 8015014:	6034      	str	r4, [r6, #0]
 8015016:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801501a:	6028      	str	r0, [r5, #0]
 801501c:	4638      	mov	r0, r7
 801501e:	b003      	add	sp, #12
 8015020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015028:	e7d5      	b.n	8014fd6 <__d2b+0x1e>
 801502a:	6179      	str	r1, [r7, #20]
 801502c:	e7e7      	b.n	8014ffe <__d2b+0x46>
 801502e:	a801      	add	r0, sp, #4
 8015030:	f7ff fd63 	bl	8014afa <__lo0bits>
 8015034:	9b01      	ldr	r3, [sp, #4]
 8015036:	617b      	str	r3, [r7, #20]
 8015038:	2101      	movs	r1, #1
 801503a:	6139      	str	r1, [r7, #16]
 801503c:	3020      	adds	r0, #32
 801503e:	e7e5      	b.n	801500c <__d2b+0x54>
 8015040:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015048:	6030      	str	r0, [r6, #0]
 801504a:	6918      	ldr	r0, [r3, #16]
 801504c:	f7ff fd36 	bl	8014abc <__hi0bits>
 8015050:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015054:	e7e1      	b.n	801501a <__d2b+0x62>

08015056 <__ratio>:
 8015056:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801505a:	4688      	mov	r8, r1
 801505c:	4669      	mov	r1, sp
 801505e:	4681      	mov	r9, r0
 8015060:	f7ff ff5c 	bl	8014f1c <__b2d>
 8015064:	a901      	add	r1, sp, #4
 8015066:	4640      	mov	r0, r8
 8015068:	ec57 6b10 	vmov	r6, r7, d0
 801506c:	f7ff ff56 	bl	8014f1c <__b2d>
 8015070:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015074:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015078:	eba3 0c02 	sub.w	ip, r3, r2
 801507c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015080:	1a9b      	subs	r3, r3, r2
 8015082:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015086:	ec5b ab10 	vmov	sl, fp, d0
 801508a:	2b00      	cmp	r3, #0
 801508c:	bfce      	itee	gt
 801508e:	463a      	movgt	r2, r7
 8015090:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015094:	465a      	movle	r2, fp
 8015096:	4659      	mov	r1, fp
 8015098:	463d      	mov	r5, r7
 801509a:	bfd4      	ite	le
 801509c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80150a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80150a4:	4630      	mov	r0, r6
 80150a6:	ee10 2a10 	vmov	r2, s0
 80150aa:	460b      	mov	r3, r1
 80150ac:	4629      	mov	r1, r5
 80150ae:	f7f3 fb05 	bl	80086bc <__aeabi_ddiv>
 80150b2:	ec41 0b10 	vmov	d0, r0, r1
 80150b6:	b003      	add	sp, #12
 80150b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150bc <__copybits>:
 80150bc:	3901      	subs	r1, #1
 80150be:	b510      	push	{r4, lr}
 80150c0:	1149      	asrs	r1, r1, #5
 80150c2:	6914      	ldr	r4, [r2, #16]
 80150c4:	3101      	adds	r1, #1
 80150c6:	f102 0314 	add.w	r3, r2, #20
 80150ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80150ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150d2:	42a3      	cmp	r3, r4
 80150d4:	4602      	mov	r2, r0
 80150d6:	d303      	bcc.n	80150e0 <__copybits+0x24>
 80150d8:	2300      	movs	r3, #0
 80150da:	428a      	cmp	r2, r1
 80150dc:	d305      	bcc.n	80150ea <__copybits+0x2e>
 80150de:	bd10      	pop	{r4, pc}
 80150e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80150e4:	f840 2b04 	str.w	r2, [r0], #4
 80150e8:	e7f3      	b.n	80150d2 <__copybits+0x16>
 80150ea:	f842 3b04 	str.w	r3, [r2], #4
 80150ee:	e7f4      	b.n	80150da <__copybits+0x1e>

080150f0 <__any_on>:
 80150f0:	f100 0214 	add.w	r2, r0, #20
 80150f4:	6900      	ldr	r0, [r0, #16]
 80150f6:	114b      	asrs	r3, r1, #5
 80150f8:	4298      	cmp	r0, r3
 80150fa:	b510      	push	{r4, lr}
 80150fc:	db11      	blt.n	8015122 <__any_on+0x32>
 80150fe:	dd0a      	ble.n	8015116 <__any_on+0x26>
 8015100:	f011 011f 	ands.w	r1, r1, #31
 8015104:	d007      	beq.n	8015116 <__any_on+0x26>
 8015106:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801510a:	fa24 f001 	lsr.w	r0, r4, r1
 801510e:	fa00 f101 	lsl.w	r1, r0, r1
 8015112:	428c      	cmp	r4, r1
 8015114:	d10b      	bne.n	801512e <__any_on+0x3e>
 8015116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801511a:	4293      	cmp	r3, r2
 801511c:	d803      	bhi.n	8015126 <__any_on+0x36>
 801511e:	2000      	movs	r0, #0
 8015120:	bd10      	pop	{r4, pc}
 8015122:	4603      	mov	r3, r0
 8015124:	e7f7      	b.n	8015116 <__any_on+0x26>
 8015126:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801512a:	2900      	cmp	r1, #0
 801512c:	d0f5      	beq.n	801511a <__any_on+0x2a>
 801512e:	2001      	movs	r0, #1
 8015130:	e7f6      	b.n	8015120 <__any_on+0x30>

08015132 <_calloc_r>:
 8015132:	b538      	push	{r3, r4, r5, lr}
 8015134:	fb02 f401 	mul.w	r4, r2, r1
 8015138:	4621      	mov	r1, r4
 801513a:	f000 f857 	bl	80151ec <_malloc_r>
 801513e:	4605      	mov	r5, r0
 8015140:	b118      	cbz	r0, 801514a <_calloc_r+0x18>
 8015142:	4622      	mov	r2, r4
 8015144:	2100      	movs	r1, #0
 8015146:	f7fc fa04 	bl	8011552 <memset>
 801514a:	4628      	mov	r0, r5
 801514c:	bd38      	pop	{r3, r4, r5, pc}
	...

08015150 <_free_r>:
 8015150:	b538      	push	{r3, r4, r5, lr}
 8015152:	4605      	mov	r5, r0
 8015154:	2900      	cmp	r1, #0
 8015156:	d045      	beq.n	80151e4 <_free_r+0x94>
 8015158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801515c:	1f0c      	subs	r4, r1, #4
 801515e:	2b00      	cmp	r3, #0
 8015160:	bfb8      	it	lt
 8015162:	18e4      	addlt	r4, r4, r3
 8015164:	f000 fc0f 	bl	8015986 <__malloc_lock>
 8015168:	4a1f      	ldr	r2, [pc, #124]	; (80151e8 <_free_r+0x98>)
 801516a:	6813      	ldr	r3, [r2, #0]
 801516c:	4610      	mov	r0, r2
 801516e:	b933      	cbnz	r3, 801517e <_free_r+0x2e>
 8015170:	6063      	str	r3, [r4, #4]
 8015172:	6014      	str	r4, [r2, #0]
 8015174:	4628      	mov	r0, r5
 8015176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801517a:	f000 bc05 	b.w	8015988 <__malloc_unlock>
 801517e:	42a3      	cmp	r3, r4
 8015180:	d90c      	bls.n	801519c <_free_r+0x4c>
 8015182:	6821      	ldr	r1, [r4, #0]
 8015184:	1862      	adds	r2, r4, r1
 8015186:	4293      	cmp	r3, r2
 8015188:	bf04      	itt	eq
 801518a:	681a      	ldreq	r2, [r3, #0]
 801518c:	685b      	ldreq	r3, [r3, #4]
 801518e:	6063      	str	r3, [r4, #4]
 8015190:	bf04      	itt	eq
 8015192:	1852      	addeq	r2, r2, r1
 8015194:	6022      	streq	r2, [r4, #0]
 8015196:	6004      	str	r4, [r0, #0]
 8015198:	e7ec      	b.n	8015174 <_free_r+0x24>
 801519a:	4613      	mov	r3, r2
 801519c:	685a      	ldr	r2, [r3, #4]
 801519e:	b10a      	cbz	r2, 80151a4 <_free_r+0x54>
 80151a0:	42a2      	cmp	r2, r4
 80151a2:	d9fa      	bls.n	801519a <_free_r+0x4a>
 80151a4:	6819      	ldr	r1, [r3, #0]
 80151a6:	1858      	adds	r0, r3, r1
 80151a8:	42a0      	cmp	r0, r4
 80151aa:	d10b      	bne.n	80151c4 <_free_r+0x74>
 80151ac:	6820      	ldr	r0, [r4, #0]
 80151ae:	4401      	add	r1, r0
 80151b0:	1858      	adds	r0, r3, r1
 80151b2:	4282      	cmp	r2, r0
 80151b4:	6019      	str	r1, [r3, #0]
 80151b6:	d1dd      	bne.n	8015174 <_free_r+0x24>
 80151b8:	6810      	ldr	r0, [r2, #0]
 80151ba:	6852      	ldr	r2, [r2, #4]
 80151bc:	605a      	str	r2, [r3, #4]
 80151be:	4401      	add	r1, r0
 80151c0:	6019      	str	r1, [r3, #0]
 80151c2:	e7d7      	b.n	8015174 <_free_r+0x24>
 80151c4:	d902      	bls.n	80151cc <_free_r+0x7c>
 80151c6:	230c      	movs	r3, #12
 80151c8:	602b      	str	r3, [r5, #0]
 80151ca:	e7d3      	b.n	8015174 <_free_r+0x24>
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	1821      	adds	r1, r4, r0
 80151d0:	428a      	cmp	r2, r1
 80151d2:	bf04      	itt	eq
 80151d4:	6811      	ldreq	r1, [r2, #0]
 80151d6:	6852      	ldreq	r2, [r2, #4]
 80151d8:	6062      	str	r2, [r4, #4]
 80151da:	bf04      	itt	eq
 80151dc:	1809      	addeq	r1, r1, r0
 80151de:	6021      	streq	r1, [r4, #0]
 80151e0:	605c      	str	r4, [r3, #4]
 80151e2:	e7c7      	b.n	8015174 <_free_r+0x24>
 80151e4:	bd38      	pop	{r3, r4, r5, pc}
 80151e6:	bf00      	nop
 80151e8:	20000250 	.word	0x20000250

080151ec <_malloc_r>:
 80151ec:	b570      	push	{r4, r5, r6, lr}
 80151ee:	1ccd      	adds	r5, r1, #3
 80151f0:	f025 0503 	bic.w	r5, r5, #3
 80151f4:	3508      	adds	r5, #8
 80151f6:	2d0c      	cmp	r5, #12
 80151f8:	bf38      	it	cc
 80151fa:	250c      	movcc	r5, #12
 80151fc:	2d00      	cmp	r5, #0
 80151fe:	4606      	mov	r6, r0
 8015200:	db01      	blt.n	8015206 <_malloc_r+0x1a>
 8015202:	42a9      	cmp	r1, r5
 8015204:	d903      	bls.n	801520e <_malloc_r+0x22>
 8015206:	230c      	movs	r3, #12
 8015208:	6033      	str	r3, [r6, #0]
 801520a:	2000      	movs	r0, #0
 801520c:	bd70      	pop	{r4, r5, r6, pc}
 801520e:	f000 fbba 	bl	8015986 <__malloc_lock>
 8015212:	4a21      	ldr	r2, [pc, #132]	; (8015298 <_malloc_r+0xac>)
 8015214:	6814      	ldr	r4, [r2, #0]
 8015216:	4621      	mov	r1, r4
 8015218:	b991      	cbnz	r1, 8015240 <_malloc_r+0x54>
 801521a:	4c20      	ldr	r4, [pc, #128]	; (801529c <_malloc_r+0xb0>)
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	b91b      	cbnz	r3, 8015228 <_malloc_r+0x3c>
 8015220:	4630      	mov	r0, r6
 8015222:	f000 facf 	bl	80157c4 <_sbrk_r>
 8015226:	6020      	str	r0, [r4, #0]
 8015228:	4629      	mov	r1, r5
 801522a:	4630      	mov	r0, r6
 801522c:	f000 faca 	bl	80157c4 <_sbrk_r>
 8015230:	1c43      	adds	r3, r0, #1
 8015232:	d124      	bne.n	801527e <_malloc_r+0x92>
 8015234:	230c      	movs	r3, #12
 8015236:	6033      	str	r3, [r6, #0]
 8015238:	4630      	mov	r0, r6
 801523a:	f000 fba5 	bl	8015988 <__malloc_unlock>
 801523e:	e7e4      	b.n	801520a <_malloc_r+0x1e>
 8015240:	680b      	ldr	r3, [r1, #0]
 8015242:	1b5b      	subs	r3, r3, r5
 8015244:	d418      	bmi.n	8015278 <_malloc_r+0x8c>
 8015246:	2b0b      	cmp	r3, #11
 8015248:	d90f      	bls.n	801526a <_malloc_r+0x7e>
 801524a:	600b      	str	r3, [r1, #0]
 801524c:	50cd      	str	r5, [r1, r3]
 801524e:	18cc      	adds	r4, r1, r3
 8015250:	4630      	mov	r0, r6
 8015252:	f000 fb99 	bl	8015988 <__malloc_unlock>
 8015256:	f104 000b 	add.w	r0, r4, #11
 801525a:	1d23      	adds	r3, r4, #4
 801525c:	f020 0007 	bic.w	r0, r0, #7
 8015260:	1ac3      	subs	r3, r0, r3
 8015262:	d0d3      	beq.n	801520c <_malloc_r+0x20>
 8015264:	425a      	negs	r2, r3
 8015266:	50e2      	str	r2, [r4, r3]
 8015268:	e7d0      	b.n	801520c <_malloc_r+0x20>
 801526a:	428c      	cmp	r4, r1
 801526c:	684b      	ldr	r3, [r1, #4]
 801526e:	bf16      	itet	ne
 8015270:	6063      	strne	r3, [r4, #4]
 8015272:	6013      	streq	r3, [r2, #0]
 8015274:	460c      	movne	r4, r1
 8015276:	e7eb      	b.n	8015250 <_malloc_r+0x64>
 8015278:	460c      	mov	r4, r1
 801527a:	6849      	ldr	r1, [r1, #4]
 801527c:	e7cc      	b.n	8015218 <_malloc_r+0x2c>
 801527e:	1cc4      	adds	r4, r0, #3
 8015280:	f024 0403 	bic.w	r4, r4, #3
 8015284:	42a0      	cmp	r0, r4
 8015286:	d005      	beq.n	8015294 <_malloc_r+0xa8>
 8015288:	1a21      	subs	r1, r4, r0
 801528a:	4630      	mov	r0, r6
 801528c:	f000 fa9a 	bl	80157c4 <_sbrk_r>
 8015290:	3001      	adds	r0, #1
 8015292:	d0cf      	beq.n	8015234 <_malloc_r+0x48>
 8015294:	6025      	str	r5, [r4, #0]
 8015296:	e7db      	b.n	8015250 <_malloc_r+0x64>
 8015298:	20000250 	.word	0x20000250
 801529c:	20000254 	.word	0x20000254

080152a0 <__ssputs_r>:
 80152a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152a4:	688e      	ldr	r6, [r1, #8]
 80152a6:	429e      	cmp	r6, r3
 80152a8:	4682      	mov	sl, r0
 80152aa:	460c      	mov	r4, r1
 80152ac:	4690      	mov	r8, r2
 80152ae:	4699      	mov	r9, r3
 80152b0:	d837      	bhi.n	8015322 <__ssputs_r+0x82>
 80152b2:	898a      	ldrh	r2, [r1, #12]
 80152b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80152b8:	d031      	beq.n	801531e <__ssputs_r+0x7e>
 80152ba:	6825      	ldr	r5, [r4, #0]
 80152bc:	6909      	ldr	r1, [r1, #16]
 80152be:	1a6f      	subs	r7, r5, r1
 80152c0:	6965      	ldr	r5, [r4, #20]
 80152c2:	2302      	movs	r3, #2
 80152c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80152cc:	f109 0301 	add.w	r3, r9, #1
 80152d0:	443b      	add	r3, r7
 80152d2:	429d      	cmp	r5, r3
 80152d4:	bf38      	it	cc
 80152d6:	461d      	movcc	r5, r3
 80152d8:	0553      	lsls	r3, r2, #21
 80152da:	d530      	bpl.n	801533e <__ssputs_r+0x9e>
 80152dc:	4629      	mov	r1, r5
 80152de:	f7ff ff85 	bl	80151ec <_malloc_r>
 80152e2:	4606      	mov	r6, r0
 80152e4:	b950      	cbnz	r0, 80152fc <__ssputs_r+0x5c>
 80152e6:	230c      	movs	r3, #12
 80152e8:	f8ca 3000 	str.w	r3, [sl]
 80152ec:	89a3      	ldrh	r3, [r4, #12]
 80152ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152f2:	81a3      	strh	r3, [r4, #12]
 80152f4:	f04f 30ff 	mov.w	r0, #4294967295
 80152f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fc:	463a      	mov	r2, r7
 80152fe:	6921      	ldr	r1, [r4, #16]
 8015300:	f7fc f91c 	bl	801153c <memcpy>
 8015304:	89a3      	ldrh	r3, [r4, #12]
 8015306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801530a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801530e:	81a3      	strh	r3, [r4, #12]
 8015310:	6126      	str	r6, [r4, #16]
 8015312:	6165      	str	r5, [r4, #20]
 8015314:	443e      	add	r6, r7
 8015316:	1bed      	subs	r5, r5, r7
 8015318:	6026      	str	r6, [r4, #0]
 801531a:	60a5      	str	r5, [r4, #8]
 801531c:	464e      	mov	r6, r9
 801531e:	454e      	cmp	r6, r9
 8015320:	d900      	bls.n	8015324 <__ssputs_r+0x84>
 8015322:	464e      	mov	r6, r9
 8015324:	4632      	mov	r2, r6
 8015326:	4641      	mov	r1, r8
 8015328:	6820      	ldr	r0, [r4, #0]
 801532a:	f000 fb13 	bl	8015954 <memmove>
 801532e:	68a3      	ldr	r3, [r4, #8]
 8015330:	1b9b      	subs	r3, r3, r6
 8015332:	60a3      	str	r3, [r4, #8]
 8015334:	6823      	ldr	r3, [r4, #0]
 8015336:	441e      	add	r6, r3
 8015338:	6026      	str	r6, [r4, #0]
 801533a:	2000      	movs	r0, #0
 801533c:	e7dc      	b.n	80152f8 <__ssputs_r+0x58>
 801533e:	462a      	mov	r2, r5
 8015340:	f000 fb23 	bl	801598a <_realloc_r>
 8015344:	4606      	mov	r6, r0
 8015346:	2800      	cmp	r0, #0
 8015348:	d1e2      	bne.n	8015310 <__ssputs_r+0x70>
 801534a:	6921      	ldr	r1, [r4, #16]
 801534c:	4650      	mov	r0, sl
 801534e:	f7ff feff 	bl	8015150 <_free_r>
 8015352:	e7c8      	b.n	80152e6 <__ssputs_r+0x46>

08015354 <_svfiprintf_r>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	461d      	mov	r5, r3
 801535a:	898b      	ldrh	r3, [r1, #12]
 801535c:	061f      	lsls	r7, r3, #24
 801535e:	b09d      	sub	sp, #116	; 0x74
 8015360:	4680      	mov	r8, r0
 8015362:	460c      	mov	r4, r1
 8015364:	4616      	mov	r6, r2
 8015366:	d50f      	bpl.n	8015388 <_svfiprintf_r+0x34>
 8015368:	690b      	ldr	r3, [r1, #16]
 801536a:	b96b      	cbnz	r3, 8015388 <_svfiprintf_r+0x34>
 801536c:	2140      	movs	r1, #64	; 0x40
 801536e:	f7ff ff3d 	bl	80151ec <_malloc_r>
 8015372:	6020      	str	r0, [r4, #0]
 8015374:	6120      	str	r0, [r4, #16]
 8015376:	b928      	cbnz	r0, 8015384 <_svfiprintf_r+0x30>
 8015378:	230c      	movs	r3, #12
 801537a:	f8c8 3000 	str.w	r3, [r8]
 801537e:	f04f 30ff 	mov.w	r0, #4294967295
 8015382:	e0c8      	b.n	8015516 <_svfiprintf_r+0x1c2>
 8015384:	2340      	movs	r3, #64	; 0x40
 8015386:	6163      	str	r3, [r4, #20]
 8015388:	2300      	movs	r3, #0
 801538a:	9309      	str	r3, [sp, #36]	; 0x24
 801538c:	2320      	movs	r3, #32
 801538e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015392:	2330      	movs	r3, #48	; 0x30
 8015394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015398:	9503      	str	r5, [sp, #12]
 801539a:	f04f 0b01 	mov.w	fp, #1
 801539e:	4637      	mov	r7, r6
 80153a0:	463d      	mov	r5, r7
 80153a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80153a6:	b10b      	cbz	r3, 80153ac <_svfiprintf_r+0x58>
 80153a8:	2b25      	cmp	r3, #37	; 0x25
 80153aa:	d13e      	bne.n	801542a <_svfiprintf_r+0xd6>
 80153ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80153b0:	d00b      	beq.n	80153ca <_svfiprintf_r+0x76>
 80153b2:	4653      	mov	r3, sl
 80153b4:	4632      	mov	r2, r6
 80153b6:	4621      	mov	r1, r4
 80153b8:	4640      	mov	r0, r8
 80153ba:	f7ff ff71 	bl	80152a0 <__ssputs_r>
 80153be:	3001      	adds	r0, #1
 80153c0:	f000 80a4 	beq.w	801550c <_svfiprintf_r+0x1b8>
 80153c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c6:	4453      	add	r3, sl
 80153c8:	9309      	str	r3, [sp, #36]	; 0x24
 80153ca:	783b      	ldrb	r3, [r7, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f000 809d 	beq.w	801550c <_svfiprintf_r+0x1b8>
 80153d2:	2300      	movs	r3, #0
 80153d4:	f04f 32ff 	mov.w	r2, #4294967295
 80153d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80153dc:	9304      	str	r3, [sp, #16]
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80153e4:	931a      	str	r3, [sp, #104]	; 0x68
 80153e6:	462f      	mov	r7, r5
 80153e8:	2205      	movs	r2, #5
 80153ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80153ee:	4850      	ldr	r0, [pc, #320]	; (8015530 <_svfiprintf_r+0x1dc>)
 80153f0:	f7f2 fe2e 	bl	8008050 <memchr>
 80153f4:	9b04      	ldr	r3, [sp, #16]
 80153f6:	b9d0      	cbnz	r0, 801542e <_svfiprintf_r+0xda>
 80153f8:	06d9      	lsls	r1, r3, #27
 80153fa:	bf44      	itt	mi
 80153fc:	2220      	movmi	r2, #32
 80153fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015402:	071a      	lsls	r2, r3, #28
 8015404:	bf44      	itt	mi
 8015406:	222b      	movmi	r2, #43	; 0x2b
 8015408:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801540c:	782a      	ldrb	r2, [r5, #0]
 801540e:	2a2a      	cmp	r2, #42	; 0x2a
 8015410:	d015      	beq.n	801543e <_svfiprintf_r+0xea>
 8015412:	9a07      	ldr	r2, [sp, #28]
 8015414:	462f      	mov	r7, r5
 8015416:	2000      	movs	r0, #0
 8015418:	250a      	movs	r5, #10
 801541a:	4639      	mov	r1, r7
 801541c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015420:	3b30      	subs	r3, #48	; 0x30
 8015422:	2b09      	cmp	r3, #9
 8015424:	d94d      	bls.n	80154c2 <_svfiprintf_r+0x16e>
 8015426:	b1b8      	cbz	r0, 8015458 <_svfiprintf_r+0x104>
 8015428:	e00f      	b.n	801544a <_svfiprintf_r+0xf6>
 801542a:	462f      	mov	r7, r5
 801542c:	e7b8      	b.n	80153a0 <_svfiprintf_r+0x4c>
 801542e:	4a40      	ldr	r2, [pc, #256]	; (8015530 <_svfiprintf_r+0x1dc>)
 8015430:	1a80      	subs	r0, r0, r2
 8015432:	fa0b f000 	lsl.w	r0, fp, r0
 8015436:	4318      	orrs	r0, r3
 8015438:	9004      	str	r0, [sp, #16]
 801543a:	463d      	mov	r5, r7
 801543c:	e7d3      	b.n	80153e6 <_svfiprintf_r+0x92>
 801543e:	9a03      	ldr	r2, [sp, #12]
 8015440:	1d11      	adds	r1, r2, #4
 8015442:	6812      	ldr	r2, [r2, #0]
 8015444:	9103      	str	r1, [sp, #12]
 8015446:	2a00      	cmp	r2, #0
 8015448:	db01      	blt.n	801544e <_svfiprintf_r+0xfa>
 801544a:	9207      	str	r2, [sp, #28]
 801544c:	e004      	b.n	8015458 <_svfiprintf_r+0x104>
 801544e:	4252      	negs	r2, r2
 8015450:	f043 0302 	orr.w	r3, r3, #2
 8015454:	9207      	str	r2, [sp, #28]
 8015456:	9304      	str	r3, [sp, #16]
 8015458:	783b      	ldrb	r3, [r7, #0]
 801545a:	2b2e      	cmp	r3, #46	; 0x2e
 801545c:	d10c      	bne.n	8015478 <_svfiprintf_r+0x124>
 801545e:	787b      	ldrb	r3, [r7, #1]
 8015460:	2b2a      	cmp	r3, #42	; 0x2a
 8015462:	d133      	bne.n	80154cc <_svfiprintf_r+0x178>
 8015464:	9b03      	ldr	r3, [sp, #12]
 8015466:	1d1a      	adds	r2, r3, #4
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	9203      	str	r2, [sp, #12]
 801546c:	2b00      	cmp	r3, #0
 801546e:	bfb8      	it	lt
 8015470:	f04f 33ff 	movlt.w	r3, #4294967295
 8015474:	3702      	adds	r7, #2
 8015476:	9305      	str	r3, [sp, #20]
 8015478:	4d2e      	ldr	r5, [pc, #184]	; (8015534 <_svfiprintf_r+0x1e0>)
 801547a:	7839      	ldrb	r1, [r7, #0]
 801547c:	2203      	movs	r2, #3
 801547e:	4628      	mov	r0, r5
 8015480:	f7f2 fde6 	bl	8008050 <memchr>
 8015484:	b138      	cbz	r0, 8015496 <_svfiprintf_r+0x142>
 8015486:	2340      	movs	r3, #64	; 0x40
 8015488:	1b40      	subs	r0, r0, r5
 801548a:	fa03 f000 	lsl.w	r0, r3, r0
 801548e:	9b04      	ldr	r3, [sp, #16]
 8015490:	4303      	orrs	r3, r0
 8015492:	3701      	adds	r7, #1
 8015494:	9304      	str	r3, [sp, #16]
 8015496:	7839      	ldrb	r1, [r7, #0]
 8015498:	4827      	ldr	r0, [pc, #156]	; (8015538 <_svfiprintf_r+0x1e4>)
 801549a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801549e:	2206      	movs	r2, #6
 80154a0:	1c7e      	adds	r6, r7, #1
 80154a2:	f7f2 fdd5 	bl	8008050 <memchr>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	d038      	beq.n	801551c <_svfiprintf_r+0x1c8>
 80154aa:	4b24      	ldr	r3, [pc, #144]	; (801553c <_svfiprintf_r+0x1e8>)
 80154ac:	bb13      	cbnz	r3, 80154f4 <_svfiprintf_r+0x1a0>
 80154ae:	9b03      	ldr	r3, [sp, #12]
 80154b0:	3307      	adds	r3, #7
 80154b2:	f023 0307 	bic.w	r3, r3, #7
 80154b6:	3308      	adds	r3, #8
 80154b8:	9303      	str	r3, [sp, #12]
 80154ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154bc:	444b      	add	r3, r9
 80154be:	9309      	str	r3, [sp, #36]	; 0x24
 80154c0:	e76d      	b.n	801539e <_svfiprintf_r+0x4a>
 80154c2:	fb05 3202 	mla	r2, r5, r2, r3
 80154c6:	2001      	movs	r0, #1
 80154c8:	460f      	mov	r7, r1
 80154ca:	e7a6      	b.n	801541a <_svfiprintf_r+0xc6>
 80154cc:	2300      	movs	r3, #0
 80154ce:	3701      	adds	r7, #1
 80154d0:	9305      	str	r3, [sp, #20]
 80154d2:	4619      	mov	r1, r3
 80154d4:	250a      	movs	r5, #10
 80154d6:	4638      	mov	r0, r7
 80154d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154dc:	3a30      	subs	r2, #48	; 0x30
 80154de:	2a09      	cmp	r2, #9
 80154e0:	d903      	bls.n	80154ea <_svfiprintf_r+0x196>
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d0c8      	beq.n	8015478 <_svfiprintf_r+0x124>
 80154e6:	9105      	str	r1, [sp, #20]
 80154e8:	e7c6      	b.n	8015478 <_svfiprintf_r+0x124>
 80154ea:	fb05 2101 	mla	r1, r5, r1, r2
 80154ee:	2301      	movs	r3, #1
 80154f0:	4607      	mov	r7, r0
 80154f2:	e7f0      	b.n	80154d6 <_svfiprintf_r+0x182>
 80154f4:	ab03      	add	r3, sp, #12
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	4622      	mov	r2, r4
 80154fa:	4b11      	ldr	r3, [pc, #68]	; (8015540 <_svfiprintf_r+0x1ec>)
 80154fc:	a904      	add	r1, sp, #16
 80154fe:	4640      	mov	r0, r8
 8015500:	f7fc f8c4 	bl	801168c <_printf_float>
 8015504:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015508:	4681      	mov	r9, r0
 801550a:	d1d6      	bne.n	80154ba <_svfiprintf_r+0x166>
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	065b      	lsls	r3, r3, #25
 8015510:	f53f af35 	bmi.w	801537e <_svfiprintf_r+0x2a>
 8015514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015516:	b01d      	add	sp, #116	; 0x74
 8015518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551c:	ab03      	add	r3, sp, #12
 801551e:	9300      	str	r3, [sp, #0]
 8015520:	4622      	mov	r2, r4
 8015522:	4b07      	ldr	r3, [pc, #28]	; (8015540 <_svfiprintf_r+0x1ec>)
 8015524:	a904      	add	r1, sp, #16
 8015526:	4640      	mov	r0, r8
 8015528:	f7fc fb66 	bl	8011bf8 <_printf_i>
 801552c:	e7ea      	b.n	8015504 <_svfiprintf_r+0x1b0>
 801552e:	bf00      	nop
 8015530:	08015d94 	.word	0x08015d94
 8015534:	08015d9a 	.word	0x08015d9a
 8015538:	08015d9e 	.word	0x08015d9e
 801553c:	0801168d 	.word	0x0801168d
 8015540:	080152a1 	.word	0x080152a1

08015544 <__sfputc_r>:
 8015544:	6893      	ldr	r3, [r2, #8]
 8015546:	3b01      	subs	r3, #1
 8015548:	2b00      	cmp	r3, #0
 801554a:	b410      	push	{r4}
 801554c:	6093      	str	r3, [r2, #8]
 801554e:	da08      	bge.n	8015562 <__sfputc_r+0x1e>
 8015550:	6994      	ldr	r4, [r2, #24]
 8015552:	42a3      	cmp	r3, r4
 8015554:	db01      	blt.n	801555a <__sfputc_r+0x16>
 8015556:	290a      	cmp	r1, #10
 8015558:	d103      	bne.n	8015562 <__sfputc_r+0x1e>
 801555a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801555e:	f7fd bdb1 	b.w	80130c4 <__swbuf_r>
 8015562:	6813      	ldr	r3, [r2, #0]
 8015564:	1c58      	adds	r0, r3, #1
 8015566:	6010      	str	r0, [r2, #0]
 8015568:	7019      	strb	r1, [r3, #0]
 801556a:	4608      	mov	r0, r1
 801556c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015570:	4770      	bx	lr

08015572 <__sfputs_r>:
 8015572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015574:	4606      	mov	r6, r0
 8015576:	460f      	mov	r7, r1
 8015578:	4614      	mov	r4, r2
 801557a:	18d5      	adds	r5, r2, r3
 801557c:	42ac      	cmp	r4, r5
 801557e:	d101      	bne.n	8015584 <__sfputs_r+0x12>
 8015580:	2000      	movs	r0, #0
 8015582:	e007      	b.n	8015594 <__sfputs_r+0x22>
 8015584:	463a      	mov	r2, r7
 8015586:	f814 1b01 	ldrb.w	r1, [r4], #1
 801558a:	4630      	mov	r0, r6
 801558c:	f7ff ffda 	bl	8015544 <__sfputc_r>
 8015590:	1c43      	adds	r3, r0, #1
 8015592:	d1f3      	bne.n	801557c <__sfputs_r+0xa>
 8015594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015598 <_vfiprintf_r>:
 8015598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559c:	460c      	mov	r4, r1
 801559e:	b09d      	sub	sp, #116	; 0x74
 80155a0:	4617      	mov	r7, r2
 80155a2:	461d      	mov	r5, r3
 80155a4:	4606      	mov	r6, r0
 80155a6:	b118      	cbz	r0, 80155b0 <_vfiprintf_r+0x18>
 80155a8:	6983      	ldr	r3, [r0, #24]
 80155aa:	b90b      	cbnz	r3, 80155b0 <_vfiprintf_r+0x18>
 80155ac:	f7fe fd80 	bl	80140b0 <__sinit>
 80155b0:	4b7c      	ldr	r3, [pc, #496]	; (80157a4 <_vfiprintf_r+0x20c>)
 80155b2:	429c      	cmp	r4, r3
 80155b4:	d158      	bne.n	8015668 <_vfiprintf_r+0xd0>
 80155b6:	6874      	ldr	r4, [r6, #4]
 80155b8:	89a3      	ldrh	r3, [r4, #12]
 80155ba:	0718      	lsls	r0, r3, #28
 80155bc:	d55e      	bpl.n	801567c <_vfiprintf_r+0xe4>
 80155be:	6923      	ldr	r3, [r4, #16]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d05b      	beq.n	801567c <_vfiprintf_r+0xe4>
 80155c4:	2300      	movs	r3, #0
 80155c6:	9309      	str	r3, [sp, #36]	; 0x24
 80155c8:	2320      	movs	r3, #32
 80155ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155ce:	2330      	movs	r3, #48	; 0x30
 80155d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155d4:	9503      	str	r5, [sp, #12]
 80155d6:	f04f 0b01 	mov.w	fp, #1
 80155da:	46b8      	mov	r8, r7
 80155dc:	4645      	mov	r5, r8
 80155de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80155e2:	b10b      	cbz	r3, 80155e8 <_vfiprintf_r+0x50>
 80155e4:	2b25      	cmp	r3, #37	; 0x25
 80155e6:	d154      	bne.n	8015692 <_vfiprintf_r+0xfa>
 80155e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80155ec:	d00b      	beq.n	8015606 <_vfiprintf_r+0x6e>
 80155ee:	4653      	mov	r3, sl
 80155f0:	463a      	mov	r2, r7
 80155f2:	4621      	mov	r1, r4
 80155f4:	4630      	mov	r0, r6
 80155f6:	f7ff ffbc 	bl	8015572 <__sfputs_r>
 80155fa:	3001      	adds	r0, #1
 80155fc:	f000 80c2 	beq.w	8015784 <_vfiprintf_r+0x1ec>
 8015600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015602:	4453      	add	r3, sl
 8015604:	9309      	str	r3, [sp, #36]	; 0x24
 8015606:	f898 3000 	ldrb.w	r3, [r8]
 801560a:	2b00      	cmp	r3, #0
 801560c:	f000 80ba 	beq.w	8015784 <_vfiprintf_r+0x1ec>
 8015610:	2300      	movs	r3, #0
 8015612:	f04f 32ff 	mov.w	r2, #4294967295
 8015616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801561a:	9304      	str	r3, [sp, #16]
 801561c:	9307      	str	r3, [sp, #28]
 801561e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015622:	931a      	str	r3, [sp, #104]	; 0x68
 8015624:	46a8      	mov	r8, r5
 8015626:	2205      	movs	r2, #5
 8015628:	f818 1b01 	ldrb.w	r1, [r8], #1
 801562c:	485e      	ldr	r0, [pc, #376]	; (80157a8 <_vfiprintf_r+0x210>)
 801562e:	f7f2 fd0f 	bl	8008050 <memchr>
 8015632:	9b04      	ldr	r3, [sp, #16]
 8015634:	bb78      	cbnz	r0, 8015696 <_vfiprintf_r+0xfe>
 8015636:	06d9      	lsls	r1, r3, #27
 8015638:	bf44      	itt	mi
 801563a:	2220      	movmi	r2, #32
 801563c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015640:	071a      	lsls	r2, r3, #28
 8015642:	bf44      	itt	mi
 8015644:	222b      	movmi	r2, #43	; 0x2b
 8015646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801564a:	782a      	ldrb	r2, [r5, #0]
 801564c:	2a2a      	cmp	r2, #42	; 0x2a
 801564e:	d02a      	beq.n	80156a6 <_vfiprintf_r+0x10e>
 8015650:	9a07      	ldr	r2, [sp, #28]
 8015652:	46a8      	mov	r8, r5
 8015654:	2000      	movs	r0, #0
 8015656:	250a      	movs	r5, #10
 8015658:	4641      	mov	r1, r8
 801565a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801565e:	3b30      	subs	r3, #48	; 0x30
 8015660:	2b09      	cmp	r3, #9
 8015662:	d969      	bls.n	8015738 <_vfiprintf_r+0x1a0>
 8015664:	b360      	cbz	r0, 80156c0 <_vfiprintf_r+0x128>
 8015666:	e024      	b.n	80156b2 <_vfiprintf_r+0x11a>
 8015668:	4b50      	ldr	r3, [pc, #320]	; (80157ac <_vfiprintf_r+0x214>)
 801566a:	429c      	cmp	r4, r3
 801566c:	d101      	bne.n	8015672 <_vfiprintf_r+0xda>
 801566e:	68b4      	ldr	r4, [r6, #8]
 8015670:	e7a2      	b.n	80155b8 <_vfiprintf_r+0x20>
 8015672:	4b4f      	ldr	r3, [pc, #316]	; (80157b0 <_vfiprintf_r+0x218>)
 8015674:	429c      	cmp	r4, r3
 8015676:	bf08      	it	eq
 8015678:	68f4      	ldreq	r4, [r6, #12]
 801567a:	e79d      	b.n	80155b8 <_vfiprintf_r+0x20>
 801567c:	4621      	mov	r1, r4
 801567e:	4630      	mov	r0, r6
 8015680:	f7fd fd72 	bl	8013168 <__swsetup_r>
 8015684:	2800      	cmp	r0, #0
 8015686:	d09d      	beq.n	80155c4 <_vfiprintf_r+0x2c>
 8015688:	f04f 30ff 	mov.w	r0, #4294967295
 801568c:	b01d      	add	sp, #116	; 0x74
 801568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015692:	46a8      	mov	r8, r5
 8015694:	e7a2      	b.n	80155dc <_vfiprintf_r+0x44>
 8015696:	4a44      	ldr	r2, [pc, #272]	; (80157a8 <_vfiprintf_r+0x210>)
 8015698:	1a80      	subs	r0, r0, r2
 801569a:	fa0b f000 	lsl.w	r0, fp, r0
 801569e:	4318      	orrs	r0, r3
 80156a0:	9004      	str	r0, [sp, #16]
 80156a2:	4645      	mov	r5, r8
 80156a4:	e7be      	b.n	8015624 <_vfiprintf_r+0x8c>
 80156a6:	9a03      	ldr	r2, [sp, #12]
 80156a8:	1d11      	adds	r1, r2, #4
 80156aa:	6812      	ldr	r2, [r2, #0]
 80156ac:	9103      	str	r1, [sp, #12]
 80156ae:	2a00      	cmp	r2, #0
 80156b0:	db01      	blt.n	80156b6 <_vfiprintf_r+0x11e>
 80156b2:	9207      	str	r2, [sp, #28]
 80156b4:	e004      	b.n	80156c0 <_vfiprintf_r+0x128>
 80156b6:	4252      	negs	r2, r2
 80156b8:	f043 0302 	orr.w	r3, r3, #2
 80156bc:	9207      	str	r2, [sp, #28]
 80156be:	9304      	str	r3, [sp, #16]
 80156c0:	f898 3000 	ldrb.w	r3, [r8]
 80156c4:	2b2e      	cmp	r3, #46	; 0x2e
 80156c6:	d10e      	bne.n	80156e6 <_vfiprintf_r+0x14e>
 80156c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80156cc:	2b2a      	cmp	r3, #42	; 0x2a
 80156ce:	d138      	bne.n	8015742 <_vfiprintf_r+0x1aa>
 80156d0:	9b03      	ldr	r3, [sp, #12]
 80156d2:	1d1a      	adds	r2, r3, #4
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	9203      	str	r2, [sp, #12]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	bfb8      	it	lt
 80156dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80156e0:	f108 0802 	add.w	r8, r8, #2
 80156e4:	9305      	str	r3, [sp, #20]
 80156e6:	4d33      	ldr	r5, [pc, #204]	; (80157b4 <_vfiprintf_r+0x21c>)
 80156e8:	f898 1000 	ldrb.w	r1, [r8]
 80156ec:	2203      	movs	r2, #3
 80156ee:	4628      	mov	r0, r5
 80156f0:	f7f2 fcae 	bl	8008050 <memchr>
 80156f4:	b140      	cbz	r0, 8015708 <_vfiprintf_r+0x170>
 80156f6:	2340      	movs	r3, #64	; 0x40
 80156f8:	1b40      	subs	r0, r0, r5
 80156fa:	fa03 f000 	lsl.w	r0, r3, r0
 80156fe:	9b04      	ldr	r3, [sp, #16]
 8015700:	4303      	orrs	r3, r0
 8015702:	f108 0801 	add.w	r8, r8, #1
 8015706:	9304      	str	r3, [sp, #16]
 8015708:	f898 1000 	ldrb.w	r1, [r8]
 801570c:	482a      	ldr	r0, [pc, #168]	; (80157b8 <_vfiprintf_r+0x220>)
 801570e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015712:	2206      	movs	r2, #6
 8015714:	f108 0701 	add.w	r7, r8, #1
 8015718:	f7f2 fc9a 	bl	8008050 <memchr>
 801571c:	2800      	cmp	r0, #0
 801571e:	d037      	beq.n	8015790 <_vfiprintf_r+0x1f8>
 8015720:	4b26      	ldr	r3, [pc, #152]	; (80157bc <_vfiprintf_r+0x224>)
 8015722:	bb1b      	cbnz	r3, 801576c <_vfiprintf_r+0x1d4>
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	3307      	adds	r3, #7
 8015728:	f023 0307 	bic.w	r3, r3, #7
 801572c:	3308      	adds	r3, #8
 801572e:	9303      	str	r3, [sp, #12]
 8015730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015732:	444b      	add	r3, r9
 8015734:	9309      	str	r3, [sp, #36]	; 0x24
 8015736:	e750      	b.n	80155da <_vfiprintf_r+0x42>
 8015738:	fb05 3202 	mla	r2, r5, r2, r3
 801573c:	2001      	movs	r0, #1
 801573e:	4688      	mov	r8, r1
 8015740:	e78a      	b.n	8015658 <_vfiprintf_r+0xc0>
 8015742:	2300      	movs	r3, #0
 8015744:	f108 0801 	add.w	r8, r8, #1
 8015748:	9305      	str	r3, [sp, #20]
 801574a:	4619      	mov	r1, r3
 801574c:	250a      	movs	r5, #10
 801574e:	4640      	mov	r0, r8
 8015750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015754:	3a30      	subs	r2, #48	; 0x30
 8015756:	2a09      	cmp	r2, #9
 8015758:	d903      	bls.n	8015762 <_vfiprintf_r+0x1ca>
 801575a:	2b00      	cmp	r3, #0
 801575c:	d0c3      	beq.n	80156e6 <_vfiprintf_r+0x14e>
 801575e:	9105      	str	r1, [sp, #20]
 8015760:	e7c1      	b.n	80156e6 <_vfiprintf_r+0x14e>
 8015762:	fb05 2101 	mla	r1, r5, r1, r2
 8015766:	2301      	movs	r3, #1
 8015768:	4680      	mov	r8, r0
 801576a:	e7f0      	b.n	801574e <_vfiprintf_r+0x1b6>
 801576c:	ab03      	add	r3, sp, #12
 801576e:	9300      	str	r3, [sp, #0]
 8015770:	4622      	mov	r2, r4
 8015772:	4b13      	ldr	r3, [pc, #76]	; (80157c0 <_vfiprintf_r+0x228>)
 8015774:	a904      	add	r1, sp, #16
 8015776:	4630      	mov	r0, r6
 8015778:	f7fb ff88 	bl	801168c <_printf_float>
 801577c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015780:	4681      	mov	r9, r0
 8015782:	d1d5      	bne.n	8015730 <_vfiprintf_r+0x198>
 8015784:	89a3      	ldrh	r3, [r4, #12]
 8015786:	065b      	lsls	r3, r3, #25
 8015788:	f53f af7e 	bmi.w	8015688 <_vfiprintf_r+0xf0>
 801578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801578e:	e77d      	b.n	801568c <_vfiprintf_r+0xf4>
 8015790:	ab03      	add	r3, sp, #12
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	4622      	mov	r2, r4
 8015796:	4b0a      	ldr	r3, [pc, #40]	; (80157c0 <_vfiprintf_r+0x228>)
 8015798:	a904      	add	r1, sp, #16
 801579a:	4630      	mov	r0, r6
 801579c:	f7fc fa2c 	bl	8011bf8 <_printf_i>
 80157a0:	e7ec      	b.n	801577c <_vfiprintf_r+0x1e4>
 80157a2:	bf00      	nop
 80157a4:	08015c48 	.word	0x08015c48
 80157a8:	08015d94 	.word	0x08015d94
 80157ac:	08015c68 	.word	0x08015c68
 80157b0:	08015c28 	.word	0x08015c28
 80157b4:	08015d9a 	.word	0x08015d9a
 80157b8:	08015d9e 	.word	0x08015d9e
 80157bc:	0801168d 	.word	0x0801168d
 80157c0:	08015573 	.word	0x08015573

080157c4 <_sbrk_r>:
 80157c4:	b538      	push	{r3, r4, r5, lr}
 80157c6:	4c06      	ldr	r4, [pc, #24]	; (80157e0 <_sbrk_r+0x1c>)
 80157c8:	2300      	movs	r3, #0
 80157ca:	4605      	mov	r5, r0
 80157cc:	4608      	mov	r0, r1
 80157ce:	6023      	str	r3, [r4, #0]
 80157d0:	f7f6 f9b8 	bl	800bb44 <_sbrk>
 80157d4:	1c43      	adds	r3, r0, #1
 80157d6:	d102      	bne.n	80157de <_sbrk_r+0x1a>
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	b103      	cbz	r3, 80157de <_sbrk_r+0x1a>
 80157dc:	602b      	str	r3, [r5, #0]
 80157de:	bd38      	pop	{r3, r4, r5, pc}
 80157e0:	20018644 	.word	0x20018644

080157e4 <__sread>:
 80157e4:	b510      	push	{r4, lr}
 80157e6:	460c      	mov	r4, r1
 80157e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ec:	f000 f8f4 	bl	80159d8 <_read_r>
 80157f0:	2800      	cmp	r0, #0
 80157f2:	bfab      	itete	ge
 80157f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80157f6:	89a3      	ldrhlt	r3, [r4, #12]
 80157f8:	181b      	addge	r3, r3, r0
 80157fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80157fe:	bfac      	ite	ge
 8015800:	6563      	strge	r3, [r4, #84]	; 0x54
 8015802:	81a3      	strhlt	r3, [r4, #12]
 8015804:	bd10      	pop	{r4, pc}

08015806 <__swrite>:
 8015806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580a:	461f      	mov	r7, r3
 801580c:	898b      	ldrh	r3, [r1, #12]
 801580e:	05db      	lsls	r3, r3, #23
 8015810:	4605      	mov	r5, r0
 8015812:	460c      	mov	r4, r1
 8015814:	4616      	mov	r6, r2
 8015816:	d505      	bpl.n	8015824 <__swrite+0x1e>
 8015818:	2302      	movs	r3, #2
 801581a:	2200      	movs	r2, #0
 801581c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015820:	f000 f886 	bl	8015930 <_lseek_r>
 8015824:	89a3      	ldrh	r3, [r4, #12]
 8015826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801582a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801582e:	81a3      	strh	r3, [r4, #12]
 8015830:	4632      	mov	r2, r6
 8015832:	463b      	mov	r3, r7
 8015834:	4628      	mov	r0, r5
 8015836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801583a:	f000 b835 	b.w	80158a8 <_write_r>

0801583e <__sseek>:
 801583e:	b510      	push	{r4, lr}
 8015840:	460c      	mov	r4, r1
 8015842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015846:	f000 f873 	bl	8015930 <_lseek_r>
 801584a:	1c43      	adds	r3, r0, #1
 801584c:	89a3      	ldrh	r3, [r4, #12]
 801584e:	bf15      	itete	ne
 8015850:	6560      	strne	r0, [r4, #84]	; 0x54
 8015852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801585a:	81a3      	strheq	r3, [r4, #12]
 801585c:	bf18      	it	ne
 801585e:	81a3      	strhne	r3, [r4, #12]
 8015860:	bd10      	pop	{r4, pc}

08015862 <__sclose>:
 8015862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015866:	f000 b831 	b.w	80158cc <_close_r>

0801586a <strncmp>:
 801586a:	b510      	push	{r4, lr}
 801586c:	b16a      	cbz	r2, 801588a <strncmp+0x20>
 801586e:	3901      	subs	r1, #1
 8015870:	1884      	adds	r4, r0, r2
 8015872:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015876:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801587a:	4293      	cmp	r3, r2
 801587c:	d103      	bne.n	8015886 <strncmp+0x1c>
 801587e:	42a0      	cmp	r0, r4
 8015880:	d001      	beq.n	8015886 <strncmp+0x1c>
 8015882:	2b00      	cmp	r3, #0
 8015884:	d1f5      	bne.n	8015872 <strncmp+0x8>
 8015886:	1a98      	subs	r0, r3, r2
 8015888:	bd10      	pop	{r4, pc}
 801588a:	4610      	mov	r0, r2
 801588c:	e7fc      	b.n	8015888 <strncmp+0x1e>

0801588e <__ascii_wctomb>:
 801588e:	b149      	cbz	r1, 80158a4 <__ascii_wctomb+0x16>
 8015890:	2aff      	cmp	r2, #255	; 0xff
 8015892:	bf85      	ittet	hi
 8015894:	238a      	movhi	r3, #138	; 0x8a
 8015896:	6003      	strhi	r3, [r0, #0]
 8015898:	700a      	strbls	r2, [r1, #0]
 801589a:	f04f 30ff 	movhi.w	r0, #4294967295
 801589e:	bf98      	it	ls
 80158a0:	2001      	movls	r0, #1
 80158a2:	4770      	bx	lr
 80158a4:	4608      	mov	r0, r1
 80158a6:	4770      	bx	lr

080158a8 <_write_r>:
 80158a8:	b538      	push	{r3, r4, r5, lr}
 80158aa:	4c07      	ldr	r4, [pc, #28]	; (80158c8 <_write_r+0x20>)
 80158ac:	4605      	mov	r5, r0
 80158ae:	4608      	mov	r0, r1
 80158b0:	4611      	mov	r1, r2
 80158b2:	2200      	movs	r2, #0
 80158b4:	6022      	str	r2, [r4, #0]
 80158b6:	461a      	mov	r2, r3
 80158b8:	f7f6 f8f3 	bl	800baa2 <_write>
 80158bc:	1c43      	adds	r3, r0, #1
 80158be:	d102      	bne.n	80158c6 <_write_r+0x1e>
 80158c0:	6823      	ldr	r3, [r4, #0]
 80158c2:	b103      	cbz	r3, 80158c6 <_write_r+0x1e>
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	bd38      	pop	{r3, r4, r5, pc}
 80158c8:	20018644 	.word	0x20018644

080158cc <_close_r>:
 80158cc:	b538      	push	{r3, r4, r5, lr}
 80158ce:	4c06      	ldr	r4, [pc, #24]	; (80158e8 <_close_r+0x1c>)
 80158d0:	2300      	movs	r3, #0
 80158d2:	4605      	mov	r5, r0
 80158d4:	4608      	mov	r0, r1
 80158d6:	6023      	str	r3, [r4, #0]
 80158d8:	f7f6 f8ff 	bl	800bada <_close>
 80158dc:	1c43      	adds	r3, r0, #1
 80158de:	d102      	bne.n	80158e6 <_close_r+0x1a>
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	b103      	cbz	r3, 80158e6 <_close_r+0x1a>
 80158e4:	602b      	str	r3, [r5, #0]
 80158e6:	bd38      	pop	{r3, r4, r5, pc}
 80158e8:	20018644 	.word	0x20018644

080158ec <_fstat_r>:
 80158ec:	b538      	push	{r3, r4, r5, lr}
 80158ee:	4c07      	ldr	r4, [pc, #28]	; (801590c <_fstat_r+0x20>)
 80158f0:	2300      	movs	r3, #0
 80158f2:	4605      	mov	r5, r0
 80158f4:	4608      	mov	r0, r1
 80158f6:	4611      	mov	r1, r2
 80158f8:	6023      	str	r3, [r4, #0]
 80158fa:	f7f6 f8fa 	bl	800baf2 <_fstat>
 80158fe:	1c43      	adds	r3, r0, #1
 8015900:	d102      	bne.n	8015908 <_fstat_r+0x1c>
 8015902:	6823      	ldr	r3, [r4, #0]
 8015904:	b103      	cbz	r3, 8015908 <_fstat_r+0x1c>
 8015906:	602b      	str	r3, [r5, #0]
 8015908:	bd38      	pop	{r3, r4, r5, pc}
 801590a:	bf00      	nop
 801590c:	20018644 	.word	0x20018644

08015910 <_isatty_r>:
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	4c06      	ldr	r4, [pc, #24]	; (801592c <_isatty_r+0x1c>)
 8015914:	2300      	movs	r3, #0
 8015916:	4605      	mov	r5, r0
 8015918:	4608      	mov	r0, r1
 801591a:	6023      	str	r3, [r4, #0]
 801591c:	f7f6 f8f9 	bl	800bb12 <_isatty>
 8015920:	1c43      	adds	r3, r0, #1
 8015922:	d102      	bne.n	801592a <_isatty_r+0x1a>
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	b103      	cbz	r3, 801592a <_isatty_r+0x1a>
 8015928:	602b      	str	r3, [r5, #0]
 801592a:	bd38      	pop	{r3, r4, r5, pc}
 801592c:	20018644 	.word	0x20018644

08015930 <_lseek_r>:
 8015930:	b538      	push	{r3, r4, r5, lr}
 8015932:	4c07      	ldr	r4, [pc, #28]	; (8015950 <_lseek_r+0x20>)
 8015934:	4605      	mov	r5, r0
 8015936:	4608      	mov	r0, r1
 8015938:	4611      	mov	r1, r2
 801593a:	2200      	movs	r2, #0
 801593c:	6022      	str	r2, [r4, #0]
 801593e:	461a      	mov	r2, r3
 8015940:	f7f6 f8f2 	bl	800bb28 <_lseek>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d102      	bne.n	801594e <_lseek_r+0x1e>
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	b103      	cbz	r3, 801594e <_lseek_r+0x1e>
 801594c:	602b      	str	r3, [r5, #0]
 801594e:	bd38      	pop	{r3, r4, r5, pc}
 8015950:	20018644 	.word	0x20018644

08015954 <memmove>:
 8015954:	4288      	cmp	r0, r1
 8015956:	b510      	push	{r4, lr}
 8015958:	eb01 0302 	add.w	r3, r1, r2
 801595c:	d807      	bhi.n	801596e <memmove+0x1a>
 801595e:	1e42      	subs	r2, r0, #1
 8015960:	4299      	cmp	r1, r3
 8015962:	d00a      	beq.n	801597a <memmove+0x26>
 8015964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015968:	f802 4f01 	strb.w	r4, [r2, #1]!
 801596c:	e7f8      	b.n	8015960 <memmove+0xc>
 801596e:	4283      	cmp	r3, r0
 8015970:	d9f5      	bls.n	801595e <memmove+0xa>
 8015972:	1881      	adds	r1, r0, r2
 8015974:	1ad2      	subs	r2, r2, r3
 8015976:	42d3      	cmn	r3, r2
 8015978:	d100      	bne.n	801597c <memmove+0x28>
 801597a:	bd10      	pop	{r4, pc}
 801597c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015980:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015984:	e7f7      	b.n	8015976 <memmove+0x22>

08015986 <__malloc_lock>:
 8015986:	4770      	bx	lr

08015988 <__malloc_unlock>:
 8015988:	4770      	bx	lr

0801598a <_realloc_r>:
 801598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598c:	4607      	mov	r7, r0
 801598e:	4614      	mov	r4, r2
 8015990:	460e      	mov	r6, r1
 8015992:	b921      	cbnz	r1, 801599e <_realloc_r+0x14>
 8015994:	4611      	mov	r1, r2
 8015996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801599a:	f7ff bc27 	b.w	80151ec <_malloc_r>
 801599e:	b922      	cbnz	r2, 80159aa <_realloc_r+0x20>
 80159a0:	f7ff fbd6 	bl	8015150 <_free_r>
 80159a4:	4625      	mov	r5, r4
 80159a6:	4628      	mov	r0, r5
 80159a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159aa:	f000 f827 	bl	80159fc <_malloc_usable_size_r>
 80159ae:	42a0      	cmp	r0, r4
 80159b0:	d20f      	bcs.n	80159d2 <_realloc_r+0x48>
 80159b2:	4621      	mov	r1, r4
 80159b4:	4638      	mov	r0, r7
 80159b6:	f7ff fc19 	bl	80151ec <_malloc_r>
 80159ba:	4605      	mov	r5, r0
 80159bc:	2800      	cmp	r0, #0
 80159be:	d0f2      	beq.n	80159a6 <_realloc_r+0x1c>
 80159c0:	4631      	mov	r1, r6
 80159c2:	4622      	mov	r2, r4
 80159c4:	f7fb fdba 	bl	801153c <memcpy>
 80159c8:	4631      	mov	r1, r6
 80159ca:	4638      	mov	r0, r7
 80159cc:	f7ff fbc0 	bl	8015150 <_free_r>
 80159d0:	e7e9      	b.n	80159a6 <_realloc_r+0x1c>
 80159d2:	4635      	mov	r5, r6
 80159d4:	e7e7      	b.n	80159a6 <_realloc_r+0x1c>
	...

080159d8 <_read_r>:
 80159d8:	b538      	push	{r3, r4, r5, lr}
 80159da:	4c07      	ldr	r4, [pc, #28]	; (80159f8 <_read_r+0x20>)
 80159dc:	4605      	mov	r5, r0
 80159de:	4608      	mov	r0, r1
 80159e0:	4611      	mov	r1, r2
 80159e2:	2200      	movs	r2, #0
 80159e4:	6022      	str	r2, [r4, #0]
 80159e6:	461a      	mov	r2, r3
 80159e8:	f7f6 f83e 	bl	800ba68 <_read>
 80159ec:	1c43      	adds	r3, r0, #1
 80159ee:	d102      	bne.n	80159f6 <_read_r+0x1e>
 80159f0:	6823      	ldr	r3, [r4, #0]
 80159f2:	b103      	cbz	r3, 80159f6 <_read_r+0x1e>
 80159f4:	602b      	str	r3, [r5, #0]
 80159f6:	bd38      	pop	{r3, r4, r5, pc}
 80159f8:	20018644 	.word	0x20018644

080159fc <_malloc_usable_size_r>:
 80159fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a00:	1f18      	subs	r0, r3, #4
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	bfbc      	itt	lt
 8015a06:	580b      	ldrlt	r3, [r1, r0]
 8015a08:	18c0      	addlt	r0, r0, r3
 8015a0a:	4770      	bx	lr

08015a0c <_init>:
 8015a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a0e:	bf00      	nop
 8015a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a12:	bc08      	pop	{r3}
 8015a14:	469e      	mov	lr, r3
 8015a16:	4770      	bx	lr

08015a18 <_fini>:
 8015a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a1a:	bf00      	nop
 8015a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a1e:	bc08      	pop	{r3}
 8015a20:	469e      	mov	lr, r3
 8015a22:	4770      	bx	lr
